<?xml version="1.0" encoding="utf-8"?>
<Tsltn Version="1.0" SourceFile="..\bin\Release\netstandard2.0\de\FolkerKinzel.Strings.xml" SourceLanguage="de" TargetLanguage="en">
  <T ID="FB7C6BB26EEA39EB">Ordinal comparison of the characters.</T>
  <T ID="AA2EB5F98CF489A2">Ordinal comparison of the characters without taking upper and lower case into account.</T>
  <T ID="76722699059A0A21">Named constants to specify the type of hashcode for Char sequences.</T>
  <T ID="F856C6A42FFD6613">Only letters and decimal digits are hashed. The case is not considered.</T>
  <T ID="EA3E3127DED2B06F">Veraltet.</T>
  <T ID="338D6113DED2B06F">Veraltet.</T>
  <T ID="AB2EAAD12D2816FE"></T>
  <T ID="4898A5882D2816FE"></T>
  <T ID="F8E23B082D2816FE"></T>
  <T ID="96FB29A10F779F56">The Char sequence to be hashed.</T>
  <T ID="7DAFA9EFE0331BDC">The kind of hashcode to be generated.</T>
  <T ID="CCE2360C4C32CA81">The hashcode.</T>
  <T ID="51F91115DFB8F2B5">&lt;paramref name ="hashType"/&gt; is not a defined value of the &lt;see cref ="T:FolkerKinzel.Strings.HashType"/&gt; enum.</T>
  <T ID="F1462E3B37A3D245">&lt;code/&gt;</T>
  <T ID="EFF1F17BBB668458">Extension methods for the &lt;see cref ="T:System.ReadOnlySpan`1"/&gt; struct, which are used in older .NET versions as polyfills for methods from current .NET versions.</T>
  <T ID="D679775B3286C32B">Indicates whether a specified value is found in a &lt;see cref ="T:System.ReadOnlySpan`1"/&gt;. Values are compared with "IEquatable {T} .Equals (T)".</T>
  <T ID="FE1982C9A7C454C9">The type of the span.</T>
  <T ID="F44920C9C6DCBCB1">The span to search.</T>
  <T ID="2A0FDCF813200D26">The value to search for.</T>
  <T ID="70CEB97C0AB9F496">&lt;c&gt;true&lt;/c&gt; if found, &lt;c&gt;false&lt;/c&gt; otherwise.</T>
  <T ID="25A8B3ACF57B4768">Available for .NET Framework 4.5, .NET Standard 2.0 and .NET Standard 2.1.</T>
  <T ID="B941BE017203A6AB">Extension methods for the &lt;see cref ="T:System.Text.StringBuilder"/&gt; class.</T>
  <T ID="7D1984B2DED2B06F">Veraltet.</T>
  <T ID="E02F057C2D2816FE"></T>
  <T ID="2DE54422D2816FE"></T>
  <T ID="CA1788272D2816FE"></T>
  <T ID="30D6FCD80F779F56">The Char sequence to be hashed.</T>
  <T ID="4CB486F7E0331BDC">The kind of hashcode to be generated.</T>
  <T ID="F15F7AF14C32CA81">The hashcode.</T>
  <T ID="6576367D6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="B2C3CF1FDFB8F2B5">&lt;paramref name ="hashType"/&gt; is not a defined value of the &lt;see cref ="T:FolkerKinzel.Strings.HashType"/&gt; enum.</T>
  <T ID="8870939037A3D245">&lt;code/&gt;</T>
  <T ID="F8A7595EA52FCA44">Removes all the trailing white-space characters from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="46B4380B3A9E4862"></T>
  <T ID="E9D9494687FCA7D1"></T>
  <T ID="3FE91F0C333693A"></T>
  <T ID="D26919B1D99BBAFD"></T>
  <T ID="AB7FA8DEA046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="3688D23B0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="8402B7906D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="7FBD155B59DC67F4">Removes all the trailing white-space characters from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="AEB23892A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="A078DE5D65452DD8">A Unicode character to remove.</T>
  <T ID="35E5193A0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="51CF82E06D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="99F5F69EC689D86A">Removes all the trailing occurrences of a set of characters specified in an array from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="70911F81A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="1C20142910F6833A">An array of Unicode characters to remove, or &lt;c&gt;null&lt;/c&gt;. If &lt;paramref name="trimChars"/&gt; is &lt;c&gt;null&lt;/c&gt; or an empty array, Unicode white-space characters are removed instead.</T>
  <T ID="59E18EFD0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="A9DCF5896D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="248A0EEA0094FD0C">Removes all the leading white-space characters from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="8D364B07A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="1B746DD0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="DDC06E1F6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="5F9F8063898FAC48">Removes all the leading occurrences of a specified character from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="92909D68A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="3F5B0B6B65452DD8">The Unicode character to remove.</T>
  <T ID="85BEFF920A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="4D71CCFD6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="C540A7F9F80C029D">Removes all the leading occurrences of a set of characters specified in an array from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="EA7E2E4FA046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="BE5FDF0F10F6833A">An array of Unicode characters to remove, or &lt;c&gt;null&lt;/c&gt;. If &lt;paramref name="trimChars"/&gt; is &lt;c&gt;null&lt;/c&gt; or an empty array, Unicode white-space characters are removed instead.</T>
  <T ID="56EDD2460A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="102E054C6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="99D31CC008256086">Removes all leading and trailing white-space characters from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="BE1E819FA046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="E2B9B3A30A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="2B1B9DC36D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="5404CFB6084FB38A">Removes all leading and trailing instances of a character from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="98C7CB75A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="BD40420C65452DD8">A Unicode character to remove.</T>
  <T ID="DAA652CB0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="8BED850A6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="BF442E6C1F402D9A">Removes all leading and trailing occurrences of a set of characters specified in an array from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="B00E5319A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="8C9D3FC410F6833A">An array of Unicode characters to remove, or &lt;c&gt;null&lt;/c&gt;. If &lt;paramref name="trimChars"/&gt; is &lt;c&gt;null&lt;/c&gt; or an empty array, Unicode white-space characters are removed instead.</T>
  <T ID="6A871FCD0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="5F2955556D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="DCE9989FFE160FD1">Extension methods for the &lt;see cref ="T:System.String"/&gt; class.</T>
  <T ID="E3E1ED8BDED2B06F">Veraltet.</T>
  <T ID="7208BA582D2816FE"></T>
  <T ID="57CB34952D2816FE"></T>
  <T ID="B03A8A262D2816FE"></T>
  <T ID="B130AC300F779F56">The Char sequence to be hashed.</T>
  <T ID="AE3BD737E0331BDC">The kind of hashcode to be generated.</T>
  <T ID="B84FCBF04C32CA81">The hashcode.</T>
  <T ID="4CA0831CE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="5A593F2FDFB8F2B5">&lt;paramref name ="hashType"/&gt; is not a defined value of the &lt;see cref ="T:FolkerKinzel.Strings.HashType"/&gt; enum.</T>
  <T ID="B90E08F937A3D245">&lt;code/&gt;</T>
  <T ID="F8185A626F8EFE0">Extension methods for the &lt;see cref ="T:System.String"/&gt; class, which are used in .NET Framework 4.5 and .NET Standard 2.0 as polyfills for methods from current .NET versions.</T>
  <T ID="10263C61F7A24265">Returns a value indicating whether a specified character occurs within this string, using the specified comparison rules.</T>
  <T ID="F25F072816154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="935F58C11802B031">The Unicode character to search for.</T>
  <T ID="EC7656F0C31686F0">One of the enumeration values that specifies the rules to use in the comparison.</T>
  <T ID="5BAE4DE8573CA557">&lt;c&gt;true&lt;/c&gt; if the &lt;paramref name="value"/&gt; parameter occurs within this &lt;see cref="T:System.String"/&gt;; otherwise, &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="A3CB322451BE8701">Available for .NET Framework 4.5 and .NET Standard 2.0.</T>
  <T ID="3A36F237011B8422">Reports the zero-based index of the first occurrence of the specified Unicode character in this string. A parameter specifies the type of search to use for the specified character.</T>
  <T ID="FA6200016154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="19FB062A1802B031">The Unicode character to search for.</T>
  <T ID="4B2A959742F9B8ED">An enumeration value that specifies the rules for the search.</T>
  <T ID="86C1E4EAEAC904">The zero-based index of value if that character is found, or -1 if it is not.</T>
  <T ID="BEBF9092140445F">&lt;paramref name="comparisonType"/&gt; is not a defined value of the &lt;see cref="T:System.StringComparison"/&gt; enum.</T>
  <T ID="514B33D92140445F">&lt;paramref name="comparisonType"/&gt; is not a defined value of the &lt;see cref="T:System.StringComparison"/&gt; enum.</T>
  <T ID="7FF0F12851BE8701">Available for .NET Framework 4.5 and .NET Standard 2.0.</T>
  <T ID="9FF3A09EC11343A3">Splits a string into substrings based on a specified delimiting character and, optionally, &lt;paramref name="options"/&gt;.</T>
  <T ID="E7FACC81452EF894">The &lt;see cref="T:System.String"/&gt; to split.</T>
  <T ID="54C89C926C70A1C5">An enumeration value that specifies whether to include empty substrings.</T>
  <T ID="2C95B78988432DFE">An array whose elements contain the substrings from &lt;paramref name="s"/&gt; that are delimited by &lt;paramref name="separator"/&gt;.</T>
  <T ID="C4D856C751BE8701">Available for .NET Framework 4.5 and .NET Standard 2.0.</T>
  <T ID="DCEEDA995F754AB7">Splits a string into a maximum number of substrings based on the provided character separator, optionally omitting empty substrings from the result.</T>
  <T ID="3463C1F8452EF894">The &lt;see cref="T:System.String"/&gt; to split.</T>
  <T ID="466C9A221A7A536B">A character that delimits the substrings in &lt;paramref name="s"/&gt;.</T>
  <T ID="B5642451A7A536B">A character that delimits the substrings in &lt;paramref name="s"/&gt;.</T>
  <T ID="BB707143442C71C1">The maximum number of elements expected in the array.</T>
  <T ID="2B78D6836C70A1C5">An enumeration value that specifies whether to include empty substrings.</T>
  <T ID="508776C0F98AC788">An array that contains at most &lt;paramref name="count"/&gt; substrings from &lt;paramref name="s"/&gt; that are delimited by &lt;paramref name="separator"/&gt;.</T>
  <T ID="C211B3B651BE8701">Available for .NET Framework 4.5 and .NET Standard 2.0.</T>
  <T ID="AF71A07839BDAA36">Determines whether &lt;paramref name="s"/&gt; starts with the specified character.</T>
  <T ID="5E5F198916154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="F282589F09826F79">The Unicode character to compare.</T>
  <T ID="EA28ACF1631F1A74">&lt;c&gt;true&lt;/c&gt; if value matches the beginning of &lt;paramref name="s"/&gt;; otherwise, &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="1E091CD3C76D072E">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</T>
  <T ID="1E091CD351BE8701">Available for .NET Framework 4.5 and .NET Standard 2.0.</T>
  <T ID="CD37D18C7CADE05">Determines whether the end of &lt;paramref name="s"/&gt; matches the specified character.</T>
  <T ID="ED4A011916154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="683FFE6209826F79">The Unicode character to compare.</T>
  <T ID="8D0BA5EFDA265821">&lt;c&gt;true&lt;/c&gt; if value matches the end of &lt;paramref name="s"/&gt;; otherwise, &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="5C65BA9DC76D072E">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</T>
  <T ID="5C65BA9D51BE8701">Available for .NET Framework 4.5 and .NET Standard 2.0.</T>
  <T ID="6D98BB33AAE238A6">Extension methods for the &lt;see cref ="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; structure.</T>
  <T ID="50E7C187EC9C6214">Generates the same &lt;see cref ="T:System.Int32"/&gt; hash code for an identical string of characters each time the program is run.</T>
  <T ID="D678935472B204F9">&lt;para&gt;
The method &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; returns a different hash code for an identical string with each program run for security reasons. Apart from the fact that the hash algorithm of &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; could be different in different framework versions, it makes no sense to use the return value of &lt;see cref ="M:System.String.GetHashCode"/&gt; for reuse. The alternatives, e.g. &lt;see cref ="T:System.Security.Cryptography.MD5"/&gt; or &lt;see cref ="T:System.Security.Cryptography.SHA256"/&gt;, use more storage space and are slower. This method offers a slim alternative that is suitable for hashing very short strings that are not used in a security-critical context.
&lt;/para&gt;
&lt;para&gt;
The hashcode generated by this method is not identical to the hashcode generated by the .NET Framework 4.0, because it uses roundshifting to preserve more information.
&lt;/para&gt;
&lt;para&gt;
The hashcodes generated with different values for &lt;paramref name ="hashType"/&gt; may provide different hashcodes for an identical Char sequence and MUST therefore not be mixed.
&lt;/para&gt;
&lt;para&gt;
Do not use the hashcodes generated by this method for security-critical purposes (such as hashing passwords)!
&lt;/para&gt;</T>
  <T ID="D857796EC9C6214">Generates the same &lt;see cref ="T:System.Int32"/&gt; hash code for an identical string of characters each time the program is run.</T>
  <T ID="E6BF2BFB72B204F9">&lt;para&gt;
The method &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; returns a different hash code for an identical string with each program run for security reasons. Apart from the fact that the hash algorithm of &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; could be different in different framework versions, it makes no sense to use the return value of &lt;see cref ="M:System.String.GetHashCode"/&gt; for reuse. The alternatives, e.g. &lt;see cref ="T:System.Security.Cryptography.MD5"/&gt; or &lt;see cref ="T:System.Security.Cryptography.SHA256"/&gt;, use more storage space and are slower. This method offers a slim alternative that is suitable for hashing very short strings that are not used in a security-critical context.
&lt;/para&gt;
&lt;para&gt;
The hashcode generated by this method is not identical to the hashcode generated by the .NET Framework 4.0, because it uses roundshifting to preserve more information.
&lt;/para&gt;
&lt;para&gt;
The hashcodes generated with different values for &lt;paramref name ="hashType"/&gt; may provide different hashcodes for an identical Char sequence and MUST therefore not be mixed.
&lt;/para&gt;
&lt;para&gt;
Do not use the hashcodes generated by this method for security-critical purposes (such as hashing passwords)!
&lt;/para&gt;</T>
  <T ID="E8C92C55EC9C6214">Generates the same &lt;see cref ="T:System.Int32"/&gt; hash code for an identical string of characters each time the program is run.</T>
  <T ID="809D8B5E72B204F9">&lt;para&gt;
The method &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; returns a different hash code for an identical string with each program run for security reasons. Apart from the fact that the hash algorithm of &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; could be different in different framework versions, it makes no sense to use the return value of &lt;see cref ="M:System.String.GetHashCode"/&gt; for reuse. The alternatives, e.g. &lt;see cref ="T:System.Security.Cryptography.MD5"/&gt; or &lt;see cref ="T:System.Security.Cryptography.SHA256"/&gt;, use more storage space and are slower. This method offers a slim alternative that is suitable for hashing very short strings that are not used in a security-critical context.
&lt;/para&gt;
&lt;para&gt;
The hashcode generated by this method is not identical to the hashcode generated by the .NET Framework 4.0, because it uses roundshifting to preserve more information.
&lt;/para&gt;
&lt;para&gt;
The hashcodes generated with different values for &lt;paramref name ="hashType"/&gt; may provide different hashcodes for an identical Char sequence and MUST therefore not be mixed.
&lt;/para&gt;
&lt;para&gt;
Do not use the hashcodes generated by this method for security-critical purposes (such as hashing passwords)!
&lt;/para&gt;</T>
  <T ID="FE07C3BB9A2D3774">The methods of this class should only be used in the extension method syntax to simulate the original methods of the &lt;see cref ="T:System.String"/&gt; class that exist in more modern frameworks. To match the behavior of the original methods, these extension methods throw a &lt;see cref ="T:System.NullReferenceException"/&gt; when called on a null string.</T>
  <T ID="4195BC2EE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="10C6F3FAE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="BE087FACE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="B9A95135E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="C451A780E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="F2E5F6F5E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
</Tsltn>