<?xml version="1.0" encoding="utf-8"?>
<Tsltn Version="1.0" SourceFile="..\bin\Release\netstandard2.0\de\FolkerKinzel.Strings.xml" SourceLanguage="de" TargetLanguage="en">
  <T ID="FB7C6BB26EEA39EB">Ordinal comparison of the characters.</T>
  <T ID="AA2EB5F98CF489A2">Ordinal comparison of the characters without taking upper and lower case into account.</T>
  <T ID="76722699059A0A21">Named constants to specify the type of hashcode for Char sequences.</T>
  <T ID="F856C6A42FFD6613">Only letters and decimal digits are hashed. The case is not considered.</T>
  <T ID="96FB29A10F779F56">The Char sequence to be hashed.</T>
  <T ID="7DAFA9EFE0331BDC">The kind of hashcode to be generated.</T>
  <T ID="CCE2360C4C32CA81">The hashcode.</T>
  <T ID="51F91115DFB8F2B5">&lt;paramref name ="hashType"/&gt; is not a defined value of the &lt;see cref ="T:FolkerKinzel.Strings.HashType"/&gt; enum.</T>
  <T ID="F1462E3B37A3D245">&lt;code/&gt;</T>
  <T ID="B941BE017203A6AB">Extension methods for the &lt;see cref ="T:System.Text.StringBuilder"/&gt; class.</T>
  <T ID="30D6FCD80F779F56">The Char sequence to be hashed.</T>
  <T ID="4CB486F7E0331BDC">The kind of hashcode to be generated.</T>
  <T ID="F15F7AF14C32CA81">The hashcode.</T>
  <T ID="6576367D6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="B2C3CF1FDFB8F2B5">&lt;paramref name ="hashType"/&gt; is not a defined value of the &lt;see cref ="T:FolkerKinzel.Strings.HashType"/&gt; enum.</T>
  <T ID="8870939037A3D245">&lt;code/&gt;</T>
  <T ID="F8A7595EA52FCA44">Removes all the trailing white-space characters from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="46B4380B3A9E4862"></T>
  <T ID="E9D9494687FCA7D1"></T>
  <T ID="3FE91F0C333693A"></T>
  <T ID="D26919B1D99BBAFD"></T>
  <T ID="AB7FA8DEA046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="3688D23B0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="8402B7906D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="7FBD155B59DC67F4">Removes all the trailing white-space characters from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="AEB23892A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="A078DE5D65452DD8">A Unicode character to remove.</T>
  <T ID="35E5193A0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="51CF82E06D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="99F5F69EC689D86A">Removes all the trailing occurrences of a set of characters specified in an array from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="70911F81A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="1C20142910F6833A">An array of Unicode characters to remove, or &lt;c&gt;null&lt;/c&gt;. If &lt;paramref name="trimChars"/&gt; is &lt;c&gt;null&lt;/c&gt; or an empty array, Unicode white-space characters are removed instead.</T>
  <T ID="59E18EFD0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="A9DCF5896D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="248A0EEA0094FD0C">Removes all the leading white-space characters from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="8D364B07A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="1B746DD0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="DDC06E1F6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="5F9F8063898FAC48">Removes all the leading occurrences of a specified character from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="92909D68A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="3F5B0B6B65452DD8">The Unicode character to remove.</T>
  <T ID="85BEFF920A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="4D71CCFD6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="C540A7F9F80C029D">Removes all the leading occurrences of a set of characters specified in an array from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="EA7E2E4FA046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="BE5FDF0F10F6833A">An array of Unicode characters to remove, or &lt;c&gt;null&lt;/c&gt;. If &lt;paramref name="trimChars"/&gt; is &lt;c&gt;null&lt;/c&gt; or an empty array, Unicode white-space characters are removed instead.</T>
  <T ID="56EDD2460A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="102E054C6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="99D31CC008256086">Removes all leading and trailing white-space characters from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="BE1E819FA046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="E2B9B3A30A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="2B1B9DC36D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="5404CFB6084FB38A">Removes all leading and trailing instances of a character from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="98C7CB75A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="BD40420C65452DD8">A Unicode character to remove.</T>
  <T ID="DAA652CB0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="8BED850A6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="BF442E6C1F402D9A">Removes all leading and trailing occurrences of a set of characters specified in an array from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="B00E5319A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="8C9D3FC410F6833A">An array of Unicode characters to remove, or &lt;c&gt;null&lt;/c&gt;. If &lt;paramref name="trimChars"/&gt; is &lt;c&gt;null&lt;/c&gt; or an empty array, Unicode white-space characters are removed instead.</T>
  <T ID="6A871FCD0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="5F2955556D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="DCE9989FFE160FD1">Extension methods for the &lt;see cref ="T:System.String"/&gt; class.</T>
  <T ID="B130AC300F779F56">The Char sequence to be hashed.</T>
  <T ID="AE3BD737E0331BDC">The kind of hashcode to be generated.</T>
  <T ID="B84FCBF04C32CA81">The hashcode.</T>
  <T ID="4CA0831CE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="5A593F2FDFB8F2B5">&lt;paramref name ="hashType"/&gt; is not a defined value of the &lt;see cref ="T:FolkerKinzel.Strings.HashType"/&gt; enum.</T>
  <T ID="B90E08F937A3D245">&lt;code/&gt;</T>
  <T ID="6D98BB33AAE238A6">Extension methods for the &lt;see cref ="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; structure.</T>
  <T ID="50E7C187EC9C6214">Generates the same &lt;see cref ="T:System.Int32"/&gt; hash code for an identical string of characters each time the program is run.</T>
  <T ID="D678935472B204F9">&lt;para&gt;
The method &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; returns a different hash code for an identical string with each program run for security reasons. Apart from the fact that the hash algorithm of &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; could be different in different framework versions, it makes no sense to use the return value of &lt;see cref ="M:System.String.GetHashCode"/&gt; for reuse. The alternatives, e.g. &lt;see cref ="T:System.Security.Cryptography.MD5"/&gt; or &lt;see cref ="T:System.Security.Cryptography.SHA256"/&gt;, use more storage space and are slower. This method offers a slim alternative that is suitable for hashing very short strings that are not used in a security-critical context.
&lt;/para&gt;
&lt;para&gt;
The hashcode generated by this method is not identical to the hashcode generated by the .NET Framework 4.0, because it uses roundshifting to preserve more information.
&lt;/para&gt;
&lt;para&gt;
The hashcodes generated with different values for &lt;paramref name ="hashType"/&gt; may provide different hashcodes for an identical Char sequence and MUST therefore not be mixed.
&lt;/para&gt;
&lt;para&gt;
Do not use the hashcodes generated by this method for security-critical purposes (such as hashing passwords)!
&lt;/para&gt;</T>
  <T ID="D857796EC9C6214">Generates the same &lt;see cref ="T:System.Int32"/&gt; hash code for an identical string of characters each time the program is run.</T>
  <T ID="E6BF2BFB72B204F9">&lt;para&gt;
The method &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; returns a different hash code for an identical string with each program run for security reasons. Apart from the fact that the hash algorithm of &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; could be different in different framework versions, it makes no sense to use the return value of &lt;see cref ="M:System.String.GetHashCode"/&gt; for reuse. The alternatives, e.g. &lt;see cref ="T:System.Security.Cryptography.MD5"/&gt; or &lt;see cref ="T:System.Security.Cryptography.SHA256"/&gt;, use more storage space and are slower. This method offers a slim alternative that is suitable for hashing very short strings that are not used in a security-critical context.
&lt;/para&gt;
&lt;para&gt;
The hashcode generated by this method is not identical to the hashcode generated by the .NET Framework 4.0, because it uses roundshifting to preserve more information.
&lt;/para&gt;
&lt;para&gt;
The hashcodes generated with different values for &lt;paramref name ="hashType"/&gt; may provide different hashcodes for an identical Char sequence and MUST therefore not be mixed.
&lt;/para&gt;
&lt;para&gt;
Do not use the hashcodes generated by this method for security-critical purposes (such as hashing passwords)!
&lt;/para&gt;</T>
  <T ID="E8C92C55EC9C6214">Generates the same &lt;see cref ="T:System.Int32"/&gt; hash code for an identical string of characters each time the program is run.</T>
  <T ID="809D8B5E72B204F9">&lt;para&gt;
The method &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; returns a different hash code for an identical string with each program run for security reasons. Apart from the fact that the hash algorithm of &lt;see cref ="M:System.String.GetHashCode"&gt;String.GetHashCode()&lt;/see&gt; could be different in different framework versions, it makes no sense to use the return value of &lt;see cref ="M:System.String.GetHashCode"/&gt; for reuse. The alternatives, e.g. &lt;see cref ="T:System.Security.Cryptography.MD5"/&gt; or &lt;see cref ="T:System.Security.Cryptography.SHA256"/&gt;, use more storage space and are slower. This method offers a slim alternative that is suitable for hashing very short strings that are not used in a security-critical context.
&lt;/para&gt;
&lt;para&gt;
The hashcode generated by this method is not identical to the hashcode generated by the .NET Framework 4.0, because it uses roundshifting to preserve more information.
&lt;/para&gt;
&lt;para&gt;
The hashcodes generated with different values for &lt;paramref name ="hashType"/&gt; may provide different hashcodes for an identical Char sequence and MUST therefore not be mixed.
&lt;/para&gt;
&lt;para&gt;
Do not use the hashcodes generated by this method for security-critical purposes (such as hashing passwords)!
&lt;/para&gt;</T>
  <T ID="DEFF13E5A0261A26"></T>
  <T ID="D3C47582C5C52371">Removes all trailing occurrences of a set of characters specified in a Span from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="AB0859BEA046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="460277B434415891">A Span of Unicode characters to remove. If &lt;paramref name="trimChars"/&gt; is an empty Span, Unicode white-space characters are removed instead.</T>
  <T ID="D7001890A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="182C61F56D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="80B0CA8159205F7D">Removes all leading occurrences of a set of characters specified in a Span from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="DE63FC9A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="73C101DDD316FD41">A Span of Unicode characters to remove. If &lt;paramref name="trimChars"/&gt; is an empty Span, Unicode white-space characters are removed instead.</T>
  <T ID="56390CE40A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="176277CB6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="2C9170253372C08A">Removes all leading and trailing occurrences of a set of characters specified in a Span from the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="880A28CBA046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="78D8860434415891">A Span of Unicode characters to remove. If &lt;paramref name="trimChars"/&gt; is an empty Span, Unicode white-space characters are removed instead.</T>
  <T ID="94465F260A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="DA9DB3A76D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="EBF090C27F156EC4">Generates a &lt;see cref ="T:System.String"/&gt; from which all leading and trailing occurrences of the characters in the specified Span are removed.</T>
  <T ID="957D5E6D84768AA6">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="38C2210334415891">A Span of Unicode characters to remove. If &lt;paramref name="trimChars"/&gt; is an empty Span, Unicode white-space characters are removed instead.</T>
  <T ID="A5F2647729DA420">The resulting &lt;see cref="T:System.String"/&gt; after removing all characters passed in the &lt;paramref name ="trimChars"/&gt; parameter from the beginning and end of the &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="98D4467E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="4313C0B292283509">Generates a &lt;see cref ="T:System.String"/&gt; from which all leading occurrences of the characters in the specified Span are removed.</T>
  <T ID="DC5D02D784768AA6">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="E56F25FE34415891">A Span of Unicode characters to remove. If &lt;paramref name="trimChars"/&gt; is an empty Span, Unicode white-space characters are removed instead.</T>
  <T ID="BC42D94578C55B42">The resulting &lt;see cref="T:System.String"/&gt; after removing all characters passed in the &lt;paramref name ="trimChars"/&gt; parameter from the beginning of the &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="7DED8B90E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="47C51EFF6DCE19A">Generates a &lt;see cref ="T:System.String"/&gt; from which all trailing occurrences of the characters in the specified Span are removed.</T>
  <T ID="DC1EB33484768AA6">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="E69729F934415891">A Span of Unicode characters to remove. If &lt;paramref name="trimChars"/&gt; is an empty Span, Unicode white-space characters are removed instead.</T>
  <T ID="E6344BCCCA2B1873">The resulting &lt;see cref="T:System.String"/&gt; after removing all characters passed in the &lt;paramref name ="trimChars"/&gt; parameter from the end of the &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="DD3698CAE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="5574B60B0AF7B8C1">Extension methods for the &lt;see cref="T:System.ReadOnlyMemory`1"&gt;ReadOnlyMemory&amp;lt;Char&amp;gt;&lt;/see&gt; structure, which are used in .NET Framework 4.5, .NET Standard 2.0 and  .NET Standard 2.1 as polyfills for methods from current .NET versions.</T>
  <T ID="8D8056A8A454632A">The methods of this class should only be used in the extension method syntax to simulate the methods of the &lt;see cref="T:System.ReadOnlyMemory`1"&gt;ReadOnlyMemory&amp;lt;Char&amp;gt;&lt;/see&gt; structure, which exist in more modern frameworks.</T>
  <T ID="FA6179F76FE6F9E4">Extension methods for the &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; structure, which are used in .NET Framework 4.5, .NET Standard 2.0 and  .NET Standard 2.1 as polyfills for methods from current .NET versions.</T>
  <T ID="AE6D841A662971F3">The methods of this class should only be used in the extension method syntax to simulate the methods of the &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; structure, which exist in more modern frameworks.</T>
  <T ID="5724914FC6DCBCB1">The span to search.</T>
  <T ID="460EC51CD05DB862">The Unicode character to search for.</T>
  <T ID="9E06C7CE0AB9F496">&lt;c&gt;true&lt;/c&gt; if found, &lt;c&gt;false&lt;/c&gt; otherwise.</T>
  <T ID="63EBBC6CF57B4768">Available for .NET Framework 4.5, .NET Standard 2.0 and .NET Standard 2.1.</T>
  <T ID="3D17DB82051501E3">Extension methods for the &lt;see cref="T:System.Text.StringBuilder"/&gt; class, which are used in .NET Framework 4.5 and .NET Standard 2.0 as polyfills for methods from current .NET versions.</T>
  <T ID="65262C850AF980DB">The methods of this class should only be used in the extension method syntax to simulate the original methods of the &lt;see cref ="T:System.String"/&gt; class, which exist in more modern frameworks. To match the behavior of the original methods, these extension methods throw a &lt;see cref ="T:System.NullReferenceException"/&gt; when called on &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="436CA61750520FA">Appends the string representation of a specified read-only character span to a &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="92F8BC115DBE6F9F">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to which the characters are appended.</T>
  <T ID="477AF3C760E68253">The read-only character span to append.</T>
  <T ID="9A37AD4E72DE8164">A reference to &lt;paramref name="builder"/&gt; after the append operation is completed.</T>
  <T ID="5C53678426F8EFE0">Extension methods for the &lt;see cref ="T:System.String"/&gt; class, which are used in .NET Framework 4.5 and .NET Standard 2.0 as polyfills for methods from current .NET versions.</T>
  <T ID="E4E3B0759A2D3774">To match the behavior of the original methods, these extension methods throw a &lt;see cref ="T:System.NullReferenceException"/&gt; when called on a &lt;c&gt;null&lt;/c&gt; string.</T>
  <T ID="A568FFF6F7A24265">Returns a value indicating whether a specified character occurs within this &lt;see cref="T:System.String"/&gt;, using the specified comparison rules.</T>
  <T ID="3B8DA89316154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="1B5BACF21802B031">The Unicode character to search for.</T>
  <T ID="82EFC2EBE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="957C11C02140445F">&lt;paramref name="comparisonType"/&gt; is not a defined value of the &lt;see cref="T:System.StringComparison"/&gt; enum.</T>
  <T ID="510D3F37F468118F">Returns a value indicating whether a specified character appears in the &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="DFA197D016154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="A9A0B2711802B031">The Unicode character to search for.</T>
  <T ID="F9C42ADDE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="CBE2D2A8011B8422">Returns the zero-based index of the first occurrence of the specified Unicode character in this &lt;see cref="T:System.String"/&gt;. A parameter specifies the type of search to use for the specified character.</T>
  <T ID="ACF4039116154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="5F8074931802B031">The Unicode character to search for.</T>
  <T ID="1849E63F42F9B8ED">An enumeration value that specifies the rules for the search.</T>
  <T ID="C2ABC273EAEAC904">The zero-based index of &lt;paramref name="value"/&gt; if that character is found, or -1 if it is not.</T>
  <T ID="8702947AE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="344842782140445F">&lt;paramref name="comparisonType"/&gt; is not a defined value of the &lt;see cref="T:System.StringComparison"/&gt; enum.</T>
  <T ID="CC9600AAC9E6C1C">The method performs an ordinal character comparison.</T>
  <T ID="2C6AE194C11343A3">Splits a &lt;see cref="T:System.String"/&gt; into substrings based on a specified delimiting character and, optionally, options.</T>
  <T ID="6194812F452EF894">The &lt;see cref="T:System.String"/&gt; to split.</T>
  <T ID="8D8B61D1A7A536B">A character that delimits the substrings in &lt;paramref name="s"/&gt;.</T>
  <T ID="B9B3A6156C70A1C5">An enumeration value that specifies whether to include empty substrings.</T>
  <T ID="41A2A02588432DFE">An array whose elements contain the substrings from &lt;paramref name="s"/&gt; that are delimited by &lt;paramref name="separator"/&gt;.</T>
  <T ID="83D6FB81E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="F8DB8E235F754AB7">Splits a &lt;see cref="T:System.String"/&gt; into a maximum number of substrings based on the provided character separator, optionally omitting empty substrings from the result.</T>
  <T ID="75C162E8452EF894">The &lt;see cref="T:System.String"/&gt; to split.</T>
  <T ID="9C86D85E1A7A536B">A character that delimits the substrings in &lt;paramref name="s"/&gt;.</T>
  <T ID="A7CB4C5442C71C1">The maximum number of elements expected in the array.</T>
  <T ID="6F7769C96C70A1C5">An enumeration value that specifies whether to include empty substrings.</T>
  <T ID="3AFEC716F98AC788">An array that contains at most &lt;paramref name="count"/&gt; substrings from &lt;paramref name="s"/&gt; that are delimited by &lt;paramref name="separator"/&gt;.</T>
  <T ID="5069852EE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="EC6B04FA39BDAA36">Indicates whether &lt;paramref name="s"/&gt; starts with the specified character.</T>
  <T ID="8E1BF60316154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="EF812EA909826F79">The Unicode character to compare.</T>
  <T ID="5F28F797631F1A74">&lt;c&gt;true&lt;/c&gt; if value matches the beginning of &lt;paramref name="s"/&gt;; otherwise, &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="5488A99BC76D072E">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</T>
  <T ID="612C8712E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="B1ECEA32C7CADE05">Indicates whether the end of &lt;paramref name="s"/&gt; matches the specified character.</T>
  <T ID="84792E6516154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="33C00F7D09826F79">The Unicode character to compare.</T>
  <T ID="62A7A18FDA265821">&lt;c&gt;true&lt;/c&gt; if value matches the end of &lt;paramref name="s"/&gt;; otherwise, &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="BF61AE8FC76D072E">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</T>
  <T ID="B8E1B02DE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="81DD9BF96F64B82B">Removes all leading and trailing white space characters from a read-only character memory region.</T>
  <T ID="21649B15174CF69E">The source memory from which the characters are removed.</T>
  <T ID="E60979AA88174DE5">The trimmed character memory region.</T>
  <T ID="7EB677A0ED12E88">Removes all leading white space characters from a read-only character memory region.</T>
  <T ID="59B4F4DB174CF69E">The source memory from which the characters are removed.</T>
  <T ID="3C33636388174DE5">The trimmed character memory region.</T>
  <T ID="F2A25B70E3A61BF0">Removes all trailing white space characters from a read-only character memory region.</T>
  <T ID="E7EA3B7E174CF69E">The source memory from which the characters are removed.</T>
  <T ID="B18055988174DE5">The trimmed character memory region.</T>
  <T ID="2B3D2BA9BD898E33">Extension methods for the &lt;see cref="T:System.Char"/&gt; structure.</T>
  <T ID="C60530F0F644E52B">The Unicode character to examine.</T>
  <T ID="396C2EFF530CDCA9">Indicates whether the read-only character span contains Unicode characters that do not belong to the ASCII character set.</T>
  <T ID="503263B02D607937">A read-only span of Unicode characters.</T>
  <T ID="C59DB433F34E5D19">An &lt;see cref ="T:System.Text.Encoding"/&gt; object that matches the specified identifier of the character set or &lt;see cref ="P:System.Text.Encoding.UTF8"/&gt; if no match was found .</T>
  <T ID="8DEBBCBBF3F8F8B2">.NET Standard and .NET 5.0 recognize by default only a small number of character sets. The method overrides this default setting.</T>
  <T ID="4C18D39F42ED3121">Indicates whether the &lt;see cref="T:System.Text.StringBuilder"/&gt; contains Unicode characters that do not belong to the ASCII character set.</T>
  <T ID="38C97D74965635FC">The &lt;see cref="T:System.Text.StringBuilder"/&gt; whose content is examined.</T>
  <T ID="5A47E9526D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="A5BD657353A93461">Indicates whether the &lt;see cref="T:System.String"/&gt; contains Unicode characters that do not belong to the ASCII character set.</T>
  <T ID="A51CA3CD024D224C">Indicates whether a read-only span of Unicode characters contains one of the Unicode characters that are passed to the method in another span.</T>
  <T ID="2E498B3EBC26D7E7">The span to search.</T>
  <T ID="7D88BF43F461E679">Returns the length that the read-only span would have without trailing white space.</T>
  <T ID="7BF3D8435F806C06">The read-only span of Unicode characters to examine.</T>
  <T ID="CC74332C09C5BAC8">The length that the read-only span would have without trailing white space.</T>
  <T ID="287C3E07E090647B">Returns the index of the first non-white-space character in the span.</T>
  <T ID="FDC3F1745F806C06">The read-only span of Unicode characters to examine.</T>
  <T ID="48B7D1C1BF2C2C2">The index of the first non-white-space character found in the span. If the span is empty or consists only of white space, the length of the span is returned.</T>
  <T ID="DA2A8B393CC5A3D2">Examines a section of the &lt;see cref ="T:System.Text.StringBuilder"/&gt; that begins at &lt;paramref name ="startIndex"/&gt; to see whether it contains Unicode characters that do not belong to the ASCII character set .</T>
  <T ID="E1D30702965635FC">The &lt;see cref="T:System.Text.StringBuilder"/&gt; whose content is examined.</T>
  <T ID="ADB25B63481F4334">The zero-based index in &lt;paramref name ="builder"/&gt; at which the examination begins.</T>
  <T ID="F83103ED6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="F5D3C03A09F1669F">&lt;paramref name ="startIndex"/&gt; is less than zero or greater than the number of characters in &lt;paramref name ="builder"/&gt;.</T>
  <T ID="E99B76CF965635FC">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is examined.</T>
  <T ID="E83263FE481F4334">The zero-based index in &lt;paramref name ="builder"/&gt; at which the examination begins.</T>
  <T ID="3A82FDC76D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="C29D3A4A8B0A9172">Converts the entire content of a &lt;see cref ="T:System.Text.StringBuilder"/&gt; to lowercase letters using the rules of the invariant culture.</T>
  <T ID="DA30D1B954973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="9BE860300D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="FDE362E86D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="91FE5F43668B603A">Converts the content of a &lt;see cref ="T:System.Text.StringBuilder"/&gt; starting with &lt;paramref name="startIndex"/&gt; into lowercase letters and uses the rules of the invariant culture.</T>
  <T ID="D026900154973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="14DEA9FD93DD5229">The zero-based index in &lt;paramref name ="builder"/&gt; at which the conversion starts.</T>
  <T ID="D16F962800D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="19DA98176D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="A3CC112109F1669F">&lt;paramref name ="startIndex"/&gt; is less than zero or greater than the number of characters in &lt;paramref name ="builder"/&gt;.</T>
  <T ID="63FA81F54973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="C3E2B11C93DD5229">The zero-based index in &lt;paramref name ="builder"/&gt; at which the conversion starts.</T>
  <T ID="69902E3E00D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="196339556D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="D1D9EAC058388D6E">Converts the entire content of a &lt;see cref ="T:System.Text.StringBuilder"/&gt; to uppercase letters using the rules of the invariant culture.</T>
  <T ID="60B7379954973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="F0B7439D00D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="1CAA34616D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="EF167B7AB61C4C91">Converts the content of a &lt;see cref ="T:System.Text.StringBuilder"/&gt; starting with &lt;paramref name="startIndex"/&gt; into uppercase letters and uses the rules of the invariant culture.</T>
  <T ID="2A4BF2B754973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="8E967F6193DD5229">The zero-based index in &lt;paramref name ="builder"/&gt; at which the conversion starts.</T>
  <T ID="AF69583F00D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="2AFA50D76D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="8248492F09F1669F">&lt;paramref name ="startIndex"/&gt; is less than zero or greater than the number of characters in &lt;paramref name ="builder"/&gt;.</T>
  <T ID="76A66A4A54973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="F79BE99393DD5229">The zero-based index in &lt;paramref name ="builder"/&gt; at which the conversion starts.</T>
  <T ID="133A96E200D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="1A264E6F6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="1B39527827AF4F9A">Appends a copy of a sequence of Unicode characters that comes from a &lt;see cref ="T:System.Text.StringBuilder"/&gt; to the existing content of &lt;paramref name ="builder"/&gt;.</T>
  <T ID="5D129192FDCAD05B">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to which the characters are appended.</T>
  <T ID="A01B4D3C7F8BCCD4">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; from which the characters are copied.</T>
  <T ID="D3EFE6B572C2B8ED">The zero-based index in &lt;paramref name="value"/&gt; at which the copy operation starts.</T>
  <T ID="6136E7A291C2A4EC">The number of Unicode characters to copy.</T>
  <T ID="1B3BB23300D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="B3D324986D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="DBC06C490F3BADC2">&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; or &lt;paramref name ="count"/&gt; are smaller than zero
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; + &lt;paramref name ="count"/&gt; is larger than the number of characters in &lt;paramref name ="value"/&gt;.
&lt;/para&gt;</T>
  <T ID="88DC33D5CE724E18">&lt;paramref name="value"/&gt; is &lt;c&gt;null&lt;/c&gt; and the values of &lt;paramref name="startIndex"/&gt; or &lt;paramref name="count"/&gt; are  greater than zero.</T>
  <T ID="E64B3EF06D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="C0908ABFF13A4FB1">A read-only span, which contains the Unicode characters to search for.</T>
  <T ID="8C0F7844086BB66A">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="span"/&gt; contains one of the characters passed with &lt;paramref name="values"/&gt;. If &lt;paramref name="span"/&gt; or &lt;paramref name="chars"/&gt; are empty, &lt;c&gt;false&lt;/c&gt; is returned.</T>
  <T ID="65BA6487021DB4AA">Indicates whether a read-only character span contains one of the two characters that are passed to the method as arguments.</T>
  <T ID="812CEFD1BC26D7E7">The span to examine.</T>
  <T ID="F1D519E8621D3E8B">The first character to search for.</T>
  <T ID="F1D519E749D8BC06">The second character to search for.</T>
  <T ID="41DCF62698466F9C">&lt;c&gt;true&lt;/c&gt; if one of the characters to be searched for is found in the span, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="1C954BB8D5D77B58">Indicates whether a read-only character span contains one of the 3 characters that are passed to the method as arguments.</T>
  <T ID="A59DD8E5BC26D7E7">The span to examine.</T>
  <T ID="512DC999621D3E8B">The first character to search for.</T>
  <T ID="512DC99A49D8BC06">The second character to search for.</T>
  <T ID="512DC997408D16FE">The third character to search for.</T>
  <T ID="791E862F98466F9C">&lt;c&gt;true&lt;/c&gt; if one of the characters to be searched for is found in the span, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="4B2FCB8A7A6EC3CD">Indicates whether a read-only span of characters contains white space.</T>
  <T ID="4856BBF2C6DCBCB1">The span to search.</T>
  <T ID="4759549B6962AF8F">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)"/&gt; is used for the comparison.</T>
  <T ID="AF273BE572917496">Searches for the zero-based index of the first occurrence of one of the specified Unicode characters.</T>
  <T ID="B29BCCEBBC26D7E7">The span to examine.</T>
  <T ID="1C33D78AF13A4FB1">A read-only span, which contains the characters to search for.</T>
  <T ID="C756E8F904858F54">Searches for the zero-based index of the last occurrence of one of the specified Unicode characters.</T>
  <T ID="4D194CDDBC26D7E7">The span to examine.</T>
  <T ID="63B95D67F13A4FB1">A read-only span, which contains the characters to search for.</T>
  <T ID="FA16644F2E19B71D">Indicates whether a specified Unicode character is found in a &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="7EF1CD8472CA29FF">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="E1829DAE1802B031">The Unicode character to search for.</T>
  <T ID="9C12D1AA6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="FE40EB246CB39D9E">Examines a section of the &lt;see cref ="T:System.Text.StringBuilder"/&gt; that begins at &lt;paramref name ="startIndex"/&gt; and includes &lt;paramref name ="count"/&gt; characters to determine whether this section contains Unicode characters that do not belong to the ASCII character set.</T>
  <T ID="4B2762A497929986">The length of the section to examine.</T>
  <T ID="EA30DAE26BCC0FF0">&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; or &lt;paramref name ="count"/&gt; are smaller than zero or larger than the number of characters in &lt;paramref name ="builder"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; + &lt;paramref name ="count"/&gt; is larger than the number of characters in &lt;paramref name ="builder"/&gt;.
&lt;/para&gt;</T>
  <T ID="DF7BC3070A3F17EA">Specifies the zero-based index of the first occurrence of the specified character in &lt;paramref name ="builder"/&gt;.</T>
  <T ID="A40DD81572CA29FF">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="C0AF4869D05DB862">The Unicode character to search for.</T>
  <T ID="F321A32E9895D30F">The zero-based index position of &lt;paramref name ="value"/&gt; from the beginning of the &lt;see cref ="T:System.Text.StringBuilder"/&gt;, if this character was found, otherwise -1.</T>
  <T ID="D8E3503A6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="1B63357AB64D72A2">Returns the zero-based index of the first occurrence of the specified character in &lt;paramref name ="builder"/&gt;. The search starts at the specified index.</T>
  <T ID="CB88434472CA29FF">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="46EA744DD05DB862">The Unicode character to search for.</T>
  <T ID="143508666F81ABC0">The start index of the search.</T>
  <T ID="3FD25F8B9895D30F">The zero-based index of &lt;paramref name="value"/&gt; if that character is found, or -1 if it's not.</T>
  <T ID="2D730E856D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="4445655109F1669F">&lt;paramref name ="startIndex"/&gt; is less than zero or greater than the number of characters in &lt;paramref name ="builder"/&gt;.</T>
  <T ID="D8EFB175D4CE5FE5">Returns the zero-based index of the first occurrence of the specified character in &lt;paramref name ="builder"/&gt;. The search begins at a specified index and a specified number of character positions are checked.</T>
  <T ID="DB8FF68272CA29FF">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="E68A20D6D05DB862">The Unicode character to search for.</T>
  <T ID="344154386F81ABC0">The start index of the search.</T>
  <T ID="D6725888D1BD11B9">The number of characters positions to examine.</T>
  <T ID="94B088729895D30F">The zero-based index position of &lt;paramref name ="value"/&gt; from the beginning of the &lt;see cref ="T:System.Text.StringBuilder"/&gt;, if this character was found, otherwise -1.</T>
  <T ID="71564C226D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="C4CEA5326BCC0FF0">&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; or &lt;paramref name ="count"/&gt; are smaller than zero or larger than the number of characters in &lt;paramref name ="builder"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; + &lt;paramref name ="count"/&gt; is larger than the number of characters in &lt;paramref name ="builder"/&gt;.
&lt;/para&gt;</T>
  <T ID="6D51904138491761">Returns the zero-based index of the last occurrence of the specified character in &lt;paramref name ="builder"/&gt;.</T>
  <T ID="D4B74B9872CA29FF">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="61AA44D7D05DB862">The Unicode character to search for.</T>
  <T ID="8718D67480D24442">The zero-based index of the last occurrence of &lt;paramref name="value"/&gt; if this character has been found, otherwise -1.</T>
  <T ID="A2B066536D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="17F290E257F4DFBD">Returns the zero-based index of the last occurrence of the specified character in &lt;paramref name ="builder"/&gt;. The search begins at a specified character position and runs backwards to the beginning of the &lt;see cref ="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="307A803D72CA29FF">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="EC563447D05DB862">The Unicode character to search for.</T>
  <T ID="D5E165FA16EB57B2">The start index of the search. The search is done backwards to the beginning of &lt;paramref name ="builder"/&gt;.</T>
  <T ID="D8747E7980D24442">The zero-based index of the last occurence of &lt;paramref name="value"/&gt; if that character is found, or -1 if it's not.</T>
  <T ID="4A2CD61F6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="D6A7D86B71494C80">&lt;paramref name ="builder"/&gt; is not empty and &lt;paramref name ="startIndex"/&gt; is less than zero or greater than or equal to the length of &lt;paramref name ="builder"/&gt;.</T>
  <T ID="320F091B3085A4A1">Specifies the zero-based index of the last occurrence of the specified character in &lt;paramref name ="builder"/&gt;. The search begins at a specified index and runs backwards for a specified number of character positions to the beginning of the &lt;see cref ="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="A67D3DB972CA29FF">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="C45AFF5BD05DB862">The Unicode character to search for.</T>
  <T ID="F2EBE0C616EB57B2">The start index of the search. The search is done backwards to the beginning of &lt;paramref name ="builder"/&gt;.</T>
  <T ID="FCBB96BFD1BD11B9">The number of characters positions to examine.</T>
  <T ID="414D384CD1A55639">If &lt;paramref name ="value"/&gt; was found, the zero-based index position of its last occurrence within the section to be searched, otherwise -1.</T>
  <T ID="B4F509806D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="985466FC32A4F9F6">&lt;para&gt;
&lt;paramref name ="builder"/&gt; is not empty and &lt;paramref name ="startIndex"/&gt; is less than zero or greater than or equal to the length of &lt;paramref name ="builder"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="builder"/&gt; is not empty and &lt;paramref name ="startIndex"/&gt; - &lt;paramref name ="count"/&gt; + 1 is less than zero.
&lt;/para&gt;</T>
  <T ID="B6CCB25898F7A73">Converts the content of a section in &lt;see cref ="T:System.Text.StringBuilder"/&gt; that begins at &lt;paramref name ="startIndex"/&gt; and includes &lt;paramref name ="count"/&gt; characters to lowercase using the rules of the invariant culture.</T>
  <T ID="A4E1CB52B628C443">The number of characters to convert.</T>
  <T ID="C4DD40176BCC0FF0">&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; or &lt;paramref name ="count"/&gt; are smaller than zero or larger than the number of characters in &lt;paramref name ="builder"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; + &lt;paramref name ="count"/&gt; is larger than the number of characters in &lt;paramref name ="builder"/&gt;.
&lt;/para&gt;</T>
  <T ID="99DDA6EFDF803CB8">Converts the content of a section in &lt;see cref ="T:System.Text.StringBuilder"/&gt; that begins at &lt;paramref name ="startIndex"/&gt; and includes &lt;paramref name ="count"/&gt; characters to uppercase using the rules of the invariant culture.</T>
  <T ID="C9B3487FB628C443">The number of characters to convert.</T>
  <T ID="3C23FC2D6BCC0FF0">&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; or &lt;paramref name ="count"/&gt; are smaller than zero or larger than the number of characters in &lt;paramref name ="builder"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; + &lt;paramref name ="count"/&gt; is larger than the number of characters in &lt;paramref name ="builder"/&gt;.
&lt;/para&gt;</T>
  <T ID="682BA27AA265926D">Indicates whether a &lt;see cref="T:System.String"/&gt; contains one of the two characters that are passed to the method as arguments.</T>
  <T ID="FB6515516154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="8C698431621D3E8B">The first character to search for.</T>
  <T ID="E9C20F9649D8BC06">The second character to search for.</T>
  <T ID="B112EBFDE10DFC18">&lt;c&gt;true&lt;/c&gt; if one of the characters to be searched for is found, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="C58A1976E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="69F73C2D4E24CDF2">Indicates whether a &lt;see cref="T:System.String"/&gt; contains one of the 3 characters that are passed to the method as arguments.</T>
  <T ID="F8A550216154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="A579BA7621D3E8B">The first character to search for.</T>
  <T ID="ACFF104249D8BC06">The second character to search for.</T>
  <T ID="4FA684DD408D16FE">The third character to search for.</T>
  <T ID="75FF562EE10DFC18">&lt;c&gt;true&lt;/c&gt; if one of the characters to be searched for is found, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="4FFF58D2E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="38813B3AA83D96F5">Indicates whether a &lt;see cref="T:System.String"/&gt; contains one of the Unicode characters that are passed to the method in a read-only span.</T>
  <T ID="F345A92B16154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="A799C379F13A4FB1">A read-only span, which contains the characters to search for.</T>
  <T ID="E291E14596430F1E">&lt;c&gt;true&lt;/c&gt; if one of the characters to be searched for is found in &lt;paramref name ="s"/&gt;, otherwise &lt;c&gt;false&lt;/c&gt;. If &lt;paramref name ="s"/&gt; or &lt;paramref name ="anyOf"/&gt; have the length zero, &lt;c&gt;false&lt;/c&gt; is returned.</T>
  <T ID="FEB9F356E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="DE379CC8FC4289E">Indicates whether a &lt;see cref="T:System.String"/&gt; contains one of the Unicode characters that are passed to the method as an array.</T>
  <T ID="5245DC1B16154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="3887C2A9CF5925EB">An array, which contains the characters to search for.</T>
  <T ID="478FD4A596430F1E">&lt;c&gt;true&lt;/c&gt; if one of the characters to be searched for is found in &lt;paramref name ="s"/&gt;, otherwise &lt;c&gt;false&lt;/c&gt;. If &lt;paramref name ="s"/&gt; or &lt;paramref name ="anyOf"/&gt; have the length zero, &lt;c&gt;false&lt;/c&gt; is returned.</T>
  <T ID="251F639587835164">Indicates whether a &lt;see cref="T:System.String"/&gt; contains white space.</T>
  <T ID="B55EB7526962AF8F">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)"/&gt; is used for the comparison.</T>
  <T ID="BD834F86DAEBD0EB">Returns the zero-based index of the first occurrence of one of the the specified characters in &lt;paramref name="s"/&gt;. The search begins at a specified index and a specified number of character positions are checked.</T>
  <T ID="1719613F3752C23C">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="7598080F13A4FB1">A read-only span, which contains the characters to search for.</T>
  <T ID="9E5D9F6507A86DC">The zero-based index in &lt;paramref name="s"/&gt; at which the search starts.</T>
  <T ID="4F0DE1C621EF880">The number of characters positions to examine in &lt;paramref name="s"/&gt;.</T>
  <T ID="27866CBCD58CCA0B">&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; or &lt;paramref name ="count"/&gt; are smaller than zero
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; + &lt;paramref name ="count"/&gt; is larger than the number of characters in &lt;paramref name ="value"/&gt;.
&lt;/para&gt;</T>
  <T ID="B682EA6CB5245F66">If the length of &lt;paramref name ="values"/&gt; is less than 5, the method uses MemoryExtensions.IndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, ReadOnlySpan&amp;lt;T&amp;gt;) for the comparison. If the length of &lt;paramref name ="values"/&gt; is greater, &lt;see cref ="M:System.String.IndexOfAny(System.Char[])"/&gt; is used to avoid performance issues.</T>
  <T ID="9E97041E37A2229A">MemoryExtensions.IndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, T, T)  is used for the comparison.</T>
  <T ID="DE4E5FB57862671F">MemoryExtensions.IndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, T, T, T)  is used for the comparison.</T>
  <T ID="6333C718E1C8334F">&lt;para&gt;
This specialization of the extension method MemoryExtensions.IndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, ReadOnlySpan&amp;lt;T&amp;gt;) for the data type &lt;see cref ="T:System.Char"/&gt; is required to avoid performance problems.
&lt;/para&gt;
&lt;para&gt;
If the length of &lt;paramref name ="values"/&gt; is less than 5, the method uses MemoryExtensions.IndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, ReadOnlySpan&amp;lt;T&amp;gt;) for the comparison. If the length of &lt;paramref name ="values"/&gt; is greater, &lt;see cref ="M:System.String.IndexOfAny(System.Char[])"/&gt; is used.
&lt;/para&gt;</T>
  <T ID="8A34684737A2229A">MemoryExtensions.IndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, T, T)  is used for the comparison.</T>
  <T ID="F300FAD27862671F">MemoryExtensions.IndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, T, T, T)  is used for the comparison.</T>
  <T ID="F227D0F583A3C6EB">If the length of &lt;paramref name ="anyOf"/&gt; is less than 5, the method uses MemoryExtensions.IndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, ReadOnlySpan&amp;lt;T&amp;gt;) for the comparison. If the length of &lt;paramref name ="values"/&gt; is greater, &lt;see cref ="M:System.String.IndexOfAny(System.Char[])"/&gt; is used to avoid performance issues.</T>
  <T ID="D7549EF3B210A72">&lt;see cref="M:System.String.IndexOfAny(System.Char[])"/&gt; is used for the comparison.</T>
  <T ID="12013C7F83A3C6EB">If the length of &lt;paramref name ="anyOf"/&gt; is less than 5, the method uses MemoryExtensions.IndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, ReadOnlySpan&amp;lt;T&amp;gt;) for the comparison. If the length of &lt;paramref name ="values"/&gt; is greater, &lt;see cref ="M:System.String.IndexOfAny(System.Char[])"/&gt; is used.</T>
  <T ID="4EF98652E9F3F6AE">&lt;para&gt;
This specialization of the extension method MemoryExtensions.LastIndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, ReadOnlySpan&amp;lt;T&amp;gt;) for the data type &lt;see cref ="T:System.Char"/&gt; is required to avoid performance problems.
&lt;/para&gt;
&lt;para&gt;
If the length of &lt;paramref name ="values"/&gt; is less than 5, the method uses MemoryExtensions.LastIndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, ReadOnlySpan&amp;lt;T&amp;gt;) for the comparison. If the length of &lt;paramref name ="values"/&gt; is greater, &lt;see cref ="M:System.String.LastIndexOfAny(System.Char[])"/&gt; is used.
&lt;/para&gt;</T>
  <T ID="26C533A9A9FD3A12">Returns the zero-based index position of the last occurrence of one of the specified characters in &lt;paramref name ="s"/&gt;. The search begins at a specified index and runs backwards to the beginning of the &lt;see cref="T:System.String"/&gt; for a specified number of character positions.</T>
  <T ID="66C240483752C23C">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="F31E3E2FF13A4FB1">A read-only span, which contains the characters to search for.</T>
  <T ID="2ADFC168DC7FD944">The start index of the search. The search is done backwards to the beginning of &lt;paramref name="s"/&gt;.</T>
  <T ID="F31E26C7D1BD11B9">The number of characters positions to examine in &lt;paramref name="s"/&gt;.</T>
  <T ID="510B04F2FC8F020F">The zero-based index of the last occurrence of one of the specified Unicode characters in the specified part of &lt;paramref name="s"/&gt; or -1 if none of these characters have been found in this area.</T>
  <T ID="FD6E6302E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="AB9E0932FC7F3A48">&lt;para&gt;
&lt;paramref name="s"/&gt; is not &lt;see cref="F:System.String.Empty"/&gt; and &lt;paramref name ="startIndex"/&gt; is less than zero or greater than or equal to the length of &lt;paramref name="s"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="s"/&gt; is not &lt;see cref="F:System.String.Empty"/&gt; and &lt;paramref name ="startIndex"/&gt; - &lt;paramref name ="count"/&gt; + 1 is less than zero.
&lt;/para&gt;</T>
  <T ID="AB91C762ED280B1A">If the length of &lt;paramref name ="anyOf"/&gt; is less than 5, the method uses MemoryExtensions.LastIndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, ReadOnlySpan&amp;lt;T&amp;gt;) for the comparison. If the length of &lt;paramref name ="values"/&gt; is greater, &lt;see cref ="M:System.String.LastIndexOfAny(System.Char[])"/&gt; is used.</T>
  <T ID="4C72427440E13833">Returns a corresponding &lt;see cref ="T:System.Text.Encoding"/&gt; object for the identifier of a character set, for which &lt;see cref ="P:System.Text.Encoding.EncoderFallback"/&gt; and &lt;see cref ="P:System.Text.Encoding.DecoderFallback"/&gt; are set to ReplacementFallback. &lt;see cref ="P:System.Text.Encoding.UTF8"/&gt; is the fallback value.</T>
  <T ID="ECDC42D292D37CE8">The identifier of a character set or &lt;c&gt;null&lt;/c&gt; for &lt;see cref ="P:System.Text.Encoding.UTF8"/&gt;.</T>
  <T ID="F8599D52DC4DFDFC">Returns a corresponding &lt;see cref ="T:System.Text.Encoding"/&gt; object for the identifier of a charset whose properties &lt;see cref ="P:System.Text.Encoding.EncoderFallback"/&gt; and &lt;see cref ="P:System.Text.Encoding.DecoderFallback"/&gt; are set to the desired values.</T>
  <T ID="4EEBE81DCDCC7FF1">The identifier of a character set or &lt;c&gt;null&lt;/c&gt; for the UTF-8 character set.</T>
  <T ID="FE5B73FFA6183C9F">An &lt;see cref ="T:System.Text.Encoding"/&gt; object that corresponds to the specified identifier of the character set or a &lt;see cref ="T:System.Text.Encoding"/&gt; object for the UTF-8 character set if no match was found.</T>
  <T ID="EAEF3842664E392B">An object that provides an error handling mechanism if a &lt;see cref ="T:System.Byte"/&gt; sequence cannot be decoded with the &lt;see cref ="T:System.Text.Encoding"/&gt; object .</T>
  <T ID="669FFB31FB32DA50">An object that provides an error handling mechanism if a character cannot be encoded with the &lt;see cref ="T:System.Text.Encoding"/&gt; object.</T>
  <T ID="360DF399F3F8F8B2">.NET Standard and .NET 5.0 recognize by default only a small number of character sets. The method overrides this default setting.</T>
  <T ID="9F3BBD0CD460C28">Returns a corresponding &lt;see cref ="T:System.Text.Encoding"/&gt; object for the number of a code page, for which &lt;see cref ="P:System.Text.Encoding.EncoderFallback"/&gt; and &lt;see cref ="P:System.Text.Encoding.DecoderFallback"/&gt; are set to ReplacementFallback. &lt;see cref ="P:System.Text.Encoding.UTF8"/&gt; is the fallback value.</T>
  <T ID="5D688E429095E2CF">The number of a code page or zero for &lt;see cref ="P:System.Text.Encoding.Default"/&gt;.</T>
  <T ID="B2D6AC8322564CED">An &lt;see cref ="T:System.Text.Encoding"/&gt; object that matches the specified code page number or &lt;see cref ="P:System.Text.Encoding.UTF8"/&gt; if no match was found .</T>
  <T ID="6B584085F3F8F8B2">.NET Standard and .NET 5.0 recognize by default only a small number of character sets. The method overrides this default setting.</T>
  <T ID="C16329ED73069721">Returns a corresponding &lt;see cref ="T:System.Text.Encoding"/&gt; object for the number of a code page whose properties &lt;see cref ="P:System.Text.Encoding.EncoderFallback"/&gt; and &lt;see cref ="P:System.Text.Encoding.DecoderFallback"/&gt; are set to the desired values.</T>
  <T ID="D5DBD6139095E2CF">The number of a code page or zero for &lt;see cref ="P:System.Text.Encoding.Default"/&gt;.</T>
  <T ID="6AE3D2068470E98D">An &lt;see cref ="T:System.Text.Encoding"/&gt; object that corresponds to the specified code page number or a &lt;see cref ="T:System.Text.Encoding"/&gt; object for the UTF-8 character set if no match was found.</T>
  <T ID="8AC8D018664E392B">An object that provides an error handling mechanism if a &lt;see cref ="T:System.Byte"/&gt; sequence cannot be decoded with the &lt;see cref ="T:System.Text.Encoding"/&gt; object .</T>
  <T ID="53DC44CEF3F8F8B2">.NET Standard and .NET 5.0 recognize by default only a small number of character sets. The method overrides this default setting.</T>
  <T ID="7F062B0DFB32DA50">An object that provides an error handling mechanism if a &lt;see cref ="T:System.Byte"/&gt; sequence cannot be decoded with the &lt;see cref ="T:System.Text.Encoding"/&gt; object .</T>
  <T ID="BAB0884B2F6E8437">Indicates whether a specified Unicode character is found in a read-only span. MemoryExtensions.IndexOf(this ReadOnlySpan&amp;lt;T&amp;gt;, ReadOnlySpan&amp;lt;T&amp;gt;) is used for the comparison.</T>
  <T ID="27AF86687281E84E">The zero-based index of the first occurrence of one of the specified Unicode characters in &lt;paramref name="span"/&gt; or -1 if none of these characters have been found. If &lt;paramref name="values"/&gt; is an empty span, the method returns -1.</T>
  <T ID="B1157D6AA5222071">The zero-based index of the last occurrence of one of the specified Unicode characters in &lt;paramref name="span"/&gt; or -1 if none of these characters have been found. If &lt;paramref name="values"/&gt; is an empty span, the method returns -1.</T>
  <T ID="68487646E1E70044">The method performs an ordinal character comparison.</T>
  <T ID="A1355512E1E70044">The method performs an ordinal character comparison.</T>
  <T ID="6A461257E1E70044">The method performs an ordinal character comparison.</T>
  <T ID="F4130776E1E70044">The method performs an ordinal character comparison.</T>
  <T ID="74DA7D90E1E70044">The method performs an ordinal character comparison.</T>
  <T ID="68B1DEAFE1E70044">The method performs an ordinal character comparison.</T>
  <T ID="1D13892EE1E70044">The method performs an ordinal character comparison.</T>
  <T ID="D310B6D6A486D341">&lt;paramref name="s"/&gt; or &lt;paramref name="anyOf"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="49B3F6E55065EF89">The zero-based index of the first occurrence of one of the specified Unicode characters in &lt;paramref name="s"/&gt; or -1 if none of these characters have been found. If &lt;paramref name="anyOf"/&gt; is an empty span, the method returns -1.</T>
  <T ID="6EA193E8A486D341">&lt;paramref name="s"/&gt; or &lt;paramref name="anyOf"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="79C2EDB38E1A0F50">Gets the value of a hexadecimal digit.</T>
  <T ID="9EE822F0B52975D7">The hexadecimal digit to convert (0-9, a-f, A-F).</T>
  <T ID="C2AA08A6982563E5">A number from 0 to 15 that corresponds to the specified hexadecimal digit.</T>
  <T ID="E11AC81C9E3E9296">Calls &lt;see cref ="M:System.Uri.FromHex(System.Char)"/&gt;.</T>
  <T ID="8959647CF3288D32">&lt;paramref name ="digit"/&gt; is not a valid hexadecimal digit (0-9, a-f, A-F).</T>
  <T ID="82D4BC70D8ECA086">Tries to interpret a character as a hexadecimal digit and to return the value that this hexadecimal digit represents.</T>
  <T ID="DBE29AA59212166E">The Unicode character to analyze.</T>
  <T ID="9494B2C3DC08C655">After the method has been successfully completed, it contains the value that &lt;paramref name ="digit"/&gt; represents as a hexadecimal digit, otherwise &lt;c&gt;null&lt;/c&gt;. The parameter is passed uninitialized.</T>
  <T ID="F469CB6328DE1567">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name ="digit"/&gt; represents a hexadecimal digit, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="993A68943C2095C4">Tries to interpret a character as a decimal digit (0-9) and to return the value that this decimal digit represents.</T>
  <T ID="24EF8CE89212166E">The Unicode character to analyze.</T>
  <T ID="41C6317441129D4F">After the method has been successfully completed, it contains the value that &lt;paramref name ="digit"/&gt; represents as a decimal digit, otherwise &lt;c&gt;null&lt;/c&gt;. The parameter is passed uninitialized.</T>
  <T ID="24047D8BD176A42E">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name ="digit"/&gt; represents a decimal digit, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="95537E3BCD5C2C8A">Tries to interpret a character as a binary digit (0 or 1) and to return the value that this binary digit represents.</T>
  <T ID="A1F785B29212166E">The Unicode character to analyze.</T>
  <T ID="81E70A0FFF27064">After the method has been successfully completed, it contains the value that &lt;paramref name ="digit"/&gt; represents as a binary digit, otherwise &lt;c&gt;null&lt;/c&gt;. The parameter is passed uninitialized.</T>
  <T ID="3E0A33122B7177D9">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name ="digit"/&gt; represents a binary digit, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="2B361301C55FA7C4">Gets the value of a binary digit.</T>
  <T ID="4BFCC594B768302">The binary digit to convert (0 or 1).</T>
  <T ID="F28DF6FA26BB31A1">A number that corresponds to the specified binary digit.</T>
  <T ID="29DC734164FFD107">&lt;paramref name ="digit"/&gt; is not a valid binary digit (0 or 1).</T>
  <T ID="CB8AD1AC6AFE7489">Gets the value of a decimal digit (0-9).</T>
  <T ID="A2E49A9117275AFB">The decimal digit to convert (0-9).</T>
  <T ID="8BD4D39723AEB4A6">A number from 0 to 9 that corresponds to the specified decimal digit.</T>
  <T ID="BAB869B73FE37BCE">&lt;paramref name ="digit"/&gt; is not a valid decimal digit (0-9).</T>
  <T ID="A0B36B3E02C0BC2">Indicates whether the Unicode character belongs to the ASCII character set.</T>
  <T ID="407B5B4D496DDFB">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is part of the ASCII character set, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="AB7DF404A6C6B1DC">Indicates whether the Unicode character is a decimal digit (0-9).</T>
  <T ID="F490ED3BF644E52B">The Unicode character to examine.</T>
  <T ID="28A1E44F9063358B">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name ="digit"/&gt; represents a decimal digit, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="9A82AD0428CDC813">Indicates whether the Unicode character is a hexadecimal digit (0-9, a-f, A-F).</T>
  <T ID="463566ABF644E52B">The Unicode character to examine.</T>
  <T ID="2CBDBEFDCEA3BA46">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name ="character"/&gt; represents a hexadecimal digit, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="85872D17202592EC">Calls &lt;see cref="M:System.Uri.IsHexDigit(System.Char)"/&gt;.</T>
  <T ID="C1F5374A8532D69">Indicates whether the Unicode character is a binary digit (0 or 1).</T>
  <T ID="796238C5F644E52B">The Unicode character to examine.</T>
  <T ID="A7F68E2FE23C105E">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name ="digit"/&gt; represents a binary digit, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="E730FECC368ED765">Indicates whether the Unicode character is categorized as a control character.</T>
  <T ID="7964F81D72EA4D1">The Unicode character to examine.</T>
  <T ID="19165BEDF0C20E1B">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is categorized as a control character, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="3FF4E38B9C9C5BF8">Calls &lt;see cref="M:System.Char.IsControl(System.Char)"/&gt;.</T>
  <T ID="8415302756130C9D">Indicates whether the Unicode character is categorized as a member of the Unicode category "Decimal Digit Number".</T>
  <T ID="8361E038D72EA4D1">The Unicode character to examine.</T>
  <T ID="9E90CF132944FA47">The Unicode character to examine.</T>
  <T ID="71A498CC2944FA47">The Unicode character to examine.</T>
  <T ID="710E94BAD72EA4D1">The Unicode character to examine.</T>
  <T ID="5F1DA9E4D72EA4D1">The Unicode character to examine.</T>
  <T ID="BEEEA8B4D72EA4D1">The Unicode character to examine.</T>
  <T ID="30C52419D72EA4D1">The Unicode character to examine.</T>
  <T ID="4088155ED72EA4D1">The Unicode character to examine.</T>
  <T ID="F14474A0D72EA4D1">The Unicode character to examine.</T>
  <T ID="A492B76CD72EA4D1">The Unicode character to examine.</T>
  <T ID="7285ADBAD72EA4D1">The Unicode character to examine.</T>
  <T ID="7F9121E4D72EA4D1">The Unicode character to examine.</T>
  <T ID="A1B3B412D72EA4D1">The Unicode character to examine.</T>
  <T ID="A88978B6F7886F20">&lt;c&gt;true&lt;/c&gt;, if &lt;paramref name="c"/&gt; is categorized as a member of the Unicode category "Decimal Digit Number", otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="C6FA72F8A4E1A408">&lt;para&gt;
Calls the &lt;see cref ="M:System.Char.IsDigit(System.Char)"/&gt; method.
&lt;/para&gt;
&lt;note type ="important"&gt;
The Unicode category "Decimal Digit Number" includes many more characters than the digits 0-9. Use the &lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsDecimalDigit(System.Char)"/&gt; method if you want to check for the characters 0-9.
&lt;/note&gt;</T>
  <T ID="50441D594717190E">Indicates whether the Unicode character is a high surrogate.</T>
  <T ID="D99E6A1C2944FA47">The Unicode character to examine.</T>
  <T ID="C413CA866CC2CE5F">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is a high surrogate, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="41154BD850E987EF">Calls &lt;see cref="M:System.Char.IsHighSurrogate(System.Char)"/&gt;.</T>
  <T ID="59C7E87CCDAE9637">Indicates whether the Unicode character is a low surrogate.</T>
  <T ID="7689CA792529CA7A">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is a low surrogate, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="45E3DC3F5188177F">Calls &lt;see cref="M:System.Char.IsLowSurrogate(System.Char)"/&gt;.</T>
  <T ID="6C8D47159CE6A4A8">Indicates whether the Unicode character has a surrogate code unit.</T>
  <T ID="9701CDEC054754D0">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt;  has a surrogate code unit, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="DA4E026E004BAD7C">Calls &lt;see cref="M:System.Char.IsSurrogate(System.Char)"/&gt;.</T>
  <T ID="2CA4EFD131F5C7F5">Indicates whether the Unicode character is categorized as a Unicode letter.</T>
  <T ID="1A10EC14115F4F42">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is categorized as a Unicode letter, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="6F99380262BB6E62">Calls &lt;see cref="M:System.Char.IsLetter(System.Char)"/&gt;.</T>
  <T ID="570A5BDBBADAF33E">Indicates whether the Unicode character is categorized as a Unicode letter or decimal digit.</T>
  <T ID="663EC44CED9AB459">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is categorized as a Unicode letter or decimal digit, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="2E8C9118DC20F073">Calls &lt;see cref="M:System.Char.IsLetterOrDigit(System.Char)"/&gt;.</T>
  <T ID="2027775374D6FEF7">Indicates whether the Unicode character is categorized as a lowercase letter.</T>
  <T ID="FBB3015E311195CC">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is categorized as a lowercase letter, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="A3952F96259EB365">Calls &lt;see cref="M:System.Char.IsLower(System.Char)"/&gt;.</T>
  <T ID="4C571CDE872F28C3">Indicates whether the Unicode character is categorized as a uppercase letter.</T>
  <T ID="B416CAAFA927301A">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is categorized as a uppercase letter, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="C94E0455B9978F8E">Calls &lt;see cref="M:System.Char.IsUpper(System.Char)"/&gt;.</T>
  <T ID="81C995DD536C5EA7">Indicates whether the Unicode character is categorized as a number.</T>
  <T ID="37E25C82E0C9AB80">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is categorized as a number, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="8AA6691CDBE6A4F3">Calls &lt;see cref="M:System.Char.IsNumber(System.Char)"/&gt;.</T>
  <T ID="ED2F1767B628B36B">Indicates whether the Unicode character is categorized as a punctuation mark.</T>
  <T ID="75C8071400F30AE1">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is categorized as a punctuation mark, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="F65E5A8E43C42523">Calls &lt;see cref="M:System.Char.IsPunctuation(System.Char)"/&gt;.</T>
  <T ID="1942CD4B94A5CE18">Indicates whether the Unicode character is categorized as a separator character.</T>
  <T ID="49BD8EF447E6FF48">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is categorized as a separator character, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="816F8230BA602605">Calls &lt;see cref="M:System.Char.IsSeparator(System.Char)"/&gt;.</T>
  <T ID="835D3C9D2ED03026">Indicates whether the Unicode character is categorized as a symbol character.</T>
  <T ID="762E9C16092BB2B6">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is categorized as a symbol character, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="2BE057CAC9039321">Calls &lt;see cref="M:System.Char.IsSymbol(System.Char)"/&gt;.</T>
  <T ID="F87083F117A325CD">Indicates whether the Unicode character is categorized as white space.</T>
  <T ID="BD4EED2E10863E9C">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is categorized as white space, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="140969C61FE3968C">Calls &lt;see cref="M:System.Char.IsWhiteSpace(System.Char)"/&gt;.</T>
  <T ID="A3AB1B3E77A126BB">Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</T>
  <T ID="821AE9FDDA17CC5">The Unicode character to convert.</T>
  <T ID="B3794A81F3BA49D6">The lowercase equivalent of the &lt;paramref name="c"/&gt; parameter, or the unchanged value of &lt;paramref name="c"/&gt;, if &lt;paramref name="c"/&gt; is already lowercase or not alphabetic.</T>
  <T ID="2D155229B725D8EA">Indicates whether a read-only span of characters starts with the specified &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="CD744D0DA6A03F7B">The source span.</T>
  <T ID="81894EF5A35FE867">Der &lt;see cref="T:System.String"/&gt; to compare with the start of the source span.</T>
  <T ID="DE2C710E57940B7A">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="value"/&gt; matches the start of &lt;paramref name="span"/&gt;, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="1DE34C2CC5866F7F">&lt;para&gt;
The method performs an ordinal character comparison. If &lt;paramref name ="value"/&gt; is &lt;c&gt;null&lt;/c&gt; or &lt;see cref ="F:System.String.Empty"/&gt;, &lt;c&gt;true&lt;/c&gt; is returned.
&lt;/para&gt;
&lt;para&gt;
This overload is useful because the support for the implicit conversion from &lt;see cref ="T:System.String"/&gt; to &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; only starts with .NET Standard 2.1.
&lt;/para&gt;</T>
  <T ID="3FC28CC30B7E473C">Indicates whether a read-only character span begins with a specified &lt;see cref="T:System.String"/&gt; when compared using a specified &lt;see cref="T:System.StringComparison"/&gt; value.</T>
  <T ID="1C92B4B5A6A03F7B">The source span.</T>
  <T ID="89737857A35FE867">Der &lt;see cref="T:System.String"/&gt; to compare with the start of the source span.</T>
  <T ID="F09AE905DD28B219">An enumeration value that determines how &lt;paramref name="span"/&gt; and &lt;paramref name="value"/&gt; are compared.</T>
  <T ID="A3B1847857940B7A">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="value"/&gt; matches the start of &lt;paramref name="span"/&gt;, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="2C4C5746C5866F7F">&lt;para&gt;
The method performs an ordinal character comparison. If &lt;paramref name ="value"/&gt; is &lt;c&gt;null&lt;/c&gt; or &lt;see cref ="F:System.String.Empty"/&gt;, &lt;c&gt;true&lt;/c&gt; is returned.
&lt;/para&gt;
&lt;para&gt;
This overload is useful because the support for the implicit conversion from &lt;see cref ="T:System.String"/&gt; to &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; only starts with .NET Standard 2.1.
&lt;/para&gt;</T>
  <T ID="2145D8381EBACA49">&lt;paramref name="comparisonType"/&gt; is not a defined value of the &lt;see cref="T:System.StringComparison"/&gt; enumeration.</T>
  <T ID="CDC522E79F15C31C">Indicates whether &lt;paramref name="s"/&gt; ends with the specified &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="1FCC6D65A6A03F7B">The source span.</T>
  <T ID="241FA300F44C0B24">The &lt;see cref="T:System.String"/&gt; to compare with the end of the source span.</T>
  <T ID="E90CAC16D5237705">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="value"/&gt; matches the end of &lt;paramref name="span"/&gt;, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="660E1082C5866F7F">&lt;para&gt;
The method performs an ordinal character comparison. If &lt;paramref name ="value"/&gt; is &lt;c&gt;null&lt;/c&gt; or &lt;see cref ="F:System.String.Empty"/&gt;, &lt;c&gt;true&lt;/c&gt; is returned.
&lt;/para&gt;
&lt;para&gt;
This overload is useful because the support for the implicit conversion from &lt;see cref ="T:System.String"/&gt; to &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; only starts with .NET Standard 2.1.
&lt;/para&gt;</T>
  <T ID="2DE743B72F308704">Indicates whether a read-only character span ends with a specified &lt;see cref="T:System.String"/&gt; when compared using a specified &lt;see cref="T:System.StringComparison"/&gt; value.</T>
  <T ID="EF34CE78A6A03F7B">The source span.</T>
  <T ID="F7E33BE0F44C0B24">The &lt;see cref="T:System.String"/&gt; to compare with the end of the source span.</T>
  <T ID="8A23192EDD28B219">An enumeration value that determines how &lt;paramref name="span"/&gt; and &lt;paramref name="value"/&gt; are compared.</T>
  <T ID="B0ED5D6ED5237705">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="value"/&gt; matches the end of &lt;paramref name="span"/&gt;, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="2852CAB0C54504F5">&lt;para&gt;
If &lt;paramref name ="value"/&gt; is &lt;c&gt;null&lt;/c&gt; or &lt;see cref ="F:System.String.Empty"/&gt;, &lt;c&gt;true&lt;/c&gt; is returned.
&lt;/para&gt;
&lt;para&gt;
This overload is useful because the support for the implicit conversion from &lt;see cref ="T:System.String"/&gt; to &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; only starts with .NET Standard 2.1.
&lt;/para&gt;</T>
  <T ID="F910B02F1EBACA49">&lt;paramref name="comparisonType"/&gt; is not a defined value of the &lt;see cref="T:System.StringComparison"/&gt; enumeration.</T>
  <T ID="C9B2A6443CC9B757">Extension methods, which act as Polyfills for the extension methods of the class &lt;see cref="T:FolkerKinzel.Strings.StringBuilderExtension"/&gt;.</T>
  <T ID="24BF3531AF0C6641">Replaces in &lt;paramref name="builder"/&gt; all sequences of white space with &lt;paramref name="replacement"/&gt;.</T>
  <T ID="75D0FA5A54973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="79B421EE489703EB">A &lt;see cref="T:System.String"/&gt; that is the replacement for all sequences of white space or &lt;c&gt;null&lt;/c&gt; to completely remove any white space.</T>
  <T ID="7D11B12A85C8117C">Pass &lt;c&gt;true&lt;/c&gt; to exclude newline characters from the replacement. The default value is &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="2914AF4600D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="6C9CA7884BA102C0">&lt;para&gt;
The method uses &lt;see cref ="M:System.Char.IsWhiteSpace(System.Char)"/&gt; to identify white space characters and works more thoroughly with it than &lt;see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"&gt;Regex.Replace(string input, @"\s+", string replacement)&lt;/see&gt;.
&lt;/para&gt;
&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.
&lt;/para&gt;
&lt;para&gt;
This overload is useful because the support for the implicit conversion from &lt;see cref ="T:System.String"/&gt; to &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; only starts with .NET Standard 2.1.
&lt;/para&gt;</T>
  <T ID="DCC835A96D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="C54BB75210BC1B6D">Replaces in a section of &lt;paramref name="builder"/&gt;, which starts at &lt;paramref name="startIndex"/&gt; and extends to the end of &lt;paramref name="builder"/&gt;, all sequences of white space with &lt;paramref name="replacement"/&gt;.</T>
  <T ID="618DD1C854973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="5BA06A29489703EB">A &lt;see cref="T:System.String"/&gt; that is the replacement for all sequences of white space or &lt;c&gt;null&lt;/c&gt; to completely remove all white space.</T>
  <T ID="924856FE85C8117C">Pass &lt;c&gt;true&lt;/c&gt; to exclude newline characters from the replacement. The default value is &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="1A101699C7B5D9DB">The zero-based index in &lt;paramref name ="builder"/&gt; at which the replacement starts.</T>
  <T ID="E327D8B00D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="E75479714BA102C0">&lt;para&gt;
The method uses &lt;see cref ="M:System.Char.IsWhiteSpace(System.Char)"/&gt; to identify white space characters and works more thoroughly with it than &lt;see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"&gt;Regex.Replace(string input, @"\s+", string replacement)&lt;/see&gt;.
&lt;/para&gt;
&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.
&lt;/para&gt;
&lt;para&gt;
This overload is useful because the support for the implicit conversion from &lt;see cref ="T:System.String"/&gt; to &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; only starts with .NET Standard 2.1.
&lt;/para&gt;</T>
  <T ID="615888E26D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="CEF7AC0D09F1669F">&lt;paramref name ="startIndex"/&gt; is less than zero or greater than the number of characters in &lt;paramref name ="builder"/&gt;.</T>
  <T ID="E78A953DDCC5D301">Replaces in a section of &lt;paramref name="builder"/&gt;, which starts at &lt;paramref name="startIndex"/&gt; and which is &lt;paramref name="count"/&gt; characters long, all sequences of white space with &lt;paramref name="replacement"/&gt;.</T>
  <T ID="BF07A19354973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="B811212F489703EB">A &lt;see cref="T:System.String"/&gt; that is the replacement for all sequences of white space or &lt;c&gt;null&lt;/c&gt; to completely remove all white space.</T>
  <T ID="6523DE22C7B5D9DB">The zero-based index in &lt;paramref name ="builder"/&gt; at which the replacement starts.</T>
  <T ID="D348E91997C447F3">The length of the section in which the replacements take place.</T>
  <T ID="A3682D985C8117C">Pass &lt;c&gt;true&lt;/c&gt; to exclude newline characters from the replacement. The default value is &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="59B1700200D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="429231C4BA102C0">&lt;para&gt;
The method uses &lt;see cref ="M:System.Char.IsWhiteSpace(System.Char)"/&gt; to identify white space characters and works more thoroughly with it than &lt;see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"&gt;Regex.Replace(string input, @"\s+", string replacement)&lt;/see&gt;.
&lt;/para&gt;
&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.
&lt;/para&gt;
&lt;para&gt;
This overload is useful because the support for the implicit conversion from &lt;see cref ="T:System.String"/&gt; to &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; only starts with .NET Standard 2.1.
&lt;/para&gt;</T>
  <T ID="3230A8056D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="ADF1E0DAB23C66E9">&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; or &lt;paramref name ="count"/&gt; are smaller than zero or larger than the number of characters in &lt;paramref name ="builder"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; + &lt;paramref name ="count"/&gt; is larger than the number of characters in &lt;paramref name ="builder"/&gt;.
&lt;/para&gt;</T>
  <T ID="5386D8F7083DC46">Replaces all newlines in &lt;paramref name="builder"/&gt; with &lt;paramref name="newLine"/&gt;.</T>
  <T ID="599BB0BBA046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="A5CB89CED99E810D">A &lt;see cref="T:System.String"/&gt; to replace each newline or &lt;c&gt;null&lt;/c&gt; to remove all newlines.</T>
  <T ID="53AB3F20A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="B7DE3BB76D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="390DCC1B4330ACDD">Calls &lt;see cref="M:System.Char.ToLowerInvariant(System.Char)"/&gt;.</T>
  <T ID="C5F88FCDC1B543C7">Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</T>
  <T ID="76B0870DDA17CC5">The Unicode character to convert.</T>
  <T ID="3EA858E6B28725F3">The uppercase equivalent of the &lt;paramref name="c"/&gt; parameter, or the unchanged value of &lt;paramref name="c"/&gt;, if &lt;paramref name="c"/&gt; is already uppercase or not alphabetic.</T>
  <T ID="E259BFD640907E85">Calls &lt;see cref="M:System.Char.ToUpperInvariant(System.Char)"/&gt;.</T>
  <T ID="B5A8151138645BFF">Indicates whether the Unicode character is categorized as a newline character.</T>
  <T ID="5D1F14D6522FA8C9">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is categorized as a newline character, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="C4DCB5A8D7F97A9C">&lt;para&gt;
The following characters are recognized as newline characters:
&lt;/para&gt;
&lt;list type="bullet"&gt;
&lt;item&gt;
CR: Carriage Return (U+000D)
&lt;/item&gt;
&lt;item&gt;
LF: Line Feed (U+000A)
&lt;/item&gt;
&lt;item&gt;
VT: Vertical Tab (U+000B)
&lt;/item&gt;
&lt;item&gt;
FF: Form Feed (U+000C)
&lt;/item&gt;
&lt;item&gt;
NEL: Next Line (U+0085)
&lt;/item&gt;
&lt;item&gt;
LS: Line Separator (U+2028)
&lt;/item&gt;
&lt;item&gt;
PS: Paragraph Separator (U+2029)
&lt;/item&gt;
&lt;/list&gt;</T>
  <T ID="A14E2B59592FCC7A">Inserts the content of a read-only character span at the specified index position into &lt;paramref name="builder"/&gt;.</T>
  <T ID="C96F081D31BAA75B">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; into which the characters are inserted.</T>
  <T ID="E72C82AB79D970B4">The zero-based index in &lt;paramref name ="builder"/&gt; at which the characters are inserted.</T>
  <T ID="A0AD5392BDD93808">The character span to insert.</T>
  <T ID="52673F7A164AF661">A reference to &lt;paramref name="builder"/&gt; after the insert operation is completed.</T>
  <T ID="2652A1366D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="F72EE60C3446A7C3">&lt;paramref name ="index"/&gt; is less than zero or greater than the number of characters in &lt;paramref name ="builder"/&gt;.</T>
  <T ID="956E8B5D34A36095">Extension methods, which act as Polyfills for the extension methods of the class &lt;see cref="T:FolkerKinzel.Strings.StringExtension"/&gt;.</T>
  <T ID="3143250DC955B46E">Generates a &lt;see cref ="T:System.String"/&gt; in which all sequences of white space are replaced by &lt;paramref name="replacement"/&gt;.</T>
  <T ID="67D528875A68DC9">The source &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="CBA5738D32A79726">A &lt;see cref="T:System.String"/&gt;, which replaces the white space or &lt;c&gt;null&lt;/c&gt; to remove all white space.</T>
  <T ID="818D45C685C8117C">Pass &lt;c&gt;true&lt;/c&gt; to exclude newline characters from the replacement. The default value is &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="D323FCA85B7084A5">A new &lt;see cref ="T:System.String"/&gt; in which all sequences of white space are replaced by &lt;paramref name="replacement"/&gt;. If &lt;paramref name="s"/&gt; doesn't contain a white space character, &lt;paramref name="s"/&gt; is returned.</T>
  <T ID="65CA41B44BA102C0">&lt;para&gt;
The method uses &lt;see cref ="M:System.Char.IsWhiteSpace(System.Char)"/&gt; to identify white space characters and works more thoroughly with it than &lt;see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"&gt;Regex.Replace(string input, @"\s+", string replacement)&lt;/see&gt;.
&lt;/para&gt;
&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.
&lt;/para&gt;
&lt;para&gt;
This overload is useful because the support for the implicit conversion from &lt;see cref ="T:System.String"/&gt; to &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; only starts with .NET Standard 2.1.
&lt;/para&gt;</T>
  <T ID="24E60C7DE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="8B2250E40E931C0D">Generates a &lt;see cref ="T:System.String"/&gt; in which all newlines are replaced by &lt;paramref name="newLine"/&gt;.</T>
  <T ID="1AC7666DB86216C5">The source &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="FD4A3C32D99E810D">A &lt;see cref="T:System.String"/&gt; that is the replacement for all newlines or &lt;c&gt;null&lt;/c&gt; to completely remove all newline characters.</T>
  <T ID="80603C9BCF1F5506">A new &lt;see cref ="T:System.String"/&gt; in which all newlines are replaced by &lt;paramref name="replacement"/&gt;. If &lt;paramref name="s"/&gt; doesn't contain a newline character, &lt;paramref name="s"/&gt; is returned.</T>
  <T ID="EE39A5D9E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="BD3512D75306A013">An enumeration value that specifies the rules for the comparison.</T>
  <T ID="D99D3751183DE16">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="value"/&gt; has been found, &lt;c&gt;false&lt;/c&gt; otherwise.</T>
  <T ID="BA054F501183DE16">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="value"/&gt; has been found, &lt;c&gt;false&lt;/c&gt; otherwise.</T>
  <T ID="682CE8FBF35F62F">Returns a value indicating whether a specified &lt;see cref="T:System.String"/&gt; occurs within &lt;paramref name="s"/&gt;, using the specified comparison rules.</T>
  <T ID="D6A6B5A816154BD0">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="335FBA62DD6392AE">The &lt;see cref="T:System.String"/&gt; to search for.</T>
  <T ID="C739F8875306A013">An enumeration value that specifies the rules for the comparison.</T>
  <T ID="3AC2E8321183DE16">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="value"/&gt; has been found, &lt;c&gt;false&lt;/c&gt; otherwise.</T>
  <T ID="B666F8CE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="CEA470E71E90ECD">Splits a &lt;see cref="T:System.String"/&gt; into a maximum number of substrings based on the provided separator, optionally omitting empty substrings from the result.</T>
  <T ID="F75AF076C81A83D">The &lt;see cref="T:System.String"/&gt; to split.</T>
  <T ID="2E031FB9780E37AB">A &lt;see cref="T:System.String"/&gt; that delimits the substrings in &lt;paramref name="s"/&gt;.</T>
  <T ID="4F18FC41442C71C1">The maximum number of elements expected in the array.</T>
  <T ID="154E94B66C70A1C5">An enumeration value that specifies whether to include empty substrings.</T>
  <T ID="F7998D39F98AC788">An array that contains at most &lt;paramref name="count"/&gt; substrings from &lt;paramref name="s"/&gt; that are delimited by &lt;paramref name="separator"/&gt;.</T>
  <T ID="C3F76E46E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="372ADD9A2FCFD86F">Splits a &lt;see cref="T:System.String"/&gt; into substrings based on the provided separator, optionally omitting empty substrings from the result.</T>
  <T ID="52BE06A76C81A83D">The &lt;see cref="T:System.String"/&gt; to split.</T>
  <T ID="1944D070780E37AB">A &lt;see cref="T:System.String"/&gt; that delimits the substrings in &lt;paramref name="s"/&gt;.</T>
  <T ID="635F79E56C70A1C5">An enumeration value that specifies whether to include empty substrings.</T>
  <T ID="7A7E0D5F88432DFE">An array whose elements contain the substrings from &lt;paramref name="s"/&gt; that are delimited by &lt;paramref name="separator"/&gt;.</T>
  <T ID="990FB0C8E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="2A8E1F360994FBEC">Returns a new &lt;see cref="T:System.String"/&gt; in which all occurrences of a specified &lt;see cref="T:System.String"/&gt; in the current &lt;see cref="T:System.String"/&gt; are replaced with another specified &lt;see cref="T:System.String"/&gt;, using the provided comparison type.</T>
  <T ID="257C9B1B5BD97688">The source &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="2C358BC1A9D8FD4E">The &lt;see cref="T:System.String"/&gt; to be replaced.</T>
  <T ID="798703241E856361">The &lt;see cref="T:System.String"/&gt; to replace all occurrences of &lt;paramref name="oldValue"/&gt;.</T>
  <T ID="D93ED6105306A013">An enumeration value that specifies the rules for the comparison.</T>
  <T ID="58A939FBCBBFEC78">A &lt;see cref="T:System.String"/&gt; that is equivalent to &lt;paramref name="s"/&gt; except that all instances of &lt;paramref name="oldValue"/&gt; are replaced with &lt;paramref name="newValue"/&gt;. If &lt;paramref name="oldValue"/&gt; is not found in &lt;paramref name="s"/&gt;, the method returns &lt;paramref name="s"/&gt; unchanged.</T>
  <T ID="F700E86FE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="740BCB133D046509">&lt;paramref name="oldValue"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="FEEB1410313A0533">&lt;para&gt;
&lt;paramref name="oldValue"/&gt; is &lt;see cref="F:System.String.Empty"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name="comparisonType"/&gt; is not a defined value of the &lt;see cref="T:System.StringComparison"/&gt; enumeration.
&lt;/para&gt;</T>
  <T ID="C40DF95BC6688FB8"></T>
  <T ID="5EB53FA6F0954782"></T>
  <T ID="8C3740C8138EF769">Indicates whether a read-only character span contains a newline character.</T>
  <T ID="EC5CDBE8C6DCBCB1">The span to search.</T>
  <T ID="8EF9672BEB82C8E5">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="span"/&gt; contains a newline character, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="45DD557960457753">&lt;see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used for the comparison.</T>
  <T ID="40E00A51428BBF3">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="span"/&gt; contains white space, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="B7DA26F913BAD2FC">Indicates whether a read-only character span ends with a specified Unicode character.</T>
  <T ID="B3F3042BC26D7E7">The span to search.</T>
  <T ID="1CE612D4B7371F16">The Unicode character to search for.</T>
  <T ID="BDDD8A9E40D010EC">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="value"/&gt; matches the end of &lt;paramref name="span"/&gt;, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="B8450214E1E70044">The method performs an ordinal character comparison.</T>
  <T ID="C718E59CB1343B95">&lt;c&gt;false&lt;/c&gt; if &lt;paramref name="span"/&gt; contains a Unicode character, which doesn't belong to the ASCII character set, otherwise &lt;c&gt;true&lt;/c&gt;.</T>
  <T ID="F3D73D33361C7957">Returns the zero-based index position of the last occurrence of one of the specified characters in &lt;paramref name ="span"/&gt;. The search begins at a specified index and runs for a specified number of character positions backwards to the beginning of the span.</T>
  <T ID="88227507523F4210">The span to search.</T>
  <T ID="BDEC3C3D6EBA283">The start index of the search. The search is done backwards to the beginning of &lt;paramref name="span"/&gt;.</T>
  <T ID="C9A38DB754950E41">The number of characters positions to examine in &lt;paramref name="span"/&gt;.</T>
  <T ID="F2EE777BF13A4FB1">A read-only character span that contains the characters to search for.</T>
  <T ID="998BC860095F2955">The zero-based index of the last occurrence of one of the specified Unicode characters in the specified part of &lt;paramref name="span"/&gt; or -1 if none of these characters have been found in this area.</T>
  <T ID="BE35F1BA78B05FF1">If the length of &lt;paramref name="values"/&gt; is less than 5, the method uses MemoryExtensions.IndexOfAny&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt;, ReadOnlySpan&amp;lt;T&amp;gt;) for the comparison. If the length of &lt;paramref name ="values"/&gt; is greater, &lt;see cref ="M:System.String.IndexOfAny(System.Char[])"/&gt; is used to avoid performance issues.</T>
  <T ID="8B4108ABD1341667">&lt;para&gt;
&lt;paramref name="span"/&gt; is not &lt;see cref="P:System.ReadOnlySpan`1.Empty"/&gt; and &lt;paramref name ="startIndex"/&gt; is less than zero or greater than or equal to the length of &lt;paramref name="span"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="span"/&gt; is not &lt;see cref="P:System.ReadOnlySpan`1.Empty"/&gt; and &lt;paramref name ="startIndex"/&gt; - &lt;paramref name ="count"/&gt; + 1 is less than zero.
&lt;/para&gt;</T>
  <T ID="18CBBCFACE62C622">Indicates whether a read-only character span begins with the specified Unicode character.</T>
  <T ID="A9F37805BC26D7E7">The span to search.</T>
  <T ID="63433E75B7371F16">The Unicode character to search for.</T>
  <T ID="E84EC0D7CE18386A">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="value"/&gt; matches the beginning of &lt;paramref name="span"/&gt;, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="B09C0E6BE1E70044">The method performs an ordinal character comparison.</T>
  <T ID="86B95CEED2D0C957">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="value"/&gt; has been found, &lt;c&gt;false&lt;/c&gt; otherwise.</T>
  <T ID="9854134A237F854B">Indicates whether the &lt;see cref="T:System.Text.StringBuilder"/&gt; contains a newline character.</T>
  <T ID="EA92EBB9965635FC">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="3D8AEB512D6CD25C">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="builder"/&gt; contains a newline character, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="C65ABA39EF84B501">&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.</T>
  <T ID="BDB1D14B6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="EC0103D62DEF7FEA">Examines a section of the &lt;see cref ="T:System.Text.StringBuilder"/&gt; that begins at &lt;paramref name ="startIndex"/&gt; to see whether it contains a newline character.</T>
  <T ID="B747ACB2965635FC">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="FDA9B042481F4334">The zero-based index in &lt;paramref name ="builder"/&gt; at which the examination begins.</T>
  <T ID="E22D10A7E2B84EEF">&lt;c&gt;true&lt;/c&gt; if the specified section in &lt;paramref name="builder"/&gt; contains a newline character, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="3CB4083DEF84B501">&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.</T>
  <T ID="E72891816D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="A9F085B109F1669F">&lt;paramref name ="startIndex"/&gt; is less than zero or greater than the number of characters in &lt;paramref name ="builder"/&gt;.</T>
  <T ID="9C20C8B4965635FC">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="4387B1A8481F4334">The zero-based index in &lt;paramref name ="builder"/&gt; at which the examination begins.</T>
  <T ID="850BB41397929986">The number of character positions to examine.</T>
  <T ID="EF9D1DEAE2B84EEF">&lt;c&gt;true&lt;/c&gt; if the specified section in &lt;paramref name="builder"/&gt; contains a newline character, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="F7911FEEF84B501">&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.</T>
  <T ID="D6CA2BA16D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="220906456BCC0FF0">&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; or &lt;paramref name ="count"/&gt; are smaller than zero or larger than the number of characters in &lt;paramref name ="builder"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; + &lt;paramref name ="count"/&gt; is larger than the number of characters in &lt;paramref name ="builder"/&gt;.
&lt;/para&gt;</T>
  <T ID="F75F361A7148F8CB">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="builder"/&gt; contains a Unicode character, which doesn't belong to the ASCII character set; otherwise, &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="5FF3C6946D5264E0">&lt;c&gt;true&lt;/c&gt; if the specified section in &lt;paramref name="builder"/&gt; contains a Unicode character, which doesn't belong to the ASCII character set; otherwise, &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="197E22A96D5264E0">&lt;c&gt;true&lt;/c&gt; if the specified section in &lt;paramref name="builder"/&gt; contains a Unicode character, which doesn't belong to the ASCII character set; otherwise, &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="78DB74E50900624F">Indicates whether the &lt;see cref="T:System.Text.StringBuilder"/&gt; contains white space.</T>
  <T ID="FDD06FED965635FC">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="BFFD7B9CA490A9B7">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="builder"/&gt; contains white space, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="3F67674A748ACBD4">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)"/&gt; is used to identify white space.</T>
  <T ID="33CDECF6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="4BF22360749BE7A4">Examines a section of the &lt;see cref ="T:System.Text.StringBuilder"/&gt; that begins at &lt;paramref name ="startIndex"/&gt; to see whether it contains white space.</T>
  <T ID="74E41721965635FC">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="5E53A9EA481F4334">The zero-based index in &lt;paramref name ="builder"/&gt; at which the examination begins.</T>
  <T ID="E7FA781BD69B049E">&lt;c&gt;true&lt;/c&gt; if the specified section in &lt;paramref name="builder"/&gt; contains white space, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="BBB24601748ACBD4">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)"/&gt; is used to identify white space.</T>
  <T ID="EC164B8E6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="203A35A809F1669F">&lt;paramref name ="startIndex"/&gt; is less than zero or greater than the number of characters in &lt;paramref name ="builder"/&gt;.</T>
  <T ID="54BBFC2B20974C80">Examines a section of the &lt;see cref ="T:System.Text.StringBuilder"/&gt; that begins at &lt;paramref name ="startIndex"/&gt; and includes &lt;paramref name ="count"/&gt; characters to determine whether this section contains white space.</T>
  <T ID="CB0105A9965635FC">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="F259C9CA481F4334">The zero-based index in &lt;paramref name ="builder"/&gt; at which the examination begins.</T>
  <T ID="491110BE97929986">The number of character positions to examine.</T>
  <T ID="C0534EAAD69B049E">&lt;c&gt;true&lt;/c&gt; if the specified section in &lt;paramref name="builder"/&gt; contains white space, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="7D075D74748ACBD4">&lt;see cref="M:System.Char.IsWhiteSpace(System.Char)"/&gt; is used to identify white space.</T>
  <T ID="369462476D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="5ED41DAC6BCC0FF0">&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; or &lt;paramref name ="count"/&gt; are smaller than zero or larger than the number of characters in &lt;paramref name ="builder"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; + &lt;paramref name ="count"/&gt; is larger than the number of characters in &lt;paramref name ="builder"/&gt;.
&lt;/para&gt;</T>
  <T ID="4B51530AF168B704">Indicates whether the specified Unicode character matches the end of the &lt;see cref="T:System.Text.StringBuilder"/&gt;.</T>
  <T ID="A1CBEF5E1076575F">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; to search.</T>
  <T ID="C7E34A88B7371F16">The Unicode character to search for.</T>
  <T ID="5A89F6F3582462D3">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="value"/&gt; matches the end of &lt;paramref name="builder"/&gt;; otherwise, &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="F2C4D6F3E1E70044">The method performs an ordinal character comparison.</T>
  <T ID="41944D86D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="EA6DF9377083DC46">Replaces all newlines in &lt;paramref name="builder"/&gt; with &lt;paramref name="newLine"/&gt;.</T>
  <T ID="D7EA6E71A046D2F0">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="2266D3A2792AEBDC">A read-only character span that is the replacement for all newlines. If an empty span is passed to the parameter, all newline characters will be completely removed.</T>
  <T ID="A188003A0A4E719D">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="D342FF746D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="E18E3D474771213A">Examines a section of the &lt;see cref ="T:System.Text.StringBuilder"/&gt; that begins at &lt;paramref name ="startIndex"/&gt; and includes &lt;paramref name ="count"/&gt; characters to determine whether this section contains a newline character.</T>
  <T ID="C86E7834AF0C6641">Replaces in &lt;paramref name="builder"/&gt; all sequences of white space with &lt;paramref name="replacement"/&gt;.</T>
  <T ID="3BF8585B54973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="FCF8B3C954B36F59">A read-only character span that is the replacement for all white space sequences. If an empty span is passed to the parameter, each white space will be completely removed.</T>
  <T ID="6B46CF1F85C8117C">Pass &lt;c&gt;true&lt;/c&gt; to exclude newline characters from the replacement. The default value is &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="D957030300D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="E0B703DBDE74F327">&lt;para&gt;
The method uses &lt;see cref ="M:System.Char.IsWhiteSpace(System.Char)"/&gt; to identify white space characters and works more thoroughly with it than &lt;see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"&gt;Regex.Replace(string input, @"\s+", string replacement)&lt;/see&gt;.
&lt;/para&gt;
&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.
&lt;/para&gt;</T>
  <T ID="244C23B6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="12DBED4A10BC1B6D">Replaces in a section of &lt;paramref name="builder"/&gt;, which starts at &lt;paramref name="startIndex"/&gt; and extends to the end of &lt;paramref name="builder"/&gt;, all sequences of white space with &lt;paramref name="replacement"/&gt;.</T>
  <T ID="356AE17654973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="D9EC25DA54B36F59">A read-only character span that is the replacement for all white space sequences. If an empty span is passed to the parameter, each white space will be completely removed.</T>
  <T ID="28114863C7B5D9DB">The zero-based index in &lt;paramref name ="builder"/&gt; at which the replacement starts.</T>
  <T ID="A3DC2C1285C8117C">Pass &lt;c&gt;true&lt;/c&gt; to exclude newline characters from the replacement. The default value is &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="E898BAF700D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="8E128479DE74F327">&lt;para&gt;
The method uses &lt;see cref ="M:System.Char.IsWhiteSpace(System.Char)"/&gt; to identify white space characters and works more thoroughly with it than &lt;see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"&gt;Regex.Replace(string input, @"\s+", string replacement)&lt;/see&gt;.
&lt;/para&gt;
&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.
&lt;/para&gt;</T>
  <T ID="190228516D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="396A5B6709F1669F">&lt;paramref name ="startIndex"/&gt; is less than zero or greater than the number of characters in &lt;paramref name ="builder"/&gt;.</T>
  <T ID="3612E756DCC5D301">Replaces in a section of &lt;paramref name="builder"/&gt;, which starts at &lt;paramref name="startIndex"/&gt; and which is &lt;paramref name="count"/&gt; characters long, all sequences of white space with &lt;paramref name="replacement"/&gt;.</T>
  <T ID="16E2B31754973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="E819213254B36F59">A read-only character span that is the replacement for all white space sequences. If an empty span is passed to the parameter, each white space will be completely removed.</T>
  <T ID="472654CBC7B5D9DB">The zero-based index in &lt;paramref name ="builder"/&gt; at which the replacement starts.</T>
  <T ID="2D87469E97C447F3">The length of the specified section in &lt;paramref name="builder"/&gt; where replacement operations take place.</T>
  <T ID="633CAEE685C8117C">Pass &lt;c&gt;true&lt;/c&gt; to exclude newline characters from the replacement. The default value is &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="FDA4F8D00D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="E1D20A1DDE74F327">&lt;para&gt;
The method uses &lt;see cref ="M:System.Char.IsWhiteSpace(System.Char)"/&gt; to identify white space characters and works more thoroughly with it than &lt;see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"&gt;Regex.Replace(string input, @"\s+", string replacement)&lt;/see&gt;.
&lt;/para&gt;
&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.
&lt;/para&gt;</T>
  <T ID="64C6DDDD6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="140ADCBB23C66E9">&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; or &lt;paramref name ="count"/&gt; are smaller than zero or larger than the number of characters in &lt;paramref name ="builder"/&gt;
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="startIndex"/&gt; + &lt;paramref name ="count"/&gt; is larger than the number of characters in &lt;paramref name ="builder"/&gt;.
&lt;/para&gt;</T>
  <T ID="FD586F5AC89FEAEA">Indicates whether the specified Unicode character matches the beginning of &lt;paramref name="builder"/&gt;.</T>
  <T ID="EDF957D41076575F">The &lt;see cref="T:System.Text.StringBuilder"/&gt; whose content is examined.</T>
  <T ID="E6C7A198B7371F16">The Unicode character to search for.</T>
  <T ID="4870A2A18845964C">&lt;c&gt;true&lt;/c&gt; if value matches the beginning of &lt;paramref name="builder"/&gt;; otherwise, &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="B3CAB01BE1E70044">The method performs an ordinal character comparison.</T>
  <T ID="6353BD166D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="CEA090933022B9F6">Indicates whether the &lt;see cref="T:System.String"/&gt; contains a newline character.</T>
  <T ID="4603060EBA8A9E99">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="s"/&gt; contains a newline character, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="125707B860457753">&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.</T>
  <T ID="DE051C5ABA8A9E99">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="s"/&gt; contains white space, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="C430D16417455D23">&lt;c&gt;false&lt;/c&gt; if &lt;paramref name="s"/&gt; contains a Unicode character, which doesn't belong to the ASCII character set; otherwise, &lt;c&gt;true&lt;/c&gt;.</T>
  <T ID="7BA30B50E931C0D">Generates a &lt;see cref ="T:System.String"/&gt; in which all newlines are replaced by &lt;paramref name="newLine"/&gt;.</T>
  <T ID="3BAF2748B86216C5">The source &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="F4C23026792AEBDC">A read-only character span that is the replacement for all newlines. If an empty span is passed to the parameter, all newline characters will be completely removed.</T>
  <T ID="5FB379CACF1F5506">A new &lt;see cref ="T:System.String"/&gt; in which all newlines are replaced by &lt;paramref name="replacement"/&gt;. If &lt;paramref name="s"/&gt; doesn't contain a newline character, &lt;paramref name="s"/&gt; is returned.</T>
  <T ID="74F4517DE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="F0948A71C955B46E">Generates a &lt;see cref ="T:System.String"/&gt; in which all sequences of white space are replaced by &lt;paramref name="replacement"/&gt;.</T>
  <T ID="94B679DA75A68DC9">The source &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="CF16879754B36F59">A read-only character span that is the replacement for all white space sequences. If an empty span is passed to the parameter, each white space will be completely removed.</T>
  <T ID="6F001AA885C8117C">Pass &lt;c&gt;true&lt;/c&gt; to exclude newline characters from the replacement. The default value is &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="D3ED608E5B7084A5">A new &lt;see cref ="T:System.String"/&gt; in which all sequences of white space are replaced by &lt;paramref name="replacement"/&gt;. If &lt;paramref name="s"/&gt; doesn't contain a white space character, &lt;paramref name="s"/&gt; is returned.</T>
  <T ID="99D27A0CDE74F327">&lt;para&gt;
The method uses &lt;see cref ="M:System.Char.IsWhiteSpace(System.Char)"/&gt; to identify white space characters and works more thoroughly with it than &lt;see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"&gt;Regex.Replace(string input, @"\s+", string replacement)&lt;/see&gt;.
&lt;/para&gt;
&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters.
&lt;/para&gt;</T>
  <T ID="C3E8C622E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="6534B5ACC8C7C548">Examines a read-only &lt;see cref ="T:System.Byte"/&gt; span, that represents the contents of a text file, to see if it starts with a Byte Order Mark (BOM), and returns an appropriate code page. (The fallback value is 65001 for UTF-8.)</T>
  <T ID="7B69CC13BC26D7E7">The span to examine.</T>
  <T ID="1F15BE92A546B91">When the method returns, it contains the length of the BOM found or zero if no BOM was found. The parameter is passed uninitialized.</T>
  <T ID="85C1E8EF60461A52">An appropriate code page for &lt;paramref name ="data"/&gt; or the code page for UTF-8 (65001) if the code page could not be determined from &lt;paramref name ="data"/&gt;.</T>
  <T ID="2CFE46BDB12B1D76">The method recognizes the Byte Order Marks for the following character sets:
&lt;list type="bullet"&gt;
&lt;item&gt;
UTF-8
&lt;/item&gt;
&lt;item&gt;
UTF-16LE
&lt;/item&gt;
&lt;item&gt;
UTF-16BE
&lt;/item&gt;
&lt;item&gt;
UTF-32LE
&lt;/item&gt;
&lt;item&gt;
UTF-32BE
&lt;/item&gt;
&lt;item&gt;
UTF-7
&lt;/item&gt;
&lt;item&gt;
GB18030
&lt;/item&gt;
&lt;/list&gt;
&lt;para&gt;
UTF-16LE, UTF-16BE, UTF-32LE and UTF-32BE can also be recognized by the method from the data if there is no Byte Order Mark.
&lt;/para&gt;</T>
  <T ID="79D1C3AE3752C23C">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="21AEC538E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="2722DD483752C23C">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="15198242E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="4F4ACA503752C23C">The &lt;see cref="T:System.String"/&gt; to search.</T>
  <T ID="B972A178E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="839C46D99E894BB4">Generates an instance of the &lt;see cref ="T:System.Text.Encoding"/&gt; class from different data types.</T>
  <T ID="4885E2A938E6E305">The polyfills are available for .NET Framework 4.5 and .NET Standard 2.0.</T>
  <T ID="B9D8F45438E6E305">The polyfills are available for .NET Framework 4.5 and .NET Standard 2.0.</T>
  <T ID="9AC2CFDBB3965005">&lt;paramref name="count"/&gt; is negative.</T>
  <T ID="F3D6814CB3965005">&lt;paramref name="count"/&gt; is negative.</T>
  <T ID="32F7F46041FEADAA">Examines whether the Unicode character is an ASCII lowercase letter.</T>
  <T ID="8A7A026DF644E52B">The Unicode character to examine.</T>
  <T ID="5B12278D763A585E">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is an ASCII lowercase letter, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="360F8B8E83CECAC8">Examines whether the Unicode character is an ASCII uppercase letter.</T>
  <T ID="61304B0BF644E52B">The Unicode character to examine.</T>
  <T ID="628F28C554BD1294">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is an ASCII uppercase letter, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="5A8B97081BEA42EE">Examines whether the Unicode character is an ASCII letter.</T>
  <T ID="1F62B195F644E52B">The Unicode character to examine.</T>
  <T ID="4F271A6F2B0D6153">&lt;c&gt;true&lt;/c&gt; if &lt;paramref name="c"/&gt; is an ASCII letter, otherwise &lt;c&gt;false&lt;/c&gt;.</T>
  <T ID="F881BAF16B50802C">Extension methods, which act as Polyfills for the extension methods of the class &lt;see cref="T:FolkerKinzel.Strings.ReadOnlySpanExtension"/&gt;.</T>
  <T ID="BACC4ADC38E6E305">The Polyfills are available for .NET Framework 4.5 and .NET Standard 2.0.</T>
  <T ID="A64045454B4F8AA7">Specifies the  zero based index position of the last occurrence of a specified string in &lt;paramref name ="span"/&gt;. The search begins at a specified character position and runs backwards to the beginning of the character span for a specified number of character positions. A parameter specifies the type of comparison to be performed when searching for the specified string.</T>
  <T ID="A4B3A39A6CABE0FA">The span to search.</T>
  <T ID="DE2079B2C979162C">The &lt;see cref ="T:System.String"/&gt; to search for or &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="200E0058ED0DB2EA">The start index of the search. The search continues from &lt;paramref name ="startIndex"/&gt; to the beginning of &lt;paramref name ="span"/&gt;.</T>
  <T ID="B1445D42D1BD11B9">The number of character positions to examine.</T>
  <T ID="8301AA1EB914CC98">One of the enumeration values that specifies the rules for the search.</T>
  <T ID="B5759634285C1838">The zero-based start index of the &lt;paramref name ="value"/&gt; parameter if this string was found, or -1 if it was not found or &lt;paramref name ="span"/&gt; is empty.</T>
  <T ID="E8421D230D1A3DB5">&lt;para&gt;
&lt;paramref name ="count"/&gt; is a negative value
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="span"/&gt; is not &lt;see cref ="P:System.ReadOnlySpan`1.Empty"/&gt;, and &lt;paramref name ="startIndex"/&gt; is a negative value.
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="span"/&gt; is not &lt;see cref ="P:System.ReadOnlySpan`1.Empty"/&gt;, and &lt;paramref name ="startIndex"/&gt; is greater than the length of &lt;paramref name ="span"/&gt;.
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="span"/&gt; is not &lt;see cref ="P:System.ReadOnlySpan`1.Empty"/&gt;, and &lt;paramref name ="startIndex"/&gt; + 1 - &lt;paramref name ="count"/&gt; indicates a position that is not within &lt;paramref name ="span"/&gt;.
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="span"/&gt; is &lt;see cref ="P:System.ReadOnlySpan`1.Empty"/&gt;, and &lt;paramref name ="startIndex"/&gt; is less than -1 or greater than 0.
&lt;/para&gt;</T>
  <T ID="D8511BAE2140445F">&lt;paramref name="comparisonType"/&gt; is not a defined value of the &lt;see cref="T:System.StringComparison"/&gt; enumeration.</T>
  <T ID="886786C118CE5840">Specifies the zero-based index of the last occurrence of a specified string in &lt;paramref name ="span"/&gt;. A parameter specifies the type of search for the specified string.</T>
  <T ID="D0A3E4776CABE0FA">The character span to search.</T>
  <T ID="88A2ED75DD6392AE">The character sequence to search for.</T>
  <T ID="714057F7B914CC98">One of the enumeration values that specifies the rules for the search.</T>
  <T ID="FBC5D5C27A7A2FB0">The zero-based index of &lt;paramref name="value"/&gt; if that character sequence is found, or -1 if it is not.</T>
  <T ID="430B5052140445F">&lt;paramref name="comparisonType"/&gt; is not a defined value of the &lt;see cref="T:System.StringComparison"/&gt; enumeration.</T>
  <T ID="D60709BC18CE5840">Specifies the zero-based index of the last occurrence of a specified string in &lt;paramref name ="span"/&gt;. A parameter specifies the type of search for the specified string.</T>
  <T ID="93F584916CABE0FA">The character span to search.</T>
  <T ID="37B30B41C979162C">The &lt;see cref="T:System.String"/&gt; to search for or &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="E485C86CB914CC98">One of the enumeration values that specifies the rules for the search.</T>
  <T ID="ED61A1837A7A2FB0">The zero-based index of &lt;paramref name="value"/&gt; if that character sequence is found, or -1 if it is not.</T>
  <T ID="838017F32140445F">&lt;paramref name="comparisonType"/&gt; is not a defined value of the &lt;see cref="T:System.StringComparison"/&gt; enumeration.</T>
  <T ID="E0719FD07009DC21">Specifies the  zero based index position of the last occurrence of a specified string in &lt;paramref name ="span"/&gt;. The search begins at a specified character position and runs backwards to the beginning of the character span for a specified number of character positions. A parameter specifies the type of comparison to be performed when searching for the specified string.</T>
  <T ID="497F46006CABE0FA">The character span to search.</T>
  <T ID="FCDD900CFEBC85DC">The character span to search for.</T>
  <T ID="612327C9ED0DB2EA">The start index of the search. The search continues from &lt;paramref name ="startIndex"/&gt; to the beginning of &lt;paramref name ="span"/&gt;.</T>
  <T ID="1E1FAD7ED1BD11B9">The number of character positions to examine.</T>
  <T ID="9FDAEA51B914CC98">One of the enumeration values that specifies the rules for the search.</T>
  <T ID="C2012A5B285C1838">The zero-based start index of the &lt;paramref name ="value"/&gt; parameter if this string was found, or -1 if it was not found or &lt;paramref name ="span"/&gt; is empty.</T>
  <T ID="985334960D1A3DB5">&lt;para&gt;
&lt;paramref name ="count"/&gt; is a negative value
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="span"/&gt; is not &lt;see cref ="P:System.ReadOnlySpan`1.Empty"/&gt;, and &lt;paramref name ="startIndex"/&gt; is a negative value.
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="span"/&gt; is not &lt;see cref ="P:System.ReadOnlySpan`1.Empty"/&gt;, and &lt;paramref name ="startIndex"/&gt; is greater than the length of &lt;paramref name ="span"/&gt;.
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="span"/&gt; is not &lt;see cref ="P:System.ReadOnlySpan`1.Empty"/&gt;, and &lt;paramref name ="startIndex"/&gt; + 1 - &lt;paramref name ="count"/&gt; indicates a position that is not within &lt;paramref name ="span"/&gt;.
&lt;/para&gt;
&lt;para&gt;
- or -
&lt;/para&gt;
&lt;para&gt;
&lt;paramref name ="span"/&gt; is &lt;see cref ="P:System.ReadOnlySpan`1.Empty"/&gt;, and &lt;paramref name ="startIndex"/&gt; is less than -1 or greater than 0.
&lt;/para&gt;</T>
  <T ID="2405BC352140445F">&lt;paramref name="comparisonType"/&gt; is not a defined value of the &lt;see cref="T:System.StringComparison"/&gt; enum.</T>
  <T ID="FBFDCFB95DD2040D">Polyfill for the delegate System.Buffers.SpanAction&amp;lt;T,TArg&amp;gt;.</T>
  <T ID="7F2FAD66D1286A76">The type of the objects in the span.</T>
  <T ID="E8E57B67D15937A4">The type of object that represents the state. This type parameter is contravariant. This means that you can either use the specified type or a less derived type.</T>
  <T ID="D08AF3C6908AEB45">A span of objects of type &lt;typeparamref name ="T"/&gt;.</T>
  <T ID="172ADBB0E1AB5EA7">A state object of the type &lt;typeparamref name ="TArg"/&gt;.</T>
  <T ID="B3225CD6C6295F91">Simulates static methods of the &lt;see cref ="T:System.String"/&gt; class for .NET versions in which they are not available, and forwards the method calls in .NET versions in which the methods are available directly to the BCL methods.</T>
  <T ID="6F43A0568E44C6A9">Creates a new string with a specified length and, once created, initializes it using the specified callback.</T>
  <T ID="2A9BEA727505EC7A">The type of the element to be passed to &lt;paramref name ="action"/&gt;.</T>
  <T ID="509B72C79ACBF06B">The length of the &lt;see cref="T:System.String"/&gt; to be created.</T>
  <T ID="DE1F310C3A54F02F">The element to be passed to &lt;paramref name="action"/&gt;.</T>
  <T ID="54EB9A2D76E30BA7">A callback to initialize the string.</T>
  <T ID="1229E96D0ECBC9E3">The &lt;see cref="T:System.String"/&gt; created.</T>
  <T ID="460A5B3FC74AB846">The method simulates the static method String.Create&amp;lt;TState&amp;gt;(int, TState, SpanAction&amp;lt;char,TState&amp;gt;). In newer .NET versions, the call is forwarded directly to the existing method of the &lt;see cref ="T:System.String"/&gt; class. In .NET Framework and .NET Standard 2.0, the simulation makes it possible, when creating short &lt;see cref ="T:System.String"/&gt;s, to have only one heap allocation.</T>
  <T ID="B534278B1BC798A6">&lt;paramref name="action"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="6D0A4F865E848455">&lt;paramref name="length"/&gt; is negative.</T>
  <T ID="B574CC69B2CE5275">Concatenates the string representations of four specified read-only character spans.</T>
  <T ID="139C60C03B003AE9">The first read-only character span to concatenate.</T>
  <T ID="70F4EC25B442CD86">The second read-only character span to concatenate.</T>
  <T ID="58EB49F690910F18">The third read-only character span to concatenate.</T>
  <T ID="B643D55BF3415BCC">The fourth read-only character span to concatenate.</T>
  <T ID="75BED80C856802A8">The concatenated string representations of the values of &lt;paramref name="str0"/&gt;, &lt;paramref name="str1"/&gt;, &lt;paramref name="str2"/&gt; and &lt;paramref name="str3"/&gt;.</T>
  <T ID="71ED4D51F91B31DE">Concatenates the string representations of three specified read-only character spans.</T>
  <T ID="13960EB53B003AE9">The first read-only character span to concatenate.</T>
  <T ID="13960EB4B442CD86">The second read-only character span to concatenate.</T>
  <T ID="13960EB390910F18">The third read-only character span to concatenate.</T>
  <T ID="540D5A128C0B7BCD">The concatenated string representations of the values of &lt;paramref name="str0"/&gt;, &lt;paramref name="str1"/&gt; and &lt;paramref name="str2"/&gt;.</T>
  <T ID="805A0FCC55B10B29">Concatenates the string representations of two specified read-only character spans.</T>
  <T ID="4A8C40D7B442CD86">The first read-only character span to concatenate.</T>
  <T ID="F7C14B0D079B7727">The concatenated string representations of the values of &lt;paramref name="str0"/&gt; and &lt;paramref name="str1"/&gt;.</T>
  <T ID="A7E4CC3C3B003AE9">The first read-only character span to concatenate.</T>
  <T ID="514636D11598B4BC">Replaces all newlines in &lt;paramref name="builder"/&gt; with &lt;paramref name="newLine"/&gt;.</T>
  <T ID="CDF38C3654973274">The &lt;see cref ="T:System.Text.StringBuilder"/&gt; whose content is changed.</T>
  <T ID="F8A46D3AA30B8D4B">The text to use as replacement. If &lt;paramref name="replacementText"/&gt; is &lt;c&gt;null&lt;/c&gt; or &lt;see cref="F:System.String.Empty"/&gt;, all newlines will be removed.</T>
  <T ID="84F04AA400D33280">A reference to &lt;paramref name ="builder"/&gt;.</T>
  <T ID="6279F05EFE54D699">&lt;para&gt;
The list of recognized newline sequences is:
&lt;/para&gt;
&lt;list type="bullet"&gt;
&lt;item&gt;
CR (U+000D)
&lt;/item&gt;
&lt;item&gt;
LF (U+000A)
&lt;/item&gt;
&lt;item&gt;
CRLF (U+000D U+000A)
&lt;/item&gt;
&lt;item&gt;
NEL (U+0085)
&lt;/item&gt;
&lt;item&gt;
LS (U+2028)
&lt;/item&gt;
&lt;item&gt;
FF (U+000C)
&lt;/item&gt;
&lt;item&gt;
PS (U+2029)
&lt;/item&gt;
&lt;/list&gt;
&lt;para&gt;
This list is given by the Unicode Standard, Sec. 5.8, Recommendation R4 and Table 5-2.
&lt;/para&gt;</T>
  <T ID="17DACBFE6D12D017">&lt;paramref name="builder"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="A19DCD7DB36D6F89">Replaces all newlines in &lt;paramref name="s"/&gt; with &lt;see cref="P:System.Environment.NewLine"/&gt;.</T>
  <T ID="EF277F475A68DC9">The source &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="C1D6D7AEC433B04B">A &lt;see cref="T:System.String"/&gt; whose contents match the content of &lt;paramref name="s"/&gt;, but with all newline sequences replaced with &lt;see cref="P:System.Environment.NewLine"/&gt;.</T>
  <T ID="7116F0268ABB10AD">&lt;para&gt;
This is a polyfill for the .NET 6.0 method String.ReplaceLineEndings(). The method should therefore only be used in the extension method syntax. It throws a &lt;see cref ="T:System.NullReferenceException"/&gt; if &lt;paramref name ="s"/&gt; is &lt;c&gt;null&lt;/c&gt; in order to show identical behavior to the original .NET method.
&lt;/para&gt;
&lt;para&gt;
The method searches for all newline sequences within &lt;paramref name ="s"/&gt; and canonicalizes them to match the newline sequence for the current environment. For example, when running on Windows, all occurrences of non-Windows Newline sequences are replaced with the sequence CRLF. When running on Unix, all occurrences of non-Unix Newline sequences are replaced with a single LF character.
&lt;/para&gt;
&lt;para&gt;
The list of recognized newline sequences is:
&lt;/para&gt;
&lt;list type ="bullet"&gt;
&lt;item&gt;
CR (U+000D)
&lt;/item&gt;
&lt;item&gt;
LF (U+000A)
&lt;/item&gt;
&lt;item&gt;
CRLF (U+000D U+000A)
&lt;/item&gt;
&lt;item&gt;
NEL (U+0085)
&lt;/item&gt;
&lt;item&gt;
LS (U+2028)
&lt;/item&gt;
&lt;item&gt;
FF (U+000C)
&lt;/item&gt;
&lt;item&gt;
PS (U+2029)
&lt;/item&gt;
&lt;/list&gt;
&lt;para&gt;
This list is specified by the Unicode standard (Sec. 5.8, Recommendation R4 and Table 5-2).
&lt;/para&gt;</T>
  <T ID="75FAD01BE78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="21DAEBBA93405BD7">Replaces all newlines in &lt;paramref name="s"/&gt; with &lt;paramref name="replacementText"/&gt;.</T>
  <T ID="8CA36E8375A68DC9">The source &lt;see cref="T:System.String"/&gt;.</T>
  <T ID="6FA2382C1AE3BC4">The text to use as replacement. If &lt;paramref name="replacementText"/&gt; is &lt;see cref="F:System.String.Empty"/&gt;, all newline sequences within &lt;paramref name="s"/&gt; will be removed.</T>
  <T ID="15D3154B4C936CC3">A &lt;see cref="T:System.String"/&gt; whose contents match the content of &lt;paramref name="s"/&gt;, but with all newline sequences replaced with &lt;paramref name="replacementText"/&gt;.</T>
  <T ID="A90534073D061D93">&lt;para&gt;
This is a polyfill for the .NET 6.0 method String.ReplaceLineEndings(String). The method should therefore only be used in the extension method syntax. It throws a &lt;see cref ="T:System.NullReferenceException"/&gt; if &lt;paramref name ="s"/&gt; is &lt;c&gt;null&lt;/c&gt; in order to show identical behavior to the original .NET method.
&lt;/para&gt;
&lt;para&gt;
The method searches for all newline sequences within &lt;paramref name ="s"/&gt; and canonicalizes them to match &lt;paramref name="replacementText"/&gt;.
&lt;/para&gt;
&lt;para&gt;
The list of recognized newline sequences is:
&lt;/para&gt;
&lt;list type ="bullet"&gt;
&lt;item&gt;
CR (U+000D)
&lt;/item&gt;
&lt;item&gt;
LF (U+000A)
&lt;/item&gt;
&lt;item&gt;
CRLF (U+000D U+000A)
&lt;/item&gt;
&lt;item&gt;
NEL (U+0085)
&lt;/item&gt;
&lt;item&gt;
LS (U+2028)
&lt;/item&gt;
&lt;item&gt;
FF (U+000C)
&lt;/item&gt;
&lt;item&gt;
PS (U+2029)
&lt;/item&gt;
&lt;/list&gt;
&lt;para&gt;
This list is specified by the Unicode standard (Sec. 5.8, Recommendation R4 and Table 5-2).
&lt;/para&gt;</T>
  <T ID="F2976A3E78A6666">&lt;paramref name="s"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="4E3CDC1D6FA65FA6">&lt;paramref name="replacementText"/&gt; is &lt;c&gt;null&lt;/c&gt;.</T>
  <T ID="9578735094028624">&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters. The sequences CRLF and LFCR are treated as one line break.
&lt;/para&gt;
&lt;note type ="caution"&gt;
This method differs from &lt;see cref ="M:FolkerKinzel.Strings.StringBuilderExtension.ReplaceLineEndings(System.Text.StringBuilder,System.String)"/&gt; in that it also treats LFCR sequences and vertical tab (VT: U+000B ) as a line break.
&lt;/note&gt;
&lt;para&gt;
This overload is useful because the support for the implicit conversion from &lt;see cref ="T:System.String"/&gt; to &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; only starts with .NET Standard 2.1.
&lt;/para&gt;</T>
  <T ID="B10626F549892560">&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters. The sequences CRLF and LFCR are treated as one line break.
&lt;/para&gt;
&lt;note type ="caution"&gt;
This method differs from &lt;see cref="M:FolkerKinzel.Strings.StringExtension.ReplaceLineEndings(System.String,System.String)"/&gt; in that it also treats LFCR sequences and vertical tab (VT: U+000B ) as a line break.
&lt;/note&gt;
&lt;para&gt;
This overload is useful because the support for the implicit conversion from &lt;see cref ="T:System.String"/&gt; to &lt;see cref="T:System.ReadOnlySpan`1"&gt;ReadOnlySpan&amp;lt;Char&amp;gt;&lt;/see&gt; only starts with .NET Standard 2.1.
&lt;/para&gt;</T>
  <T ID="C86629FA56BB535A">&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters. The sequences CRLF and LFCR are treated as one line break.
&lt;/para&gt;
&lt;note type ="caution"&gt;
This method differs from &lt;see cref ="M:FolkerKinzel.Strings.StringBuilderExtension.ReplaceLineEndings(System.Text.StringBuilder,System.String)"/&gt; in that it also treats LFCR sequences and vertical tab (VT: U+000B ) as a line break.
&lt;/note&gt;</T>
  <T ID="C7B32B5253F206EB">&lt;para&gt;
&lt;see cref ="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)"/&gt; is used to identify newline characters. The sequences CRLF and LFCR are treated as one line break.
&lt;/para&gt;
&lt;note type ="caution"&gt;
This method differs from &lt;see cref="M:FolkerKinzel.Strings.StringExtension.ReplaceLineEndings(System.String,System.String)"/&gt; in that it also treats LFCR sequences and vertical tab (VT: U+000B ) as a line break.
&lt;/note&gt;</T>
</Tsltn>