<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>FolkerKinzel.Strings</name>
  </assembly>
  <members>
    <member name="T:FolkerKinzel.Strings.Base64">
      <summary>Static class that provides methods to encode and decode strings in Base64 format.</summary>
    </member>
    <member name="M:FolkerKinzel.Strings.Base64.Encode(System.Collections.Generic.IEnumerable{System.Byte},System.Base64FormattingOptions)">
      <summary>Converts a collection of Bytes into a corresponding Base64 string. You can determine, whether line breaks are to be inserted into the return value.</summary>
      <param name="bytes">A collection of Bytes.</param>
      <param name="options">One of the enumeration values, which specify whether or not line breaks are to be inserted into the return value. The default is <see cref="F:System.Base64FormattingOptions.None" />.</param>
      <returns>The string representation of the elements in <paramref name="bytes" /> as Base64.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a defined <see cref="T:System.Base64FormattingOptions" /> value.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Base64.Encode(System.Byte[],System.Base64FormattingOptions)">
      <summary>Converts an Array of Bytes into a corresponding Base64 string. You can determine, whether line breaks are to be inserted into the return value.</summary>
      <param name="bytes">An Array of Bytes.</param>
      <param name="options">One of the enumeration values, which specify whether or not line breaks are to be inserted into the return value. The default is <see cref="F:System.Base64FormattingOptions.None" />.</param>
      <returns>The string representation of the elements in <paramref name="bytes" /> as Base64.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a defined <see cref="T:System.Base64FormattingOptions" /> value.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
      <summary>Converts a subset of an Array of Bytes to their equivalent Base64-encoded string representation. Parameters specify the subset as an offset in the input array, the number of bytes to be converted, and whether newlines are to be inserted in the return value.</summary>
      <param name="bytes">A Byte Array.</param>
      <param name="offset">An offset in <paramref name="bytes" />.</param>
      <param name="length">The number of Bytes that are to be converted.</param>
      <param name="options">One of the enumeration values, which specify whether or not line breaks are to be inserted into the return value. The default is <see cref="F:System.Base64FormattingOptions.None" />.</param>
      <returns>The Base64 string representation of <paramref name="length" /> Bytes taken from the Array <paramref name="bytes" /> beginning at the index <paramref name="offset" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="offset" /> or <paramref name="length" /> are negative values.
</para>
        <para>
- oder -
</para>
        <para>
          <paramref name="offset" /> plus <paramref name="length" /> is greater than the length of <paramref name="bytes" />.
</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a defined <see cref="T:System.Base64FormattingOptions" /> value.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Base64.Encode(System.ReadOnlySpan{System.Byte},System.Base64FormattingOptions)">
      <summary>Converts a read-only span of Bytes into a corresponding Base64 string. Optional you can determine, whether line breaks are to be inserted into the return value.</summary>
      <param name="bytes">A read-only span of Bytes.</param>
      <param name="options">One of the enumeration values, which specify whether or not line breaks are to be inserted into the return value. The default is <see cref="F:System.Base64FormattingOptions.None" />.</param>
      <returns>The Base64 string reprensentation of the elements in <paramref name="bytes" />.</returns>
      <remarks>
        <note type="note">
In the  .NET-Framework 4.5 and .NET Standard 2.0 versions of the nuget package, the method has to allocate a new Array. For this reason it is recommended, to use the overloads <see cref="M:FolkerKinzel.Strings.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)" /> or <see cref="M:FolkerKinzel.Strings.Base64.Encode(System.Byte[],System.Base64FormattingOptions)" /> when supporting old framework versions.
</note>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a defined <see cref="T:System.Base64FormattingOptions" /> value.</exception>
      <exception cref="T:System.OutOfMemoryException">The output length was greater than <see cref="F:System.Int32.MaxValue">Int32.MaxValue</see>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Base64.GetBytes(System.String)">
      <summary>Converts the Base64-encoded string into a byte array.</summary>
      <param name="base64">The string to convert.</param>
      <returns>A byte array decoded from <paramref name="base64" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="base64" /> is <c>null</c>.</exception>
      <exception cref="T:System.FormatException">
        <para>
The length of <paramref name="base64" /> with ignored white space characters is not zero or a multiple of 4.
</para>
        <para>
- oder -
</para>
        <para>
The format of <paramref name="base64" /> is invalid. <paramref name="base64" /> contains a non-base64 character, more than two padding characters, or a non-space character between the padding characters.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Base64.GetBytes(System.String,FolkerKinzel.Strings.Base64ParserOptions)">
      <summary>Converts a Base64-string into a corresponding byte array and allows to pass options for the conversion.</summary>
      <param name="base64">The string to convert.</param>
      <param name="options">Options for the conversion.</param>
      <returns>A byte array decoded from <paramref name="base64" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="base64" /> is <c>null</c>.</exception>
      <exception cref="T:System.FormatException">Depending on the conversion options specified with <paramref name="options" />, <paramref name="base64" /> cannot be converted into a <see cref="T:System.Byte" /> array .</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Base64.GetBytes(System.ReadOnlySpan{System.Char},FolkerKinzel.Strings.Base64ParserOptions)">
      <summary>Converts a Base64-encoded read-only character span into a corresponding byte array and allows to pass options for the conversion.</summary>
      <param name="base64">The read-only character span to convert.</param>
      <param name="options">Options for the conversion.</param>
      <returns>A byte array decoded from <paramref name="base64" />.</returns>
      <exception cref="T:System.FormatException">Depending on the conversion options specified with <paramref name="options" />, <paramref name="base64" /> cannot be converted into a <see cref="T:System.Byte" /> array .</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Base64.GetBytes(System.ReadOnlySpan{System.Char})">
      <summary>Converts a Base64-encoded read-only character span into a corresponding byte array.</summary>
      <param name="base64">The read-only character span to convert.</param>
      <returns>A byte array decoded from <paramref name="base64" />.</returns>
      <exception cref="T:System.FormatException">
        <para>
The length of <paramref name="base64" /> with ignored white space characters is not zero or a multiple of 4.
</para>
        <para>
- oder -
</para>
        <para>
The format of <paramref name="base64" /> is invalid. <paramref name="base64" /> contains a non-base64 character, more than two padding characters, or a non-space character between the padding characters.
</para>
      </exception>
    </member>
    <member name="T:FolkerKinzel.Strings.Base64ParserOptions">
      <summary>Named constants to specify options for the parsing of Base64 encoded strings. The flags can be combined.</summary>
    </member>
    <member name="F:FolkerKinzel.Strings.Base64ParserOptions.None">
      <summary>None of the flags has been set.</summary>
    </member>
    <member name="F:FolkerKinzel.Strings.Base64ParserOptions.AcceptMissingPadding">
      <summary>Setting the flag lets the parser automatically add missing padding characters at the end of the Base64 encoded data.</summary>
    </member>
    <member name="F:FolkerKinzel.Strings.Base64ParserOptions.AcceptBase64Url">
      <summary>Setting the flag lets the parser accept Base64Url too (RFC 4648, chapter 5). (The flag should normally be combined with <see cref="F:FolkerKinzel.Strings.Base64ParserOptions.AcceptMissingPadding" />.)</summary>
    </member>
    <member name="T:FolkerKinzel.Strings.CharExtension">
      <summary>Extension methods for the <see cref="T:System.Char" /> structure.</summary>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsAsciiLowerCaseLetter(System.Char)">
      <summary>Examines whether the Unicode character is an ASCII lowercase letter.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is an ASCII lowercase letter, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsAsciiUpperCaseLetter(System.Char)">
      <summary>Examines whether the Unicode character is an ASCII uppercase letter.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is an ASCII uppercase letter, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsAsciiLetter(System.Char)">
      <summary>Examines whether the Unicode character is an ASCII letter.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is an ASCII letter, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.ParseHexDigit(System.Char)">
      <summary>Gets the value of a hexadecimal digit.</summary>
      <param name="digit">The hexadecimal digit to convert (0-9, a-f, A-F).</param>
      <returns>A number from 0 to 15 that corresponds to the specified hexadecimal digit.</returns>
      <remarks>Calls <see cref="M:System.Uri.FromHex(System.Char)" />.</remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> is not a valid hexadecimal digit (0-9, a-f, A-F).</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.TryParseHexDigit(System.Char,System.Nullable{System.Int32}@)">
      <summary>Tries to interpret a character as a hexadecimal digit and to return the value that this hexadecimal digit represents.</summary>
      <param name="digit">The Unicode character to analyze.</param>
      <param name="value">After the method has been successfully completed, it contains the value that <paramref name="digit" /> represents as a hexadecimal digit, otherwise <c>null</c>. The parameter is passed uninitialized.</param>
      <returns>
        <c>true</c> if <paramref name="digit" /> represents a hexadecimal digit, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.TryParseDecimalDigit(System.Char,System.Nullable{System.Int32}@)">
      <summary>Tries to interpret a character as a decimal digit (0-9) and to return the value that this decimal digit represents.</summary>
      <param name="digit">The Unicode character to analyze.</param>
      <param name="value">After the method has been successfully completed, it contains the value that <paramref name="digit" /> represents as a decimal digit, otherwise <c>null</c>. The parameter is passed uninitialized.</param>
      <returns>
        <c>true</c> if <paramref name="digit" /> represents a decimal digit, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.TryParseBinaryDigit(System.Char,System.Nullable{System.Int32}@)">
      <summary>Tries to interpret a character as a binary digit (0 or 1) and to return the value that this binary digit represents.</summary>
      <param name="digit">The Unicode character to analyze.</param>
      <param name="value">After the method has been successfully completed, it contains the value that <paramref name="digit" /> represents as a binary digit, otherwise <c>null</c>. The parameter is passed uninitialized.</param>
      <returns>
        <c>true</c> if <paramref name="digit" /> represents a binary digit, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.ParseBinaryDigit(System.Char)">
      <summary>Gets the value of a binary digit.</summary>
      <param name="digit">The binary digit to convert (0 or 1).</param>
      <returns>A number that corresponds to the specified binary digit.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> is not a valid binary digit (0 or 1).</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.ParseDecimalDigit(System.Char)">
      <summary>Gets the value of a decimal digit (0-9).</summary>
      <param name="digit">The decimal digit to convert (0-9).</param>
      <returns>A number from 0 to 9 that corresponds to the specified decimal digit.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> is not a valid decimal digit (0-9).</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsAscii(System.Char)">
      <summary>Indicates whether the Unicode character belongs to the ASCII character set.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is part of the ASCII character set, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsDecimalDigit(System.Char)">
      <summary>Indicates whether the Unicode character is a decimal digit (0-9).</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="digit" /> represents a decimal digit, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsHexDigit(System.Char)">
      <summary>Indicates whether the Unicode character is a hexadecimal digit (0-9, a-f, A-F).</summary>
      <param name="character">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="character" /> represents a hexadecimal digit, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Uri.IsHexDigit(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsBinaryDigit(System.Char)">
      <summary>Indicates whether the Unicode character is a binary digit (0 or 1).</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="digit" /> represents a binary digit, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsControl(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as a control character.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is categorized as a control character, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsControl(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsDigit(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as a member of the Unicode category "Decimal Digit Number".</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c>, if <paramref name="c" /> is categorized as a member of the Unicode category "Decimal Digit Number", otherwise <c>false</c>.</returns>
      <remarks>
        <para>
Calls the <see cref="M:System.Char.IsDigit(System.Char)" /> method.
</para>
        <note type="important">
The Unicode category "Decimal Digit Number" includes many more characters than the digits 0-9. Use the <see cref="M:FolkerKinzel.Strings.CharExtension.IsDecimalDigit(System.Char)" /> method if you want to check for the characters 0-9.
</note>
      </remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsHighSurrogate(System.Char)">
      <summary>Indicates whether the Unicode character is a high surrogate.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is a high surrogate, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsHighSurrogate(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsLowSurrogate(System.Char)">
      <summary>Indicates whether the Unicode character is a low surrogate.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is a low surrogate, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsLowSurrogate(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsSurrogate(System.Char)">
      <summary>Indicates whether the Unicode character has a surrogate code unit.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" />  has a surrogate code unit, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsSurrogate(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsLetter(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as a Unicode letter.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is categorized as a Unicode letter, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsLetter(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsLetterOrDigit(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as a Unicode letter or decimal digit.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is categorized as a Unicode letter or decimal digit, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsLetterOrDigit(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsLower(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as a lowercase letter.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is categorized as a lowercase letter, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsLower(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsUpper(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as a uppercase letter.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is categorized as a uppercase letter, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsUpper(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsNumber(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as a number.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is categorized as a number, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsNumber(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsPunctuation(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as a punctuation mark.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is categorized as a punctuation mark, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsPunctuation(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsSeparator(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as a separator character.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is categorized as a separator character, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsSeparator(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsSymbol(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as a symbol character.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is categorized as a symbol character, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsSymbol(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsWhiteSpace(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as white space.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is categorized as white space, otherwise <c>false</c>.</returns>
      <remarks>Calls <see cref="M:System.Char.IsWhiteSpace(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.ToLowerInvariant(System.Char)">
      <summary>Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The lowercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
      <remarks>Calls <see cref="M:System.Char.ToLowerInvariant(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.ToUpperInvariant(System.Char)">
      <summary>Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The uppercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</returns>
      <remarks>Calls <see cref="M:System.Char.ToUpperInvariant(System.Char)" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)">
      <summary>Indicates whether the Unicode character is categorized as a newline character.</summary>
      <param name="c">The Unicode character to examine.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> is categorized as a newline character, otherwise <c>false</c>.</returns>
      <remarks>
        <para>
The following characters are recognized as newline characters:
</para>
        <list type="bullet">
          <item>
CR: Carriage Return (U+000D)
</item>
          <item>
LF: Line Feed (U+000A)
</item>
          <item>
VT: Vertical Tab (U+000B)
</item>
          <item>
FF: Form Feed (U+000C)
</item>
          <item>
NEL: Next Line (U+0085)
</item>
          <item>
LS: Line Separator (U+2028)
</item>
          <item>
PS: Paragraph Separator (U+2029)
</item>
        </list>
      </remarks>
    </member>
    <member name="T:FolkerKinzel.Strings.DecoderValidationFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an output character. The fallback emits a replacement character (⬜) instead of a decoded input byte sequence and informs in its property <see cref="P:FolkerKinzel.Strings.DecoderValidationFallback.HasError" /> whether an error has occurred.</summary>
      <remarks>
        <para>
Use <see cref="T:FolkerKinzel.Strings.DecoderValidationFallback" /> objects with the methods
</para>
        <list type="bullet">
          <item>
            <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)"> Encoding.GetEncoding(int, EncoderFallback, DecoderFallback)</see>,
</item>
          <item>
            <see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)"> Encoding.GetEncoding(string, EncoderFallback, DecoderFallback)</see> or
</item>
          <item>
            <see cref="M:FolkerKinzel.Strings.TextEncodingConverter.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback,System.Boolean)"> TextEncodingConverter.GetEncoding(int, EncoderFallback, DecoderFallback, bool)</see> and
</item>
          <item>
            <see cref="M:FolkerKinzel.Strings.TextEncodingConverter.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback,System.Boolean)"> TextEncodingConverter.GetEncoding(int, EncoderFallback, DecoderFallback, bool)</see>.
</item>
        </list>
        <para>
The <see cref="T:FolkerKinzel.Strings.DecoderValidationFallback" /> object is passed as a <see cref="T:System.Text.DecoderFallback" /> object.
</para>
        <para>
The <see cref="T:FolkerKinzel.Strings.DecoderValidationFallback" /> class behaves like the <see cref="T:System.Text.DecoderReplacementFallback" /> class, except that it informs after use in its <see cref="P:FolkerKinzel.Strings.DecoderValidationFallback.HasError" /> property whether an error has occurred. To evaluate the property, you should keep a reference to the <see cref="T:FolkerKinzel.Strings.DecoderValidationFallback" /> object or cast the return value of the <see cref="P:System.Text.Encoding.DecoderFallback">Encoding.DecoderFallback</see> property to the Type <see cref="T:FolkerKinzel.Strings.DecoderValidationFallback" /> .
</para>
        <para>
If you use the <see cref="T:FolkerKinzel.Strings.DecoderValidationFallback" /> object multiple times, you can use the <see cref="M:FolkerKinzel.Strings.DecoderValidationFallback.Reset" /> method to reset the <see cref="P:FolkerKinzel.Strings.DecoderValidationFallback.HasError" /> property.
</para>
      </remarks>
    </member>
    <member name="P:FolkerKinzel.Strings.DecoderValidationFallback.HasError">
      <summary>Indicates whether a decoding error occurred.</summary>
      <value>
        <c>true</c> if an error occurred, <c>false</c> otherwise.</value>
    </member>
    <member name="M:FolkerKinzel.Strings.DecoderValidationFallback.Reset">
      <summary>Resets the <see cref="P:FolkerKinzel.Strings.DecoderValidationFallback.HasError" /> property to its initial value <c>false</c>.</summary>
    </member>
    <member name="P:FolkerKinzel.Strings.DecoderValidationFallback.MaxCharCount">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Strings.DecoderValidationFallback.CreateFallbackBuffer">
      <inheritdoc />
    </member>
    <member name="T:FolkerKinzel.Strings.DecoderValidationFallback.ValidatorFallbackBuffer">
            ///////////////////////////////////////////////////////////////
        </member>
    <member name="T:FolkerKinzel.Strings.EncodingExtension">
      <summary>Extension methods for the <see cref="T:System.Text.Encoding" /> class.</summary>
    </member>
    <member name="M:FolkerKinzel.Strings.EncodingExtension.GetBytes(System.Text.Encoding,System.ReadOnlySpan{System.Char})">
      <summary>Encodes all characters of the read-only character span to a corresponding byte sequence.</summary>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> object on which the extension method is executed.</param>
      <param name="chars">The read-only character span that provides the characters that have to be encoded.</param>
      <returns>A byte array containing the results of the encoding.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.EncodingExtension.GetString(System.Text.Encoding,System.ReadOnlySpan{System.Byte})">
      <summary>Decodes all bytes in the specified read-only span into a string.</summary>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> object on which the extension method is executed.</param>
      <param name="bytes">A read-only byte span that is converted into a string.</param>
      <returns>A string decoded from the specified byte span.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="encoding" /> is <c>null</c>.</exception>
      <remarks>This method is a polyfill for the instance method of current .NET versions. Use this method in the extension method syntax only.</remarks>
    </member>
    <member name="T:FolkerKinzel.Strings.FileInfoExtension">
      <summary>Extension methods for the <see cref="T:System.IO.FileInfo" /> class.</summary>
    </member>
    <member name="M:FolkerKinzel.Strings.FileInfoExtension.IsUtf8(System.IO.FileInfo,System.Int32)">
      <summary>Tests whether the portion of the file specified by <paramref name="fileInfo" /> that extends at least <paramref name="count" /> characters from the beginning of the file is UTF-8 text. The method includes the byte order mark (BOM) in the check.</summary>
      <param name="fileInfo">A <see cref="T:System.IO.FileInfo" /> object that references the file to check.</param>
      <param name="count">The minimum number of characters to check. If the parameter is passed a negative number or if <paramref name="count" /> is greater than the length of the data in the specified file, the entire file is checked. If <c>0</c> is passed to the parameter, the method only checks the byte order mark (BOM).</param>
      <returns>
        <c>true</c> if the checked file section represents UTF-8 text, <c>false</c> otherwise. In any case, if the method finds a UTF-8 BOM, it returns <c>true</c>. If <paramref name="count" /> is <c>0</c> and no UTF-8 BOM is found, <c>false</c> is returned.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is <c>null</c>.</exception>
      <exception cref="T:System.IO.IOException">I/O error.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.FileInfoExtension.IsUtf8Valid(System.IO.FileInfo,System.Int32)">
      <summary>Tests whether the portion of the file specified by <paramref name="fileInfo" /> that extends at least <paramref name="count" /> characters from the beginning of the file represents valid UTF-8.</summary>
      <param name="fileInfo">A <see cref="T:System.IO.FileInfo" /> object that references the file to check.</param>
      <param name="count">The minimum number of characters to check. If a negative number is passed to the parameter (default) or if <paramref name="count" /> is greater than the length of the data in the specified file, the entire file is checked. The value <c>0</c> is not allowed.</param>
      <returns>
        <c>true</c> if the checked file section represents valid UTF-8, <c>false</c> otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is <c>0</c>.</exception>
      <exception cref="T:System.IO.IOException">I/O error.</exception>
    </member>
    <member name="T:FolkerKinzel.Strings.HashType">
      <summary>Named constants to specify the type of hashcode for Char sequences.</summary>
    </member>
    <member name="F:FolkerKinzel.Strings.HashType.Ordinal">
      <summary>Ordinal comparison of the characters.</summary>
    </member>
    <member name="F:FolkerKinzel.Strings.HashType.OrdinalIgnoreCase">
      <summary>Ordinal comparison of the characters without taking upper and lower case into account.</summary>
    </member>
    <member name="F:FolkerKinzel.Strings.HashType.AlphaNumericIgnoreCase">
      <summary>Only letters and decimal digits are hashed. The case is not considered.</summary>
    </member>
    <member name="T:FolkerKinzel.Strings.Intls.Utf8Validator">
      <summary>Provides methods to examine data in order to see whether it is UTF-8 text.</summary>
    </member>
    <member name="M:FolkerKinzel.Strings.Intls.Utf8Validator.#ctor">
      <summary>ctor</summary>
    </member>
    <member name="M:FolkerKinzel.Strings.Intls.Utf8Validator.IsUtf8(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>Tests whether the byte sequence of <paramref name="stream" /> that starts with the current <see cref="P:System.IO.Stream.Position" /> and is at least <paramref name="count" /> characters long is UTF-8 text. The method takes the Byte Order Mark (BOM) into account.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to examine.</param>
      <param name="count">The number of characters to examine at least. If <paramref name="count" /> is larger than <paramref name="stream" /> has data, <paramref name="stream" /> is examined until EOF. Passing a negative number to this parameter lets the method examine the whole <paramref name="stream" /> from the current position until EOF. Passing <c>0</c> lets the method examine the BOM only.</param>
      <param name="leaveOpen">
        <c>false</c> to let the method close the <paramref name="stream" />, <c>true</c> otherwise.</param>
      <returns>
        <c>true</c> if <paramref name="stream" /> might be UTF-8 text, otherwise <c>false</c>. If the method finds a UTF-8 BOM, it always returns <c>true</c>. If <paramref name="count" /> is <c>0</c> and there's no BOM, it returns <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.IOException" />
      <exception cref="T:System.ObjectDisposedException" />
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:FolkerKinzel.Strings.Intls.Utf8Validator.IsUtf8Valid(System.IO.Stream,System.Int32,System.Boolean)">
      <summary />
      <param name="stream">The <see cref="T:System.IO.Stream" /> to examine.</param>
      <param name="count">The number of characters to examine from the <paramref name="stream" /> at least. If <paramref name="count" /> is larger than <paramref name="stream" /> has data, <paramref name="stream" /> is examined until EOF. Passing a negative number to this parameter lets the method examine from the current position until EOF. <c>0</c> is not allowed.</param>
      <param name="leaveOpen">
        <c>false</c> to let the method close the <paramref name="stream" />, <c>true</c> otherwise.</param>
      <returns>
        <c>true</c> if the examined sequence in <paramref name="stream" /> is valid UTF-8 text, otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is <c>0</c>.</exception>
      <exception cref="T:System.IO.IOException">I/O error.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="stream" /> was already closed.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="stream" /> is not readable.</exception>
    </member>
    <member name="T:FolkerKinzel.Strings.Polyfills.ReadOnlyMemoryPolyfillExtension">
      <summary>Extension methods for the <see cref="T:System.ReadOnlyMemory`1">ReadOnlyMemory&lt;Char&gt;</see> structure, which are used in .NET Framework 4.5, .NET Standard 2.0 and  .NET Standard 2.1 as polyfills for methods from current .NET versions.</summary>
      <remarks>The methods of this class should only be used in the extension method syntax to simulate the methods of the <see cref="T:System.ReadOnlyMemory`1">ReadOnlyMemory&lt;Char&gt;</see> structure, which exist in more modern frameworks.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlyMemoryPolyfillExtension.Trim(System.ReadOnlyMemory{System.Char})">
      <summary>Removes all leading and trailing white space characters from a read-only character memory region.</summary>
      <param name="memory">The source memory from which the characters are removed.</param>
      <returns>The trimmed character memory region.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlyMemoryPolyfillExtension.TrimStart(System.ReadOnlyMemory{System.Char})">
      <summary>Removes all leading white space characters from a read-only character memory region.</summary>
      <param name="memory">The source memory from which the characters are removed.</param>
      <returns>The trimmed character memory region.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlyMemoryPolyfillExtension.TrimEnd(System.ReadOnlyMemory{System.Char})">
      <summary>Removes all trailing white space characters from a read-only character memory region.</summary>
      <param name="memory">The source memory from which the characters are removed.</param>
      <returns>The trimmed character memory region.</returns>
    </member>
    <member name="T:FolkerKinzel.Strings.Polyfills.ReadOnlySpanExtensionPolyfillExtension">
      <summary>Extension methods, which act as Polyfills for the extension methods of the class <see cref="T:FolkerKinzel.Strings.ReadOnlySpanExtension" />.</summary>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanExtensionPolyfillExtension.LastIndexOf(System.ReadOnlySpan{System.Char},System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Specifies the  zero based index position of the last occurrence of a specified string in <paramref name="span" />. The search begins at a specified character position and runs backwards to the beginning of the character span for a specified number of character positions. A parameter specifies the type of comparison to be performed when searching for the specified string.</summary>
      <param name="span">The span to search.</param>
      <param name="value">The <see cref="T:System.String" /> to search for or <c>null</c>.</param>
      <param name="startIndex">The start index of the search. The search continues from <paramref name="startIndex" /> to the beginning of <paramref name="span" />.</param>
      <param name="count">The number of character positions to examine.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based start index of the <paramref name="value" /> parameter if this string was found, or -1 if it was not found or <paramref name="span" /> is empty.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="count" /> is a negative value
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.ReadOnlySpan`1.Empty" />, and <paramref name="startIndex" /> is a negative value.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.ReadOnlySpan`1.Empty" />, and <paramref name="startIndex" /> is greater than the length of <paramref name="span" />.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.ReadOnlySpan`1.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> indicates a position that is not within <paramref name="span" />.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is <see cref="P:System.ReadOnlySpan`1.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than 0.
</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enumeration.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanExtensionPolyfillExtension.ContainsAny(System.ReadOnlySpan{System.Char},System.String)">
      <summary>Indicates whether a read-only character span contains one of the Unicode characters that are passed to the method as a string.</summary>
      <param name="span">The read-only span to examine.</param>
      <param name="values">A string containing the characters to search for or <c>null</c>.</param>
      <returns>
        <c>true</c> if one of the characters to be searched for is found in <paramref name="span" />, otherwise <c>false</c>. If <paramref name="span" /> is an empty span or <paramref name="values" /> is <c>null</c> or empty, <c>false</c> is returned.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.IndexOfAny(System.Char[])">String.IndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanExtensionPolyfillExtension.IndexOfAny(System.ReadOnlySpan{System.Char},System.String)">
      <summary>Searches for the zero-based index of the first occurrence of one of the specified Unicode characters.</summary>
      <param name="span">The span to examine.</param>
      <param name="values">A string that contains the characters to search for or <c>null</c>.</param>
      <returns>The zero-based index of the first occurrence of one of the specified Unicode characters in <paramref name="span" /> or -1 if none of these characters have been found. If <paramref name="values" /> is <c>null</c> or empty, the method returns -1.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.IndexOfAny(System.Char[])">String.IndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanExtensionPolyfillExtension.LastIndexOfAny(System.ReadOnlySpan{System.Char},System.String)">
      <summary>Searches for the zero-based index of the last occurrence of one of the specified Unicode characters.</summary>
      <param name="span">The span to examine.</param>
      <param name="values">A string containing the characters to search for or <c>null</c>.</param>
      <returns>The zero-based index of the last occurrence of one of the specified Unicode characters in <paramref name="span" /> or -1 if none of these characters have been found. If <paramref name="values" /> is <c>null</c> or empty, the method returns -1.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.LastIndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.LastIndexOfAny(System.Char[])">String.LastIndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanExtensionPolyfillExtension.LastIndexOfAny(System.ReadOnlySpan{System.Char},System.String,System.Int32,System.Int32)">
      <summary>Returns the zero-based index of the last occurrence of one of the specified characters in <paramref name="span" />. The search begins at a specified character position and runs a specified number of character positions backwards to the beginning of the <paramref name="span" />.</summary>
      <param name="span">The span to search.</param>
      <param name="values">A string containing the characters to search for or <c>null</c>.</param>
      <param name="startIndex">The start index of the search. The search is done backwards to the beginning of <paramref name="span" />.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The zero-based index of the last occurrence of one of the specified Unicode characters in <paramref name="span" /> or -1 if none of these characters have been found.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.LastIndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.LastIndexOfAny(System.Char[])">String.LastIndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="span" /> is not <see cref="P:System.ReadOnlySpan`1.Empty" /> and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of <paramref name="span" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.ReadOnlySpan`1.Empty" /> and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.
</para>
      </exception>
    </member>
    <member name="T:FolkerKinzel.Strings.Polyfills.ReadOnlySpanPolyfillExtension">
      <summary>Extension methods for the <see cref="T:System.ReadOnlySpan`1">ReadOnlySpan&lt;Char&gt;</see> structure, which are used in .NET Framework 4.5, .NET Standard 2.0 and  .NET Standard 2.1 as polyfills for methods from current .NET versions.</summary>
      <remarks>The methods of this class should only be used in the extension method syntax to simulate the methods of the <see cref="T:System.ReadOnlySpan`1">ReadOnlySpan&lt;Char&gt;</see> structure, which exist in more modern frameworks.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanPolyfillExtension.Contains(System.ReadOnlySpan{System.Char},System.Char)">
      <summary>Indicates whether a read-only character span contains the Unicode character that is passed to the method as argument.</summary>
      <param name="span">The span to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <returns>
        <c>true</c> if found, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanPolyfillExtension.LastIndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Specifies the zero-based index of the last occurrence of a specified string in <paramref name="span" />. A parameter specifies the type of search for the specified string.</summary>
      <param name="span">The character span to search.</param>
      <param name="value">The character sequence to search for.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based index of <paramref name="value" /> if that character sequence is found, or -1 if it is not. If <paramref name="value" /> is <see cref="P:System.ReadOnlySpan`1.Empty" />, the last index position in <paramref name="span" /> is returned. In the specific case that <paramref name="span" /> is <see cref="P:System.ReadOnlySpan`1.Empty" />, that is <c>0</c>.</returns>
      <remarks>The behavior of the method is identical to that of <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> of the respective framework version. This has changed with .NET 5.0: Since then <paramref name="span" />.Length is returned if <paramref name="value" /> is <see cref="P:System.ReadOnlySpan`1.Empty" />.</remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enumeration.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanPolyfillExtension.Equals(System.ReadOnlySpan{System.Char},System.String,System.StringComparison)">
      <summary>Determines whether this <paramref name="span" /> and the specified other <paramref name="other" /> <see cref="T:System.String" /> have the same characters when compared using the specified <paramref name="comparisonType" /> option.</summary>
      <param name="span">The source span.</param>
      <param name="other">The value to compare with the source span.</param>
      <param name="comparisonType">An enumeration value that determines how <paramref name="span" /> and <paramref name="other" /> are compared.</param>
      <returns>
        <c>true</c> if equal, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanPolyfillExtension.Contains(System.ReadOnlySpan{System.Char},System.String,System.StringComparison)">
      <summary>Indicates whether a specified value occurs within a read-only character span.</summary>
      <param name="span">The source span.</param>
      <param name="value">The value to seek within the source span. <paramref name="value" /> can be <c>null</c>.</param>
      <param name="comparisonType">An enumeration value that determines how the characters in <paramref name="span" /> and <paramref name="value" /> are compared.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> occurs within the span, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanPolyfillExtension.LastIndexOf(System.ReadOnlySpan{System.Char},System.String,System.StringComparison)">
      <summary>Specifies the zero-based index of the last occurrence of a specified string in <paramref name="span" />. A parameter specifies the type of search for the specified string.</summary>
      <param name="span">The character span to search.</param>
      <param name="value">The <see cref="T:System.String" /> to search for or <c>null</c>.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based index of <paramref name="value" /> if that character sequence is found, or -1 if it is not. If <paramref name="value" /> is <see cref="P:System.String.Empty" /> or <c>null</c>, the last index position in <paramref name="span" /> is returned. In the specific case that <paramref name="span" /> is <see cref="P:System.ReadOnlySpan`1.Empty" />, that is <c>0</c>.</returns>
      <remarks>The behavior of the method is identical to that of <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> of the respective framework version. This has changed with .NET 5.0: Since then <paramref name="span" />.Length is returned if <paramref name="value" /> is <see cref="P:System.ReadOnlySpan`1.Empty" />.</remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enumeration.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanPolyfillExtension.StartsWith(System.ReadOnlySpan{System.Char},System.String)">
      <summary>Indicates whether a read-only span of characters starts with the specified <see cref="T:System.String" />.</summary>
      <param name="span">The source span.</param>
      <param name="value">Der <see cref="T:System.String" /> to compare with the start of the source span.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> matches the start of <paramref name="span" />, otherwise <c>false</c>.</returns>
      <remarks>The method performs an ordinal character comparison. If <paramref name="value" /> is <c>null</c> or <see cref="F:System.String.Empty" /> the method returns <c>true</c>.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanPolyfillExtension.StartsWith(System.ReadOnlySpan{System.Char},System.String,System.StringComparison)">
      <summary>Indicates whether a read-only character span begins with a specified <see cref="T:System.String" /> when compared using a specified <see cref="T:System.StringComparison" /> value.</summary>
      <param name="span">The source span.</param>
      <param name="value">Der <see cref="T:System.String" /> to compare with the start of the source span.</param>
      <param name="comparisonType">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> matches the start of <paramref name="span" />, otherwise <c>false</c>.</returns>
      <remarks>If <paramref name="value" /> is <c>null</c> or <see cref="F:System.String.Empty" /> the method returns <c>true</c>.</remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enumeration.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanPolyfillExtension.EndsWith(System.ReadOnlySpan{System.Char},System.String)">
      <summary>Indicates whether <paramref name="s" /> ends with the specified <see cref="T:System.String" />.</summary>
      <param name="span">The source span.</param>
      <param name="value">The <see cref="T:System.String" /> to compare with the end of the source span.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> matches the end of <paramref name="span" />, otherwise <c>false</c>.</returns>
      <remarks>The method performs an ordinal character comparison. If <paramref name="value" /> is <c>null</c> or <see cref="F:System.String.Empty" /> the method returns <c>true</c>.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.ReadOnlySpanPolyfillExtension.EndsWith(System.ReadOnlySpan{System.Char},System.String,System.StringComparison)">
      <summary>Indicates whether a read-only character span ends with a specified <see cref="T:System.String" /> when compared using a specified <see cref="T:System.StringComparison" /> value.</summary>
      <param name="span">The source span.</param>
      <param name="value">The <see cref="T:System.String" /> to compare with the end of the source span.</param>
      <param name="comparisonType">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> matches the end of <paramref name="span" />, otherwise <c>false</c>.</returns>
      <remarks>If <paramref name="value" /> is <c>null</c> or <see cref="F:System.String.Empty" /> the method returns <c>true</c>.</remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enumeration.</exception>
    </member>
    <member name="T:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension">
      <summary>Extension methods for the <see cref="T:System.Span`1">Span&lt;Char&gt;</see> structure used in the .NET Framework 4.5, .NET Standard 2.0, and .NET Standard 2.1 as polyfills for methods from current .NET versions.</summary>
      <remarks>The methods of this class should only be used in the extension method syntax to simulate the methods of the <see cref="T:System.Span`1">Span&lt;Char&gt;</see> structure, which exist in current frameworks.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.Contains(System.Span{System.Char},System.Char)">
      <summary>Indicates whether a character span contains a specified Unicode character.</summary>
      <param name="span">The span to examine.</param>
      <param name="value">The Unicode character to search for.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> has been found, <c>false</c> otherwise.</returns>
      <remarks>
        <see cref="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)"> MemoryExtensions.IndexOf(this Span&lt;T&gt;, T)</see> is used for the comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.Trim(System.Span{System.Char})">
      <summary>Removes all leading and trailing white space characters from a character span.</summary>
      <param name="span">The source span from which the characters are removed.</param>
      <returns>The sliced span.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.TrimStart(System.Span{System.Char})">
      <summary>Removes all leading white space characters from a character span.</summary>
      <param name="span">The source span from which the characters are removed.</param>
      <returns>The sliced span.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.TrimEnd(System.Span{System.Char})">
      <summary>Removes all trailing white space characters from a character span.</summary>
      <param name="span">The source span from which the characters are removed.</param>
      <returns>The sliced span.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.Equals(System.Span{System.Char},System.String,System.StringComparison)">
      <summary>Determines whether this <paramref name="span" /> and the specified other <paramref name="other" /> <see cref="T:System.String" /> have the same characters when compared using the specified <paramref name="comparisonType" /> option.</summary>
      <param name="span">The source span.</param>
      <param name="other">The value to compare with the source span.</param>
      <param name="comparisonType">An enumeration value that determines how <paramref name="span" /> and <paramref name="other" /> are compared.</param>
      <returns>
        <c>true</c> if equal, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.Contains(System.Span{System.Char},System.String,System.StringComparison)">
      <summary>Indicates whether a specified value occurs within a character span when compared using a specified <see cref="T:System.StringComparison" /> value.</summary>
      <param name="span">The source span.</param>
      <param name="value">The value to seek within the source span. <paramref name="value" /> can be <c>null</c>.</param>
      <param name="comparisonType">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> has been found, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.StartsWith(System.Span{System.Char},System.String)">
      <summary>Indicates whether a read-only character span begins with a specified <see cref="T:System.String" />.</summary>
      <param name="span">The source span.</param>
      <param name="value">The <see cref="T:System.String" /> to compare with the beginning of the source span.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> matches the beginning of <paramref name="span" />, otherwise <c>false</c>.</returns>
      <remarks>The method performs an ordinal character comparison. If <paramref name="value" /> is <c>null</c> or <see cref="F:System.String.Empty" /> the method returns <c>true</c>.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.StartsWith(System.Span{System.Char},System.String,System.StringComparison)">
      <summary>Indicates whether a character span begins with a specified <see cref="T:System.String" /> when compared using a specified <see cref="T:System.StringComparison" /> value.</summary>
      <param name="span">The source span.</param>
      <param name="value">The <see cref="T:System.String" /> to compare with the beginning of the source span.</param>
      <param name="comparisonType">An enumeration value that determines how <paramref name="span" /> and <paramref name="other" /> are compared.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> matches the beginning of <paramref name="span" />, otherwise <c>false</c>.</returns>
      <remarks>If <paramref name="value" /> is <c>null</c> or <see cref="F:System.String.Empty" /> the method returns <c>true</c>.</remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enumeration.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.EndsWith(System.Span{System.Char},System.String)">
      <summary>Indicates whether a character span ends with the specified <see cref="T:System.String" />.</summary>
      <param name="span">The source span.</param>
      <param name="value">The <see cref="T:System.String" /> to compare with the end of the source span.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> matches the end of <paramref name="span" />, otherwise <c>false</c>.</returns>
      <remarks>The method performs an ordinal character comparison. If <paramref name="value" /> is <c>null</c> or <see cref="F:System.String.Empty" /> the method returns <c>true</c>.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.EndsWith(System.Span{System.Char},System.String,System.StringComparison)">
      <summary>Indicates whether a character span ends with a specified <see cref="T:System.String" /> when compared using a specified <see cref="T:System.StringComparison" /> value.</summary>
      <param name="span">The source span.</param>
      <param name="value">The <see cref="T:System.String" /> to compare with the end of the source span.</param>
      <param name="comparisonType">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> matches the end of <paramref name="span" />, otherwise <c>false</c>.</returns>
      <remarks>If <paramref name="value" /> is <c>null</c> or <see cref="F:System.String.Empty" /> the method returns <c>true</c>.</remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enum.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.LastIndexOf(System.Span{System.Char},System.String,System.StringComparison)">
      <summary>Specifies the zero-based index of the last occurrence of a specified string in <paramref name="span" />. A parameter specifies the type of search for the specified string.</summary>
      <param name="span">The span to search.</param>
      <param name="value">The <see cref="T:System.String" /> to search for or <c>null</c>.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based index of <paramref name="value" /> if that string is found, or -1 if it is not.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enum.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.LastIndexOf(System.Span{System.Char},System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Specifies the  zero based index position of the last occurrence of a specified string in <paramref name="span" />. The search begins at a specified character position and runs backwards to the beginning of the character span for a specified number of character positions. A parameter specifies the type of comparison to be performed when searching for the specified string.</summary>
      <param name="span">The span to search.</param>
      <param name="value">The <see cref="T:System.String" /> to search for or <c>null</c>.</param>
      <param name="startIndex">The start index of the search. The search continues from <paramref name="startIndex" /> to the beginning of <paramref name="span" />.</param>
      <param name="count">The number of character positions to examine.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based index of the last occurence of <paramref name="value" /> if that string is found, or -1 if it's not or if <paramref name="span" /> is empty.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="count" /> is a negative value
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.Span`1.Empty" />, and <paramref name="startIndex" /> is a negative value.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.Span`1.Empty" />, and <paramref name="startIndex" /> is greater than the length of <paramref name="span" />.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.Span`1.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> indicates a position that is not within <paramref name="span" />.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is <see cref="P:System.Span`1.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than 0.
</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enum.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.ContainsAny(System.Span{System.Char},System.String)">
      <summary>Indicates whether a character span contains one of the Unicode characters that are passed to the method as a string.</summary>
      <param name="span">The span to examine.</param>
      <param name="values">A string containing the characters to search for or <c>null</c>.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> contains one of the characters passed with <paramref name="values" />. If <paramref name="span" /> is empty or <paramref name="values" /> is <c>null</c> or empty, <c>false</c> is returned.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.IndexOfAny(System.Char[])">String.IndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.IndexOfAny(System.Span{System.Char},System.String)">
      <summary>Searches for the zero-based index of the first occurrence of one of the specified Unicode characters.</summary>
      <param name="span">The span to search.</param>
      <param name="values">A string containing the characters to search for or <c>null</c>.</param>
      <returns>The zero-based index of the first occurrence of one of the specified Unicode characters in <paramref name="span" /> or -1 if none of these characters have been found. If <paramref name="values" /> is <c>null</c> or empty, the method returns -1.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.IndexOfAny(System.Char[])">String.IndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.LastIndexOfAny(System.Span{System.Char},System.String)">
      <summary>Searches for the zero-based index of the last occurrence of one of the specified Unicode characters.</summary>
      <param name="span">The span to search.</param>
      <param name="values">A string containing the characters to search for or <c>null</c>.</param>
      <returns>The zero-based index of the last occurrence of one of the specified Unicode characters in <paramref name="span" /> or -1 if none of these characters have been found. If <paramref name="values" /> is <c>null</c> or empty, the method returns -1.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.LastIndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.LastIndexOfAny(System.Char[])">String.LastIndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.SpanPolyfillExtension.LastIndexOfAny(System.Span{System.Char},System.String,System.Int32,System.Int32)">
      <summary>Returns the zero-based index of the last occurrence of one of the specified characters in <paramref name="span" />. The search begins at a specified character position and runs a specified number of character positions backwards to the beginning of the <paramref name="span" />.</summary>
      <param name="span">The span to search.</param>
      <param name="values">A string containing the characters to search for or <c>null</c>.</param>
      <param name="startIndex">The start index of the search. The search is done backwards to the beginning of <paramref name="span" />.</param>
      <param name="count">The number of characters positions to examine in <paramref name="span" />.</param>
      <returns>The zero-based index of the last occurrence of one of the specified Unicode characters in <paramref name="span" /> or -1 if none of these characters have been found.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.LastIndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.LastIndexOfAny(System.Char[])">String.LastIndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="span" /> is not <see cref="P:System.Span`1.Empty" /> and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of <paramref name="span" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.Span`1.Empty" /> and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.
</para>
      </exception>
    </member>
    <member name="T:FolkerKinzel.Strings.Polyfills.StringBuilderExtensionPolyfillExtension">
      <summary>Extension methods, which act as Polyfills for the extension methods of the class <see cref="T:FolkerKinzel.Strings.StringBuilderExtension" />.</summary>
      <remarks>The polyfills are available for .NET Framework 4.5 and .NET Standard 2.0.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderExtensionPolyfillExtension.ReplaceWhiteSpaceWith(System.Text.StringBuilder,System.String,System.Boolean)">
      <summary>Replaces in <paramref name="builder" /> all sequences of white space with <paramref name="replacement" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="replacement">A <see cref="T:System.String" /> that is the replacement for all sequences of white space or <c>null</c> to completely remove any white space.</param>
      <param name="skipNewLines">Pass <c>true</c> to exclude newline characters from the replacement. The default value is <c>false</c>.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <remarks>
        <para>
The method uses <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> to identify white space characters and works more thoroughly with it than <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">Regex.Replace(string input, @"\s+", string replacement)</see>.
</para>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.
</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderExtensionPolyfillExtension.ReplaceWhiteSpaceWith(System.Text.StringBuilder,System.String,System.Int32,System.Boolean)">
      <summary>Replaces in a section of <paramref name="builder" />, which starts at <paramref name="startIndex" /> and extends to the end of <paramref name="builder" />, all sequences of white space with <paramref name="replacement" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="replacement">A <see cref="T:System.String" /> that is the replacement for all sequences of white space or <c>null</c> to completely remove all white space.</param>
      <param name="skipNewLines">Pass <c>true</c> to exclude newline characters from the replacement. The default value is <c>false</c>.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the replacement starts.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <remarks>
        <para>
The method uses <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> to identify white space characters and works more thoroughly with it than <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">Regex.Replace(string input, @"\s+", string replacement)</see>.
</para>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.
</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the number of characters in <paramref name="builder" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderExtensionPolyfillExtension.ReplaceWhiteSpaceWith(System.Text.StringBuilder,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>Replaces in a section of <paramref name="builder" />, which starts at <paramref name="startIndex" /> and which is <paramref name="count" /> characters long, all sequences of white space with <paramref name="replacement" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="replacement">A <see cref="T:System.String" /> that is the replacement for all sequences of white space or <c>null</c> to completely remove all white space.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the replacement starts.</param>
      <param name="count">The length of the section in which the replacements take place.</param>
      <param name="skipNewLines">Pass <c>true</c> to exclude newline characters from the replacement. The default value is <c>false</c>.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <remarks>
        <para>
The method uses <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> to identify white space characters and works more thoroughly with it than <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">Regex.Replace(string input, @"\s+", string replacement)</see>.
</para>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.
</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="startIndex" /> or <paramref name="count" /> are smaller than zero or larger than the number of characters in <paramref name="builder" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="startIndex" /> + <paramref name="count" /> is larger than the number of characters in <paramref name="builder" />.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderExtensionPolyfillExtension.NormalizeNewLinesTo(System.Text.StringBuilder,System.String)">
      <summary>Replaces all newlines in <paramref name="builder" /> with <paramref name="newLine" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="newLine">A <see cref="T:System.String" /> to replace each newline or <c>null</c> to remove all newlines.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <remarks>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters. The sequences CRLF and LFCR are treated as one line break.
</para>
        <note type="caution">
This method differs from <see cref="M:FolkerKinzel.Strings.StringBuilderExtension.ReplaceLineEndings(System.Text.StringBuilder,System.String)" /> in that it also treats LFCR sequences and vertical tab (VT: U+000B ) as a line break.
</note>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="T:FolkerKinzel.Strings.Polyfills.StringBuilderPolyfillExtension">
      <summary>Extension methods for the <see cref="T:System.Text.StringBuilder" /> class, which are used in .NET Framework 4.5 and .NET Standard 2.0 as polyfills for methods from current .NET versions.</summary>
      <remarks>The methods of this class should only be used in the extension method syntax to simulate the original methods of the <see cref="T:System.String" /> class, which exist in more modern frameworks. To match the behavior of the original methods, these extension methods throw a <see cref="T:System.NullReferenceException" /> when called on <c>null</c>.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderPolyfillExtension.AppendJoin(System.Text.StringBuilder,System.Char,System.String[])">
      <summary>Concatenates the strings of the provided array, using the specified char separator between each string, then appends the result to <paramref name="builder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="separator">The character to use as a separator. <paramref name="separator" /> is included in the joined strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">An array that contains the strings to concatenate and append to <paramref name="builder" />.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation is completed.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderPolyfillExtension.AppendJoin(System.Text.StringBuilder,System.Char,System.Object[])">
      <summary>Concatenates the string representations of the elements in the provided array of objects, using the specified separator character between each member, then appends the result to <paramref name="builder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="separator">The character to use as a separator. <paramref name="separator" /> is included in the joined strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">An array that contains the objects whose string representations have to be concatenated and appended to <paramref name="builder" />.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation is completed.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderPolyfillExtension.AppendJoin``1(System.Text.StringBuilder,System.Char,System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates the string representations of the elements in the provided collection, using the specified separator character between each member, then appends the result to <paramref name="builder" />.</summary>
      <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="separator">The character to use as a separator. <paramref name="separator" /> is included in the joined strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">A collection that contains the objects whose string representations have to be concatenated and appended to <paramref name="builder" />.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation is completed.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderPolyfillExtension.AppendJoin(System.Text.StringBuilder,System.String,System.String[])">
      <summary>Concatenates the strings in the provided array of objects, using the specified separator between each member, then appends the result to <paramref name="builder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the joined strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">An array that contains the strings to concatenate and append to <paramref name="builder" />.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation is completed.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderPolyfillExtension.AppendJoin(System.Text.StringBuilder,System.String,System.Object[])">
      <summary>Concatenates the string representations of the elements in the provided array of objects, using the specified separator between each member, then appends the result to <paramref name="builder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the joined strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">An array that contains the objects whose string representations have to be concatenated and appended to <paramref name="builder" />.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation is completed.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderPolyfillExtension.AppendJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates the string representations of the elements in the provided collection, using the specified separator between each member, then appends the result to <paramref name="builder" />.</summary>
      <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the joined strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">A collection that contains the objects whose string representations have to be concatenated and appended to <paramref name="builder" />.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation is completed.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderPolyfillExtension.Append(System.Text.StringBuilder,System.Text.StringBuilder,System.Int32,System.Int32)">
      <summary>Appends a copy of a sequence of Unicode characters that comes from a <see cref="T:System.Text.StringBuilder" /> to the existing content of <paramref name="builder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="value">The <see cref="T:System.Text.StringBuilder" /> from which the characters are copied.</param>
      <param name="startIndex">The zero-based index in <paramref name="value" /> at which the copy operation starts.</param>
      <param name="count">The number of Unicode characters to copy.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="startIndex" /> or <paramref name="count" /> are smaller than zero
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="startIndex" /> + <paramref name="count" /> is larger than the number of characters in <paramref name="value" />.
</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <c>null</c> and the values of <paramref name="startIndex" /> or <paramref name="count" /> are  greater than zero.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderPolyfillExtension.Append(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
      <summary>Appends the string representation of a specified read-only character span to a <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="value">The read-only character span to append.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation is completed.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Increasing the capacity of <paramref name="builder" /> would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringBuilderPolyfillExtension.Insert(System.Text.StringBuilder,System.Int32,System.ReadOnlySpan{System.Char})">
      <summary>Inserts the content of a read-only character span at the specified index position into <paramref name="builder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> into which the characters are inserted.</param>
      <param name="index">The zero-based index in <paramref name="builder" /> at which the characters are inserted.</param>
      <param name="value">The character span to insert.</param>
      <returns>A reference to <paramref name="builder" /> after the insert operation is completed.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the number of characters in <paramref name="builder" />.</exception>
    </member>
    <member name="T:FolkerKinzel.Strings.Polyfills.StringExtensionPolyfillExtension">
      <summary>Extension methods, which act as Polyfills for the extension methods of the class <see cref="T:FolkerKinzel.Strings.StringExtension" />.</summary>
      <remarks>The polyfills are available for .NET Framework 4.5 and .NET Standard 2.0.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringExtensionPolyfillExtension.ReplaceWhiteSpaceWith(System.String,System.String,System.Boolean)">
      <summary>Generates a <see cref="T:System.String" /> in which all sequences of white space are replaced by <paramref name="replacement" />.</summary>
      <param name="s">The source <see cref="T:System.String" />.</param>
      <param name="replacement">A <see cref="T:System.String" />, which replaces the white space or <c>null</c> to remove all white space.</param>
      <param name="skipNewLines">Pass <c>true</c> to exclude newline characters from the replacement. The default value is <c>false</c>.</param>
      <returns>A new <see cref="T:System.String" /> in which all sequences of white space are replaced by <paramref name="replacement" />. If <paramref name="s" /> doesn't contain a white space character, <paramref name="s" /> is returned.</returns>
      <remarks>
        <para>
The method uses <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> to identify white space characters and works more thoroughly with it than <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">Regex.Replace(string input, @"\s+", string replacement)</see>.
</para>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.
</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringExtensionPolyfillExtension.NormalizeNewLinesTo(System.String,System.String)">
      <summary>Generates a <see cref="T:System.String" /> in which all newlines are replaced by <paramref name="newLine" />.</summary>
      <param name="s">The source <see cref="T:System.String" />.</param>
      <param name="newLine">A <see cref="T:System.String" /> that is the replacement for all newlines or <c>null</c> to completely remove all newline characters.</param>
      <returns>A new <see cref="T:System.String" /> in which all newlines are replaced by <paramref name="replacement" />. If <paramref name="s" /> doesn't contain a newline character, <paramref name="s" /> is returned.</returns>
      <remarks>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters. The sequences CRLF and LFCR are treated as one line break.
</para>
        <note type="caution">
This method differs from <see cref="M:FolkerKinzel.Strings.StringBuilderExtension.ReplaceLineEndings(System.Text.StringBuilder,System.String)" /> in that it also treats LFCR sequences and vertical tab (VT: U+000B ) as a line break.
</note>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="T:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension">
      <summary>Extension methods for the <see cref="T:System.String" /> class, which are used in .NET Framework 4.5 and .NET Standard 2.0 as polyfills for methods from current .NET versions.</summary>
      <remarks>To match the behavior of the original methods, these extension methods throw a <see cref="T:System.NullReferenceException" /> when called on a <c>null</c> string.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension.Contains(System.String,System.Char,System.StringComparison)">
      <summary>Returns a value indicating whether a specified character occurs within this <see cref="T:System.String" />, using the specified comparison rules.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <param name="comparisonType">An enumeration value that specifies the rules for the comparison.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> has been found, <c>false</c> otherwise.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enum.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension.Contains(System.String,System.Char)">
      <summary>Returns a value indicating whether a specified character appears in the <see cref="T:System.String" />.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> has been found, <c>false</c> otherwise.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
      <remarks>The method performs an ordinal character comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension.Contains(System.String,System.String,System.StringComparison)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.String" /> occurs within <paramref name="s" />, using the specified comparison rules.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="value">The <see cref="T:System.String" /> to search for.</param>
      <param name="comparisonType">An enumeration value that specifies the rules for the comparison.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> has been found, <c>false</c> otherwise.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension.IndexOf(System.String,System.Char,System.StringComparison)">
      <summary>Returns the zero-based index of the first occurrence of the specified Unicode character in this <see cref="T:System.String" />. A parameter specifies the type of search to use for the specified character.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <param name="comparisonType">An enumeration value that specifies the rules for the search.</param>
      <returns>The zero-based index of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enum.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension.Split(System.String,System.Char,System.StringSplitOptions)">
      <summary>Splits a <see cref="T:System.String" /> into substrings based on a specified delimiting character and, optionally, options.</summary>
      <param name="s">The <see cref="T:System.String" /> to split.</param>
      <param name="separator">A character that delimits the substrings in <paramref name="s" />.</param>
      <param name="options">An enumeration value that specifies whether to include empty substrings.</param>
      <returns>An array whose elements contain the substrings from <paramref name="s" /> that are delimited by <paramref name="separator" />.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension.Split(System.String,System.Char,System.Int32,System.StringSplitOptions)">
      <summary>Splits a <see cref="T:System.String" /> into a maximum number of substrings based on the provided character separator, optionally omitting empty substrings from the result.</summary>
      <param name="s">The <see cref="T:System.String" /> to split.</param>
      <param name="separator">A character that delimits the substrings in <paramref name="s" />.</param>
      <param name="count">The maximum number of elements expected in the array.</param>
      <param name="options">An enumeration value that specifies whether to include empty substrings.</param>
      <returns>An array that contains at most <paramref name="count" /> substrings from <paramref name="s" /> that are delimited by <paramref name="separator" />.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension.Split(System.String,System.String,System.Int32,System.StringSplitOptions)">
      <summary>Splits a <see cref="T:System.String" /> into a maximum number of substrings based on the provided separator, optionally omitting empty substrings from the result.</summary>
      <param name="s">The <see cref="T:System.String" /> to split.</param>
      <param name="separator">A <see cref="T:System.String" /> that delimits the substrings in <paramref name="s" />.</param>
      <param name="count">The maximum number of elements expected in the array.</param>
      <param name="options">An enumeration value that specifies whether to include empty substrings.</param>
      <returns>An array that contains at most <paramref name="count" /> substrings from <paramref name="s" /> that are delimited by <paramref name="separator" />.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension.Split(System.String,System.String,System.StringSplitOptions)">
      <summary>Splits a <see cref="T:System.String" /> into substrings based on the provided separator, optionally omitting empty substrings from the result.</summary>
      <param name="s">The <see cref="T:System.String" /> to split.</param>
      <param name="separator">A <see cref="T:System.String" /> that delimits the substrings in <paramref name="s" />.</param>
      <param name="options">An enumeration value that specifies whether to include empty substrings.</param>
      <returns>An array whose elements contain the substrings from <paramref name="s" /> that are delimited by <paramref name="separator" />.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension.StartsWith(System.String,System.Char)">
      <summary>Indicates whether <paramref name="s" /> starts with the specified character.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="value">The Unicode character to compare.</param>
      <returns>
        <c>true</c> if value matches the beginning of <paramref name="s" />; otherwise, <c>false</c>.</returns>
      <remarks>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</remarks>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension.EndsWith(System.String,System.Char)">
      <summary>Indicates whether the end of <paramref name="s" /> matches the specified character.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="value">The Unicode character to compare.</param>
      <returns>
        <c>true</c> if value matches the end of <paramref name="s" />; otherwise, <c>false</c>.</returns>
      <remarks>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</remarks>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.Polyfills.StringPolyfillExtension.Replace(System.String,System.String,System.String,System.StringComparison)">
      <summary>Returns a new <see cref="T:System.String" /> in which all occurrences of a specified <see cref="T:System.String" /> in the current <see cref="T:System.String" /> are replaced with another specified <see cref="T:System.String" />, using the provided comparison type.</summary>
      <param name="s">The source <see cref="T:System.String" />.</param>
      <param name="oldValue">The <see cref="T:System.String" /> to be replaced.</param>
      <param name="newValue">The <see cref="T:System.String" /> to replace all occurrences of <paramref name="oldValue" />.</param>
      <param name="comparisonType">An enumeration value that specifies the rules for the comparison.</param>
      <returns>A <see cref="T:System.String" /> that is equivalent to <paramref name="s" /> except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />. If <paramref name="oldValue" /> is not found in <paramref name="s" />, the method returns <paramref name="s" /> unchanged.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="oldValue" /> is <see cref="F:System.String.Empty" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enumeration.
</para>
      </exception>
    </member>
    <member name="T:FolkerKinzel.Strings.Properties.Res">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Strings.Properties.Res.ResourceManager">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Strings.Properties.Res.Culture">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Strings.Properties.Res.ArgumentNullOrWhiteSpace">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Strings.Properties.Res.NoBinaryDigit">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Strings.Properties.Res.NoDecimalDigit">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Strings.Properties.Res.NoEmptyStringAllowed">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Strings.Properties.Res.UndefinedEnumValue">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Strings.Properties.Res.ZeroNotAllowed">
      <summary />
    </member>
    <member name="T:FolkerKinzel.Strings.ReadOnlySpanExtension">
      <summary>Extension methods for the <see cref="T:System.ReadOnlySpan`1">ReadOnlySpan&lt;Char&gt;</see> structure.</summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.ContainsAny(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Indicates whether a read-only span of Unicode characters contains one of the Unicode characters that are passed to the method in another span.</summary>
      <param name="span">The span to search.</param>
      <param name="values">A read-only span, which contains the Unicode characters to search for.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> contains one of the characters passed with <paramref name="values" />. If <paramref name="span" /> or <paramref name="chars" /> are empty, <c>false</c> is returned.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.IndexOfAny(System.Char[])">String.IndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.ContainsAny(System.ReadOnlySpan{System.Char},System.Char,System.Char)">
      <summary>Indicates whether a read-only character span contains one of the two characters that are passed to the method as arguments.</summary>
      <param name="span">The span to examine.</param>
      <param name="value0">The first character to search for.</param>
      <param name="value1">The second character to search for.</param>
      <returns>
        <c>true</c> if one of the characters to be searched for is found in the span, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, T, T)</see> is used for the comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.ContainsAny(System.ReadOnlySpan{System.Char},System.Char,System.Char,System.Char)">
      <summary>Indicates whether a read-only character span contains one of the 3 characters that are passed to the method as arguments.</summary>
      <param name="span">The span to examine.</param>
      <param name="value0">The first character to search for.</param>
      <param name="value1">The second character to search for.</param>
      <param name="value2">The third character to search for.</param>
      <returns>
        <c>true</c> if one of the characters to be searched for is found in the span, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, T, T, T)</see> is used for the comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.ContainsNewLine(System.ReadOnlySpan{System.Char})">
      <summary>Indicates whether a read-only character span contains a newline character.</summary>
      <param name="span">The span to search.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> contains a newline character, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used for the comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.ContainsWhiteSpace(System.ReadOnlySpan{System.Char})">
      <summary>Indicates whether a read-only span of characters contains white space.</summary>
      <param name="span">The span to search.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> contains white space, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> is used for the comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.EndsWith(System.ReadOnlySpan{System.Char},System.Char)">
      <summary>Indicates whether a read-only character span ends with a specified Unicode character.</summary>
      <param name="span">The span to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> matches the end of <paramref name="span" />, otherwise <c>false</c>.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.GetPersistentHashCode(System.ReadOnlySpan{System.Char},FolkerKinzel.Strings.HashType)">
      <summary>Generates the same <see cref="T:System.Int32" /> hash code for an identical string of characters each time the program is run.</summary>
      <param name="span">The Char sequence to be hashed.</param>
      <param name="hashType">The kind of hashcode to be generated.</param>
      <returns>The hashcode.</returns>
      <remarks>
        <para>
The method <see cref="M:System.String.GetHashCode">String.GetHashCode()</see> returns a different hash code for an identical string with each program run for security reasons. Apart from the fact that the hash algorithm of <see cref="M:System.String.GetHashCode">String.GetHashCode()</see> could be different in different framework versions, it makes no sense to use the return value of <see cref="M:System.String.GetHashCode" /> for reuse. The alternatives, e.g. <see cref="T:System.Security.Cryptography.MD5" /> or <see cref="T:System.Security.Cryptography.SHA256" />, use more storage space and are slower. This method offers a slim alternative that is suitable for hashing very short strings that are not used in a security-critical context.
</para>
        <para>
The hashcode generated by this method is not identical to the hashcode generated by the .NET Framework 4.0, because it uses roundshifting to preserve more information.
</para>
        <para>
The hashcodes generated with different values for <paramref name="hashType" /> may provide different hashcodes for an identical Char sequence and MUST therefore not be mixed.
</para>
        <para>
Do not use the hashcodes generated by this method for security-critical purposes (such as hashing passwords)!
</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashType" /> is not a defined value of the <see cref="T:FolkerKinzel.Strings.HashType" /> enum.</exception>
      <example>
        <code language="cs" source="..\Examples\Example.cs" />
      </example>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.GetTrimmedLength(System.ReadOnlySpan{System.Char})">
      <summary>Returns the length that the read-only span would have without trailing white space.</summary>
      <param name="span">The read-only span of Unicode characters to examine.</param>
      <returns>The length that the read-only span would have without trailing white space.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.GetTrimmedStart(System.ReadOnlySpan{System.Char})">
      <summary>Returns the index of the first non-white-space character in the span.</summary>
      <param name="span">The read-only span of Unicode characters to examine.</param>
      <returns>The index of the first non-white-space character found in the span. If the span is empty or consists only of white space, the length of the span is returned.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.IndexOfAny(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Searches for the zero-based index of the first occurrence of one of the specified Unicode characters.</summary>
      <param name="span">The span to examine.</param>
      <param name="values">A read-only span, which contains the characters to search for.</param>
      <returns>The zero-based index of the first occurrence of one of the specified Unicode characters in <paramref name="span" /> or -1 if none of these characters have been found. If <paramref name="values" /> is an empty span, the method returns -1.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.IndexOfAny(System.Char[])">String.IndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.IsAscii(System.ReadOnlySpan{System.Char})">
      <summary>Checks whether the read-only character span contains only Unicode characters that belong to the ASCII character set.</summary>
      <param name="span">A read-only span of Unicode characters.</param>
      <returns>
        <c>false</c> if <paramref name="span" /> contains a Unicode character, which doesn't belong to the ASCII character set, otherwise <c>true</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.LastIndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.Int32,System.StringComparison)">
      <summary>Specifies the  zero based index position of the last occurrence of a specified string in <paramref name="span" />. The search begins at a specified character position and runs backwards to the beginning of the character span for a specified number of character positions. A parameter specifies the type of comparison to be performed when searching for the specified string.</summary>
      <param name="span">The character span to search.</param>
      <param name="value">The character span to search for.</param>
      <param name="startIndex">The start index of the search. The search continues from <paramref name="startIndex" /> to the beginning of <paramref name="span" />.</param>
      <param name="count">The number of character positions to examine.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based start index of the <paramref name="value" /> parameter if this string was found, or -1 if it was not found or <paramref name="span" /> is empty.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="count" /> is a negative value
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.ReadOnlySpan`1.Empty" />, and <paramref name="startIndex" /> is a negative value.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.ReadOnlySpan`1.Empty" />, and <paramref name="startIndex" /> is greater than the length of <paramref name="span" />.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.ReadOnlySpan`1.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> indicates a position that is not within <paramref name="span" />.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is <see cref="P:System.ReadOnlySpan`1.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than 0.
</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enum.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.LastIndexOfAny(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Searches for the zero-based index of the last occurrence of one of the specified Unicode characters.</summary>
      <param name="span">The span to examine.</param>
      <param name="values">A read-only span, which contains the characters to search for.</param>
      <returns>The zero-based index of the last occurrence of one of the specified Unicode characters in <paramref name="span" /> or -1 if none of these characters have been found. If <paramref name="values" /> is an empty span, the method returns -1.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.LastIndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.LastIndexOfAny(System.Char[])">String.LastIndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.LastIndexOfAny(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.Int32)">
      <summary>Returns the zero-based index position of the last occurrence of one of the specified characters in <paramref name="span" />. The search begins at a specified index and runs for a specified number of character positions backwards to the beginning of the span.</summary>
      <param name="span">The span to search.</param>
      <param name="values">A read-only character span that contains the characters to search for.</param>
      <param name="startIndex">The start index of the search. The search is done backwards to the beginning of <paramref name="span" />.</param>
      <param name="count">The number of characters positions to examine in <paramref name="span" />.</param>
      <returns>The zero-based index of the last occurrence of one of the specified Unicode characters in the specified part of <paramref name="span" /> or -1 if none of these characters have been found in this area.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.LastIndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.LastIndexOfAny(System.Char[])">String.LastIndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="span" /> is not <see cref="P:System.ReadOnlySpan`1.Empty" /> and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of <paramref name="span" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.ReadOnlySpan`1.Empty" /> and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.ReadOnlySpanExtension.StartsWith(System.ReadOnlySpan{System.Char},System.Char)">
      <summary>Indicates whether a read-only character span begins with the specified Unicode character.</summary>
      <param name="span">The span to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> matches the beginning of <paramref name="span" />, otherwise <c>false</c>.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
    </member>
    <member name="T:FolkerKinzel.Strings.SpanAction`2">
      <summary>Polyfill for the delegate System.Buffers.SpanAction&lt;T,TArg&gt;.</summary>
      <typeparam name="T">The type of the objects in the span.</typeparam>
      <typeparam name="TArg">The type of object that represents the state. This type parameter is contravariant. This means that you can either use the specified type or a less derived type.</typeparam>
      <param name="span">A span of objects of type <typeparamref name="T" />.</param>
      <param name="arg">A state object of the type <typeparamref name="TArg" />.</param>
    </member>
    <member name="T:FolkerKinzel.Strings.SpanExtension">
      <summary>Extension methods for the <see cref="T:System.Span`1">Span&lt;Char&gt;</see> struct</summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Indicates whether a specified sequence of Unicode characters occurs within a character span.</summary>
      <param name="span">The source span.</param>
      <param name="value">The character sequence to search for.</param>
      <param name="comparisonType">An enumeration value that determines how <paramref name="span" /> and <paramref name="other" /> are compared.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> has been found, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.ContainsAny(System.Span{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Indicates whether a character span contains one of the Unicode characters that are passed to the method as a read-only character span.</summary>
      <param name="span">The span to examine.</param>
      <param name="values">A read-only character span that contains the characters to search for.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> contains one of the characters passed with <paramref name="values" />. If <paramref name="span" /> or <paramref name="values" /> are empty, <c>false</c> is returned.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.IndexOfAny(System.Char[])">String.IndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.ContainsAny(System.Span{System.Char},System.Char,System.Char)">
      <summary>Indicates whether a character span contains one of the two characters that are passed to the method as arguments.</summary>
      <param name="span">The span to examine.</param>
      <param name="value0">The first character to search for.</param>
      <param name="value1">The second character to search for.</param>
      <returns>
        <c>true</c> if one of the characters to be searched for is found in the span, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)">MemoryExtensions.IndexOfAny&lt;T&gt;(Span&lt;T&gt;, T, T)</see> is used for the comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.ContainsAny(System.Span{System.Char},System.Char,System.Char,System.Char)">
      <summary>Indicates whether a character span contains one of the three characters that are passed to the method as arguments.</summary>
      <param name="span">The span to examine.</param>
      <param name="value0">The first character to search for.</param>
      <param name="value1">The second character to search for.</param>
      <param name="value2">The third character to search for.</param>
      <returns>
        <c>true</c> if one of the characters to be searched for is found in the span, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)">MemoryExtensions.IndexOfAny&lt;T&gt;(Span&lt;T&gt;, T, T, T)</see> is used for the comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.ContainsNewLine(System.Span{System.Char})">
      <summary>Indicates whether a character span contains a newline character.</summary>
      <param name="span">The span to search.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> contains a newline character, otherwise  <c>false</c>.</returns>
      <remarks>
        <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used for the comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.ContainsWhiteSpace(System.Span{System.Char})">
      <summary>Indicates whether a character span contains a white space character.</summary>
      <param name="span">The span to search.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> contains white space, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> is used for the comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.EndsWith(System.Span{System.Char},System.Char)">
      <summary>Indicates whether a character span ends with the specified Unicode character.</summary>
      <param name="span">The span to examine.</param>
      <param name="value">The character to search for.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> ends with <paramref name="value" />, otherwise  <c>false</c>.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Indicates whether <paramref name="span" /> ends with <paramref name="value" />  when compared using a specified <see cref="T:System.StringComparison" /> value.</summary>
      <param name="span">The span to examine.</param>
      <param name="value">The character sequence to compare with the end of <paramref name="span" />.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> ends with <paramref name="value" />, otherwise  <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.Equals(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Determines whether this <paramref name="span" /> and <paramref name="other" /> have the same characters when compared using the specified <paramref name="comparisonType" /> option.</summary>
      <param name="span">The span to examine.</param>
      <param name="other">The value to compare with the source span.</param>
      <param name="comparisonType">An enumeration value that determines how <paramref name="span" /> and <paramref name="other" /> are compared.</param>
      <returns>
        <c>true</c> if identical, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.GetPersistentHashCode(System.Span{System.Char},FolkerKinzel.Strings.HashType)">
      <summary>Generates the same <see cref="T:System.Int32" /> hash code for an identical string of characters each time the program is run.</summary>
      <param name="span">The Char sequence to be hashed.</param>
      <param name="hashType">The kind of hashcode to be generated.</param>
      <returns>The hashcode.</returns>
      <remarks>
        <para>
The method <see cref="M:System.String.GetHashCode">String.GetHashCode()</see> returns a different hash code for an identical string with each program run for security reasons. Apart from the fact that the hash algorithm of <see cref="M:System.String.GetHashCode">String.GetHashCode()</see> could be different in different framework versions, it makes no sense to use the return value of <see cref="M:System.String.GetHashCode" /> for reuse. The alternatives, e.g. <see cref="T:System.Security.Cryptography.MD5" /> or <see cref="T:System.Security.Cryptography.SHA256" />, use more storage space and are slower. This method offers a slim alternative that is suitable for hashing very short strings that are not used in a security-critical context.
</para>
        <para>
The hashcode generated by this method is not identical to the hashcode generated by the .NET Framework 4.0, because it uses roundshifting to preserve more information.
</para>
        <para>
The hashcodes generated with different values for <paramref name="hashType" /> may provide different hashcodes for an identical Char sequence and MUST therefore not be mixed.
</para>
        <para>
Do not use the hashcodes generated by this method for security-critical purposes (such as hashing passwords)!
</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashType" /> is not a defined value of the <see cref="T:FolkerKinzel.Strings.HashType" /> enum.</exception>
      <example>
        <code language="cs" source="..\Examples\Example.cs" />
      </example>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.GetTrimmedLength(System.Span{System.Char})">
      <summary>Returns the length that the character span would have without trailing white space.</summary>
      <param name="span">The span to examine.</param>
      <returns>The length that the span would have without trailing white space.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.GetTrimmedStart(System.Span{System.Char})">
      <summary>Returns the index of the first non-white-space character in the span.</summary>
      <param name="span">The span to examine.</param>
      <returns>The index of the first non-white-space character found in the span. If the span is empty or consists only of white space, the length of the span is returned.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.IndexOfAny(System.Span{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Searches for the zero-based index of the first occurrence of one of the specified Unicode characters.</summary>
      <param name="span">The span to examine.</param>
      <param name="values">A read-only character span that contains the characters to search for.</param>
      <returns>The zero-based index of the first occurrence of one of the specified Unicode characters in <paramref name="span" /> or -1 if none of these characters have been found. If <paramref name="values" /> is an empty span, the method returns -1.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.IndexOfAny(System.Char[])">String.IndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.IsAscii(System.Span{System.Char})">
      <summary>Checks whether the character span contains only Unicode characters that belong to the ASCII character set.</summary>
      <param name="span">A span of Unicode characters.</param>
      <returns>
        <c>false</c> if <paramref name="span" /> contains a Unicode character, which doesn't belong to the ASCII character set, otherwise <c>true</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.IsWhiteSpace(System.Span{System.Char})">
      <summary>Indicates whether the character span contains only white space characters.</summary>
      <param name="span">The span to examine.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> consists only of white space, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.LastIndexOf(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Specifies the zero-based index of the last occurrence of a specified character sequence in <paramref name="span" />. A parameter specifies the type of search for the specified character sequence.</summary>
      <param name="span">The span to search.</param>
      <param name="value">The span to search for.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based index of the last occurence of <paramref name="value" /> if that string is found, or -1 if it's not or if <paramref name="span" /> is empty.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.LastIndexOf(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.Int32,System.StringComparison)">
      <summary>Specifies the  zero based index position of the last occurrence of a specified character sequence in <paramref name="span" />. The search begins at a specified character position and runs backwards to the beginning of the character span for a specified number of character positions. A parameter specifies the type of comparison to be performed when searching for the specified character sequence.</summary>
      <param name="span">The span to search.</param>
      <param name="value">The span to search for.</param>
      <param name="startIndex">The start index of the search. The search is done backwards to the beginning of <paramref name="span" />.</param>
      <param name="count">The number of character positions to examine.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
      <returns>The zero-based start index of the <paramref name="value" /> parameter if this character sequence was found, or -1 if it was not found or <paramref name="span" /> is empty.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="count" /> is a negative value
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.Span`1.Empty" />, and <paramref name="startIndex" /> is a negative value.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.Span`1.Empty" />, and <paramref name="startIndex" /> is greater than the length of <paramref name="span" />.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.Span`1.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> indicates a position that is not within <paramref name="span" />.
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is <see cref="P:System.Span`1.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than 0.
</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a defined value of the <see cref="T:System.StringComparison" /> enum.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.LastIndexOfAny(System.Span{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Searches for the zero-based index of the last occurrence of one of the specified Unicode characters.</summary>
      <param name="span">The span to examine.</param>
      <param name="values">A read-only character span that contains the characters to search for.</param>
      <returns>The zero-based index of the last occurrence of one of the specified Unicode characters in <paramref name="span" /> or -1 if none of these characters have been found. If <paramref name="values" /> is an empty span, the method returns -1.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.LastIndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.LastIndexOfAny(System.Char[])">String.LastIndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.LastIndexOfAny(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.Int32)">
      <summary>Returns the zero-based index of the last occurrence of one of the specified characters in <paramref name="span" />. The search begins at a specified character position and runs a specified number of character positions backwards to the beginning of the <paramref name="span" />.</summary>
      <param name="span">The span to search.</param>
      <param name="values">A read-only character span that contains the characters to search for.</param>
      <param name="startIndex">The start index of the search. The search is done backwards to the beginning of <paramref name="span" />.</param>
      <param name="count">The number of characters positions to examine in <paramref name="span" />.</param>
      <returns>The zero-based index of the last occurrence of one of the specified Unicode characters in <paramref name="span" /> or -1 if none of these characters have been found.</returns>
      <remarks>If the length of <paramref name="values" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.LastIndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.LastIndexOfAny(System.Char[])">String.LastIndexOfAny(char[])</see> is used to avoid performance issues.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="span" /> is not <see cref="P:System.Span`1.Empty" /> and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of <paramref name="span" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="span" /> is not <see cref="P:System.Span`1.Empty" /> and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.StartsWith(System.Span{System.Char},System.Char)">
      <summary>Indicates whether <paramref name="span" /> starts with the specified character.</summary>
      <param name="span">The span to examine.</param>
      <param name="value">The Unicode character to search for.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> starts with <paramref name="value" />, otherwise  <c>false</c>.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Indicates whether a character span starts with <paramref name="value" />  when compared using a specified <see cref="T:System.StringComparison" /> value.</summary>
      <param name="span">The span to examine.</param>
      <param name="value">The character sequence to compare the beginning of <paramref name="span" /> with.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
      <returns>
        <c>true</c> if <paramref name="span" /> starts with <paramref name="value" />, otherwise  <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.ToLowerInvariant(System.Span{System.Char})">
      <summary>Converts the letters that <paramref name="span" /> references to lowercase letters using the rules of the invariant culture.</summary>
      <param name="span">The span whose content is changed.</param>
      <returns>A copy of <paramref name="span" />.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.SpanExtension.ToUpperInvariant(System.Span{System.Char})">
      <summary>Converts the letters that <paramref name="span" /> references to uppercase letters using the rules of the invariant culture.</summary>
      <param name="span">The span whose content is changed.</param>
      <returns>A copy of <paramref name="span" />.</returns>
    </member>
    <member name="T:FolkerKinzel.Strings.StaticStringMethod">
      <summary>Simulates static methods of the <see cref="T:System.String" /> class for .NET versions in which they are not available, and forwards the method calls in .NET versions in which the methods are available directly to the BCL methods.</summary>
    </member>
    <member name="M:FolkerKinzel.Strings.StaticStringMethod.Create``1(System.Int32,``0,FolkerKinzel.Strings.SpanAction{System.Char,``0})">
      <summary>Creates a new string with a specified length and, once created, initializes it using the specified callback.</summary>
      <typeparam name="TState">The type of the element to be passed to <paramref name="action" />.</typeparam>
      <param name="length">The length of the <see cref="T:System.String" /> to be created.</param>
      <param name="state">The element to be passed to <paramref name="action" />.</param>
      <param name="action">A callback to initialize the string.</param>
      <returns>The <see cref="T:System.String" /> created.</returns>
      <remarks>The method simulates the static method String.Create&lt;TState&gt;(int, TState, SpanAction&lt;char,TState&gt;). In newer .NET versions, the call is forwarded directly to the existing method of the <see cref="T:System.String" /> class. In .NET Framework and .NET Standard 2.0, the simulation makes it possible, when creating short <see cref="T:System.String" />s, to have only one heap allocation.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is negative.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StaticStringMethod.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatenates the string representations of four specified read-only character spans.</summary>
      <param name="str0">The first read-only character span to concatenate.</param>
      <param name="str1">The second read-only character span to concatenate.</param>
      <param name="str2">The third read-only character span to concatenate.</param>
      <param name="str3">The fourth read-only character span to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" /> and <paramref name="str3" />.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.StaticStringMethod.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatenates the string representations of three specified read-only character spans.</summary>
      <param name="str0">The first read-only character span to concatenate.</param>
      <param name="str1">The second read-only character span to concatenate.</param>
      <param name="str2">The third read-only character span to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="str0" />, <paramref name="str1" /> and <paramref name="str2" />.</returns>
    </member>
    <member name="M:FolkerKinzel.Strings.StaticStringMethod.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatenates the string representations of two specified read-only character spans.</summary>
      <param name="str0">The first read-only character span to concatenate.</param>
      <param name="str1">The first read-only character span to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="str0" /> and <paramref name="str1" />.</returns>
    </member>
    <member name="T:FolkerKinzel.Strings.StreamExtension">
      <summary>Extension methods for the <see cref="T:System.IO.Stream" /> class.</summary>
    </member>
    <member name="M:FolkerKinzel.Strings.StreamExtension.IsUtf8(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>Tests whether the specified section of <paramref name="stream" /> that extends at least <paramref name="count" /> decoded characters from the current <see cref="P:System.IO.Stream.Position" /> is UTF-8 text. The method includes the byte order mark (BOM) in the check.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to test.</param>
      <param name="count">The minimum number of characters to check. If <paramref name="count" /> is larger than <paramref name="stream" /> has data, <paramref name="stream" /> is examined beginning from the current <see cref="P:System.IO.Stream.Position" /> until EOF. If the parameter is passed a negative number or if <paramref name="count" /> is greater than the length of the data in  <paramref name="stream" />,  <paramref name="stream" /> is checked from the current position until EOF. If <c>0</c> is passed to the parameter, the method only checks the byte order mark (BOM).</param>
      <param name="leaveOpen">
        <c>true</c> to leave the stream open after the method has finished; otherwise, false.</param>
      <returns>
        <c>true</c> if the checked stream section represents UTF-8 text, <c>false</c> otherwise. In any case, if the method finds a UTF-8 BOM, it returns <c>true</c>. If <paramref name="count" /> is <c>0</c> and no UTF-8 BOM is found, <c>false</c> is returned.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <c>null</c>.</exception>
      <exception cref="T:System.IO.IOException">I/O error.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="stream" /> was already closed.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="stream" /> doesn't support read and seek operations.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StreamExtension.IsUtf8Valid(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>Tests whether the byte sequence of <paramref name="stream" /> that starts with the current <see cref="P:System.IO.Stream.Position" /> and is at least <paramref name="count" /> characters long is valid UTF-8.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to test.</param>
      <param name="count">The minimum number of characters to check. If a negative number is passed to the parameter (default) or if <paramref name="count" /> is greater than the length of the data in <paramref name="stream" />, <paramref name="stream" /> is checked beginning from its current <see cref="P:System.IO.Stream.Position" /> until EOF. The value <c>0</c> is not allowed.</param>
      <param name="leaveOpen">
        <c>true</c> to leave the stream open after the method has finished; otherwise, <c>false</c>.</param>
      <returns>
        <c>true</c> if the checked stream section represents valid UTF-8, <c>false</c> otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is <c>0</c>.</exception>
      <exception cref="T:System.IO.IOException">I/O error.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="stream" /> was already closed.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="stream" /> doesn't support read operations.</exception>
    </member>
    <member name="T:FolkerKinzel.Strings.StringBuilderExtension">
      <summary>Extension methods for the <see cref="T:System.Text.StringBuilder" /> class.</summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.AppendBase64(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.Byte},System.Base64FormattingOptions)">
      <summary>Appends the content of a <see cref="T:System.Byte" /> collection as Base64 encoded character sequence to the end of a <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="bytes">The <see cref="T:System.Byte" /> collection that contains the data.</param>
      <param name="options">An enumeration value that allows specifying whether line breaks should be automatically inserted into the Base64.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation has completed.</returns>
      <remarks>The method uses it's own Base64 implementation that is a little slower than the BCL methods but allocates much less heap memory.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> or <paramref name="bytes" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Increasing the capacity of <paramref name="builder" /> would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.AppendBase64(System.Text.StringBuilder,System.Byte[],System.Base64FormattingOptions)">
      <summary>Appends the content of a <see cref="T:System.Byte" /> array as Base64 encoded character sequence to the end of a <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="bytes">The <see cref="T:System.Byte" /> array that contains the data.</param>
      <param name="options">An enumeration value that allows specifying whether line breaks should be automatically inserted into the Base64.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation has completed.</returns>
      <remarks>The method uses it's own Base64 implementation that is a little slower than the BCL methods but allocates much less heap memory.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> or <paramref name="bytes" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Increasing the capacity of <paramref name="builder" /> would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.AppendBase64(System.Text.StringBuilder,System.ReadOnlySpan{System.Byte},System.Base64FormattingOptions)">
      <summary>Appends the content of a read-only <see cref="T:System.Byte" /> span as Base64 encoded character sequence to the end of a <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="bytes">The read-only <see cref="T:System.Byte" /> span that contains the data.</param>
      <param name="options">An enumeration value that allows specifying whether line breaks should be automatically inserted into the Base64.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation has completed.</returns>
      <remarks>The method uses it's own Base64 implementation that is a little slower than the BCL methods but allocates much less heap memory.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Increasing the capacity of <paramref name="builder" /> would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.AppendLine(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
      <summary>Appends a copy of the specified read-only character span followed by the standard line terminator to the end of a <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append characters to.</param>
      <param name="value">The read-only character span to append.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation has completed.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Increasing the capacity of <paramref name="builder" /> would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.AppendLine(System.Text.StringBuilder,System.ReadOnlyMemory{System.Char})">
      <summary>Appends a copy of the specified read-only character memory region followed by the standard line terminator to the end of a <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to which the characters are appended.</param>
      <param name="value">The read-only character memory region to append.</param>
      <returns>A reference to <paramref name="builder" /> after the append operation has completed.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Increasing the capacity of <paramref name="builder" /> would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.Contains(System.Text.StringBuilder,System.Char)">
      <summary>Indicates whether a specified Unicode character is found in a <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> has been found, <c>false</c> otherwise.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.Contains(System.Text.StringBuilder,System.Char,System.Int32)">
      <summary>Indicates whether a specified Unicode character is found in a <see cref="T:System.Text.StringBuilder" />. The search starts at the specified index.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <param name="startIndex">The start index of the search.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> is found, or <c>false</c> if it's not.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the number of characters in <paramref name="builder" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.Contains(System.Text.StringBuilder,System.Char,System.Int32,System.Int32)">
      <summary>Indicates whether a specified Unicode character is found in a <see cref="T:System.Text.StringBuilder" />.  The search begins at a specified index and a specified number of character positions are checked.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <param name="startIndex">The start index of the search.</param>
      <param name="count">The number of character positions to check.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> is found, or <c>false</c> if it's not.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="startIndex" /> or <paramref name="count" /> are smaller than zero or larger than the number of characters in <paramref name="builder" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="startIndex" /> + <paramref name="count" /> is larger than the number of characters in <paramref name="builder" />.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ContainsNewLine(System.Text.StringBuilder)">
      <summary>Indicates whether the <see cref="T:System.Text.StringBuilder" /> contains a newline character.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <returns>
        <c>true</c> if <paramref name="builder" /> contains a newline character, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ContainsNewLine(System.Text.StringBuilder,System.Int32)">
      <summary>Examines a section of the <see cref="T:System.Text.StringBuilder" /> that begins at <paramref name="startIndex" /> to see whether it contains a newline character.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the examination begins.</param>
      <returns>
        <c>true</c> if the specified section in <paramref name="builder" /> contains a newline character, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the number of characters in <paramref name="builder" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ContainsNewLine(System.Text.StringBuilder,System.Int32,System.Int32)">
      <summary>Examines a section of the <see cref="T:System.Text.StringBuilder" /> that begins at <paramref name="startIndex" /> and includes <paramref name="count" /> characters to determine whether this section contains a newline character.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the examination begins.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <c>true</c> if the specified section in <paramref name="builder" /> contains a newline character, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="startIndex" /> or <paramref name="count" /> are smaller than zero or larger than the number of characters in <paramref name="builder" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="startIndex" /> + <paramref name="count" /> is larger than the number of characters in <paramref name="builder" />.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ContainsNonAscii(System.Text.StringBuilder)">
      <summary>Indicates whether the <see cref="T:System.Text.StringBuilder" /> contains Unicode characters that do not belong to the ASCII character set.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is examined.</param>
      <returns>
        <c>true</c> if <paramref name="builder" /> contains a Unicode character, which doesn't belong to the ASCII character set; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ContainsNonAscii(System.Text.StringBuilder,System.Int32)">
      <summary>Examines a section of the <see cref="T:System.Text.StringBuilder" /> that begins at <paramref name="startIndex" /> to see whether it contains Unicode characters that do not belong to the ASCII character set .</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is examined.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the examination begins.</param>
      <returns>
        <c>true</c> if the specified section in <paramref name="builder" /> contains a Unicode character, which doesn't belong to the ASCII character set; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the number of characters in <paramref name="builder" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ContainsNonAscii(System.Text.StringBuilder,System.Int32,System.Int32)">
      <summary>Examines a section of the <see cref="T:System.Text.StringBuilder" /> that begins at <paramref name="startIndex" /> and includes <paramref name="count" /> characters to determine whether this section contains Unicode characters that do not belong to the ASCII character set.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is examined.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the examination begins.</param>
      <param name="count">The length of the section to examine.</param>
      <returns>
        <c>true</c> if the specified section in <paramref name="builder" /> contains a Unicode character, which doesn't belong to the ASCII character set; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="startIndex" /> or <paramref name="count" /> are smaller than zero or larger than the number of characters in <paramref name="builder" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="startIndex" /> + <paramref name="count" /> is larger than the number of characters in <paramref name="builder" />.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ContainsWhiteSpace(System.Text.StringBuilder)">
      <summary>Indicates whether the <see cref="T:System.Text.StringBuilder" /> contains white space.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <returns>
        <c>true</c> if <paramref name="builder" /> contains white space, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> is used to identify white space.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ContainsWhiteSpace(System.Text.StringBuilder,System.Int32)">
      <summary>Examines a section of the <see cref="T:System.Text.StringBuilder" /> that begins at <paramref name="startIndex" /> to see whether it contains white space.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the examination begins.</param>
      <returns>
        <c>true</c> if the specified section in <paramref name="builder" /> contains white space, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> is used to identify white space.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the number of characters in <paramref name="builder" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ContainsWhiteSpace(System.Text.StringBuilder,System.Int32,System.Int32)">
      <summary>Examines a section of the <see cref="T:System.Text.StringBuilder" /> that begins at <paramref name="startIndex" /> and includes <paramref name="count" /> characters to determine whether this section contains white space.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the examination begins.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <c>true</c> if the specified section in <paramref name="builder" /> contains white space, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> is used to identify white space.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="startIndex" /> or <paramref name="count" /> are smaller than zero or larger than the number of characters in <paramref name="builder" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="startIndex" /> + <paramref name="count" /> is larger than the number of characters in <paramref name="builder" />.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.EndsWith(System.Text.StringBuilder,System.Char)">
      <summary>Indicates whether the specified Unicode character matches the end of the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> matches the end of <paramref name="builder" />; otherwise, <c>false</c>.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.GetPersistentHashCode(System.Text.StringBuilder,FolkerKinzel.Strings.HashType)">
      <summary>Generates the same <see cref="T:System.Int32" /> hash code for an identical string of characters each time the program is run.</summary>
      <param name="builder">The Char sequence to be hashed.</param>
      <param name="hashType">The kind of hashcode to be generated.</param>
      <returns>The hashcode.</returns>
      <remarks>
        <para>
The method <see cref="M:System.String.GetHashCode">String.GetHashCode()</see> returns a different hash code for an identical string with each program run for security reasons. Apart from the fact that the hash algorithm of <see cref="M:System.String.GetHashCode">String.GetHashCode()</see> could be different in different framework versions, it makes no sense to use the return value of <see cref="M:System.String.GetHashCode" /> for reuse. The alternatives, e.g. <see cref="T:System.Security.Cryptography.MD5" /> or <see cref="T:System.Security.Cryptography.SHA256" />, use more storage space and are slower. This method offers a slim alternative that is suitable for hashing very short strings that are not used in a security-critical context.
</para>
        <para>
The hashcode generated by this method is not identical to the hashcode generated by the .NET Framework 4.0, because it uses roundshifting to preserve more information.
</para>
        <para>
The hashcodes generated with different values for <paramref name="hashType" /> may provide different hashcodes for an identical Char sequence and MUST therefore not be mixed.
</para>
        <para>
Do not use the hashcodes generated by this method for security-critical purposes (such as hashing passwords)!
</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashType" /> is not a defined value of the <see cref="T:FolkerKinzel.Strings.HashType" /> enum.</exception>
      <example>
        <code language="cs" source="..\Examples\Example.cs" />
      </example>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.IndexOf(System.Text.StringBuilder,System.Char)">
      <summary>Specifies the zero-based index of the first occurrence of the specified character in <paramref name="builder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <returns>The zero-based index position of <paramref name="value" /> from the beginning of the <see cref="T:System.Text.StringBuilder" />, if this character was found, otherwise -1.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.IndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
      <summary>Returns the zero-based index of the first occurrence of the specified character in <paramref name="builder" />. The search starts at the specified index.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <param name="startIndex">The start index of the search.</param>
      <returns>The zero-based index of <paramref name="value" /> if that character is found, or -1 if it's not.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the number of characters in <paramref name="builder" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.IndexOf(System.Text.StringBuilder,System.Char,System.Int32,System.Int32)">
      <summary>Returns the zero-based index of the first occurrence of the specified character in <paramref name="builder" />. The search begins at a specified index and a specified number of character positions are checked.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <param name="startIndex">The start index of the search.</param>
      <param name="count">The number of character positions to check.</param>
      <returns>The zero-based index position of <paramref name="value" /> from the beginning of the <see cref="T:System.Text.StringBuilder" />, if this character was found, otherwise -1.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="startIndex" /> or <paramref name="count" /> are smaller than zero or larger than the number of characters in <paramref name="builder" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="startIndex" /> + <paramref name="count" /> is larger than the number of characters in <paramref name="builder" />.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.LastIndexOf(System.Text.StringBuilder,System.Char)">
      <summary>Returns the zero-based index of the last occurrence of the specified character in <paramref name="builder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> if this character has been found, otherwise -1.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.LastIndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
      <summary>Returns the zero-based index of the last occurrence of the specified character in <paramref name="builder" />. The search begins at a specified character position and runs backwards to the beginning of the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <param name="startIndex">The start index of the search. The search is done backwards to the beginning of <paramref name="builder" />.</param>
      <returns>The zero-based index of the last occurence of <paramref name="value" /> if that character is found, or -1 if it's not.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="builder" /> is not empty and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of <paramref name="builder" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.LastIndexOf(System.Text.StringBuilder,System.Char,System.Int32,System.Int32)">
      <summary>Specifies the zero-based index of the last occurrence of the specified character in <paramref name="builder" />. The search begins at a specified index and runs backwards for a specified number of character positions to the beginning of the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to search.</param>
      <param name="value">The Unicode character to search for.</param>
      <param name="startIndex">The start index of the search. The search is done backwards to the beginning of <paramref name="builder" />.</param>
      <param name="count">The number of characters positions to examine.</param>
      <returns>If <paramref name="value" /> was found, the zero-based index position of its last occurrence within the section to be searched, otherwise -1.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="builder" /> is not empty and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of <paramref name="builder" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="builder" /> is not empty and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.NormalizeNewLinesTo(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
      <summary>Replaces all newlines in <paramref name="builder" /> with <paramref name="newLine" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="newLine">A read-only character span that is the replacement for all newlines. If an empty span is passed to the parameter, all newline characters will be completely removed.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <remarks>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters. The sequences CRLF and LFCR are treated as one line break.
</para>
        <note type="caution">
This method differs from <see cref="M:FolkerKinzel.Strings.StringBuilderExtension.ReplaceLineEndings(System.Text.StringBuilder,System.String)" /> in that it also treats LFCR sequences and vertical tab (VT: U+000B ) as a line break.
</note>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ReplaceLineEndings(System.Text.StringBuilder,System.String)">
      <summary>Replaces all newlines in <paramref name="builder" /> with <paramref name="newLine" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="replacementText">The text to use as replacement. If <paramref name="replacementText" /> is <c>null</c> or <see cref="F:System.String.Empty" />, all newlines will be removed.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <remarks>
        <para>
The list of recognized newline sequences is:
</para>
        <list type="bullet">
          <item>
CR (U+000D)
</item>
          <item>
LF (U+000A)
</item>
          <item>
CRLF (U+000D U+000A)
</item>
          <item>
NEL (U+0085)
</item>
          <item>
LS (U+2028)
</item>
          <item>
FF (U+000C)
</item>
          <item>
PS (U+2029)
</item>
        </list>
        <para>
This list is given by the Unicode Standard, Sec. 5.8, Recommendation R4 and Table 5-2.
</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ReplaceWhiteSpaceWith(System.Text.StringBuilder,System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary>Replaces in <paramref name="builder" /> all sequences of white space with <paramref name="replacement" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="replacement">A read-only character span that is the replacement for all white space sequences. If an empty span is passed to the parameter, each white space will be completely removed.</param>
      <param name="skipNewLines">Pass <c>true</c> to exclude newline characters from the replacement. The default value is <c>false</c>.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <remarks>
        <para>
The method uses <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> to identify white space characters and works more thoroughly with it than <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">Regex.Replace(string input, @"\s+", string replacement)</see>.
</para>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.
</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ReplaceWhiteSpaceWith(System.Text.StringBuilder,System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)">
      <summary>Replaces in a section of <paramref name="builder" />, which starts at <paramref name="startIndex" /> and extends to the end of <paramref name="builder" />, all sequences of white space with <paramref name="replacement" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="replacement">A read-only character span that is the replacement for all white space sequences. If an empty span is passed to the parameter, each white space will be completely removed.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the replacement starts.</param>
      <param name="skipNewLines">Pass <c>true</c> to exclude newline characters from the replacement. The default value is <c>false</c>.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <remarks>
        <para>
The method uses <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> to identify white space characters and works more thoroughly with it than <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">Regex.Replace(string input, @"\s+", string replacement)</see>.
</para>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.
</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the number of characters in <paramref name="builder" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ReplaceWhiteSpaceWith(System.Text.StringBuilder,System.ReadOnlySpan{System.Char},System.Int32,System.Int32,System.Boolean)">
      <summary>Replaces in a section of <paramref name="builder" />, which starts at <paramref name="startIndex" /> and which is <paramref name="count" /> characters long, all sequences of white space with <paramref name="replacement" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="replacement">A read-only character span that is the replacement for all white space sequences. If an empty span is passed to the parameter, each white space will be completely removed.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the replacement starts.</param>
      <param name="count">The length of the specified section in <paramref name="builder" /> where replacement operations take place.</param>
      <param name="skipNewLines">Pass <c>true</c> to exclude newline characters from the replacement. The default value is <c>false</c>.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <remarks>
        <para>
The method uses <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> to identify white space characters and works more thoroughly with it than <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">Regex.Replace(string input, @"\s+", string replacement)</see>.
</para>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.
</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="startIndex" /> or <paramref name="count" /> are smaller than zero or larger than the number of characters in <paramref name="builder" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="startIndex" /> + <paramref name="count" /> is larger than the number of characters in <paramref name="builder" />.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.StartsWith(System.Text.StringBuilder,System.Char)">
      <summary>Indicates whether the specified Unicode character matches the beginning of <paramref name="builder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is examined.</param>
      <param name="value">The Unicode character to search for.</param>
      <returns>
        <c>true</c> if value matches the beginning of <paramref name="builder" />; otherwise, <c>false</c>.</returns>
      <remarks>The method performs an ordinal character comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ToLowerInvariant(System.Text.StringBuilder)">
      <summary>Converts the entire content of a <see cref="T:System.Text.StringBuilder" /> to lowercase letters using the rules of the invariant culture.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ToLowerInvariant(System.Text.StringBuilder,System.Int32)">
      <summary>Converts the content of a <see cref="T:System.Text.StringBuilder" /> starting with <paramref name="startIndex" /> into lowercase letters and uses the rules of the invariant culture.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the conversion starts.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the number of characters in <paramref name="builder" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ToLowerInvariant(System.Text.StringBuilder,System.Int32,System.Int32)">
      <summary>Converts the content of a section in <see cref="T:System.Text.StringBuilder" /> that begins at <paramref name="startIndex" /> and includes <paramref name="count" /> characters to lowercase using the rules of the invariant culture.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the conversion starts.</param>
      <param name="count">The number of characters to convert.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="startIndex" /> or <paramref name="count" /> are smaller than zero or larger than the number of characters in <paramref name="builder" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="startIndex" /> + <paramref name="count" /> is larger than the number of characters in <paramref name="builder" />.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ToUpperInvariant(System.Text.StringBuilder)">
      <summary>Converts the entire content of a <see cref="T:System.Text.StringBuilder" /> to uppercase letters using the rules of the invariant culture.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ToUpperInvariant(System.Text.StringBuilder,System.Int32)">
      <summary>Converts the content of a <see cref="T:System.Text.StringBuilder" /> starting with <paramref name="startIndex" /> into uppercase letters and uses the rules of the invariant culture.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the conversion starts.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the number of characters in <paramref name="builder" />.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.ToUpperInvariant(System.Text.StringBuilder,System.Int32,System.Int32)">
      <summary>Converts the content of a section in <see cref="T:System.Text.StringBuilder" /> that begins at <paramref name="startIndex" /> and includes <paramref name="count" /> characters to uppercase using the rules of the invariant culture.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="startIndex">The zero-based index in <paramref name="builder" /> at which the conversion starts.</param>
      <param name="count">The number of characters to convert.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="startIndex" /> or <paramref name="count" /> are smaller than zero or larger than the number of characters in <paramref name="builder" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="startIndex" /> + <paramref name="count" /> is larger than the number of characters in <paramref name="builder" />.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.Trim(System.Text.StringBuilder)">
      <summary>Removes all leading and trailing white-space characters from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.Trim(System.Text.StringBuilder,System.Char)">
      <summary>Removes all leading and trailing instances of a character from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="trimChar">A Unicode character to remove.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.Trim(System.Text.StringBuilder,System.Char[])">
      <summary>Removes all leading and trailing occurrences of a set of characters specified in an array from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="trimChars">An array of Unicode characters to remove, or <c>null</c>. If <paramref name="trimChars" /> is <c>null</c> or an empty array, Unicode white-space characters are removed instead.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.Trim(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
      <summary>Removes all leading and trailing occurrences of a set of characters specified in a Span from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="trimChars">A Span of Unicode characters to remove. If <paramref name="trimChars" /> is an empty Span, Unicode white-space characters are removed instead.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.TrimEnd(System.Text.StringBuilder)">
      <summary>Removes all the trailing white-space characters from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.TrimEnd(System.Text.StringBuilder,System.Char)">
      <summary>Removes all the trailing white-space characters from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="trimChar">A Unicode character to remove.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.TrimEnd(System.Text.StringBuilder,System.Char[])">
      <summary>Removes all the trailing occurrences of a set of characters specified in an array from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="trimChars">An array of Unicode characters to remove, or <c>null</c>. If <paramref name="trimChars" /> is <c>null</c> or an empty array, Unicode white-space characters are removed instead.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.TrimEnd(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
      <summary>Removes all trailing occurrences of a set of characters specified in a Span from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="trimChars">A Span of Unicode characters to remove. If <paramref name="trimChars" /> is an empty Span, Unicode white-space characters are removed instead.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.TrimStart(System.Text.StringBuilder)">
      <summary>Removes all the leading white-space characters from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.TrimStart(System.Text.StringBuilder,System.Char)">
      <summary>Removes all the leading occurrences of a specified character from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="trimChar">The Unicode character to remove.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.TrimStart(System.Text.StringBuilder,System.Char[])">
      <summary>Removes all the leading occurrences of a set of characters specified in an array from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="trimChars">An array of Unicode characters to remove, or <c>null</c>. If <paramref name="trimChars" /> is <c>null</c> or an empty array, Unicode white-space characters are removed instead.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringBuilderExtension.TrimStart(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
      <summary>Removes all leading occurrences of a set of characters specified in a Span from the <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> whose content is changed.</param>
      <param name="trimChars">A Span of Unicode characters to remove. If <paramref name="trimChars" /> is an empty Span, Unicode white-space characters are removed instead.</param>
      <returns>A reference to <paramref name="builder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> is <c>null</c>.</exception>
    </member>
    <member name="T:FolkerKinzel.Strings.StringExtension">
      <summary>Extension methods for the <see cref="T:System.String" /> class.</summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.ContainsAny(System.String,System.Char,System.Char)">
      <summary>Indicates whether a <see cref="T:System.String" /> contains one of the two characters that are passed to the method as arguments.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="value0">The first character to search for.</param>
      <param name="value1">The second character to search for.</param>
      <returns>
        <c>true</c> if one of the characters to be searched for is found, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, T, T)</see> is used for the comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.ContainsAny(System.String,System.Char,System.Char,System.Char)">
      <summary>Indicates whether a <see cref="T:System.String" /> contains one of the 3 characters that are passed to the method as arguments.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="value0">The first character to search for.</param>
      <param name="value1">The second character to search for.</param>
      <param name="value2">The third character to search for.</param>
      <returns>
        <c>true</c> if one of the characters to be searched for is found, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, T, T, T)</see> is used for the comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.ContainsAny(System.String,System.ReadOnlySpan{System.Char})">
      <summary>Indicates whether a <see cref="T:System.String" /> contains one of the Unicode characters that are passed to the method in a read-only span.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="anyOf">A read-only span, which contains the characters to search for.</param>
      <returns>
        <c>true</c> if one of the characters to be searched for is found in <paramref name="s" />, otherwise <c>false</c>. If <paramref name="s" /> or <paramref name="anyOf" /> have the length zero, <c>false</c> is returned.</returns>
      <remarks>If the length of <paramref name="anyOf" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="anyOf" /> is greater, <see cref="M:System.String.IndexOfAny(System.Char[])">String.IndexOfAny(char[])</see> is used.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.ContainsAny(System.String,System.Char[])">
      <summary>Indicates whether a <see cref="T:System.String" /> contains one of the Unicode characters that are passed to the method as an array.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="anyOf">An array, which contains the characters to search for.</param>
      <returns>
        <c>true</c> if one of the characters to be searched for is found in <paramref name="s" />, otherwise <c>false</c>. If <paramref name="s" /> or <paramref name="anyOf" /> have the length zero, <c>false</c> is returned.</returns>
      <remarks>
        <see cref="M:System.String.IndexOfAny(System.Char[])" /> is used for the comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="anyOf" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.ContainsNewLine(System.String)">
      <summary>Indicates whether the <see cref="T:System.String" /> contains a newline character.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <returns>
        <c>true</c> if <paramref name="s" /> contains a newline character, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.ContainsWhiteSpace(System.String)">
      <summary>Indicates whether a <see cref="T:System.String" /> contains white space.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <returns>
        <c>true</c> if <paramref name="s" /> contains white space, otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> is used for the comparison.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.GetPersistentHashCode(System.String,FolkerKinzel.Strings.HashType)">
      <summary>Generates the same <see cref="T:System.Int32" /> hash code for an identical string of characters each time the program is run.</summary>
      <param name="s">The Char sequence to be hashed.</param>
      <param name="hashType">The kind of hashcode to be generated.</param>
      <returns>The hashcode.</returns>
      <remarks>
        <para>
The method <see cref="M:System.String.GetHashCode">String.GetHashCode()</see> returns a different hash code for an identical string with each program run for security reasons. Apart from the fact that the hash algorithm of <see cref="M:System.String.GetHashCode">String.GetHashCode()</see> could be different in different framework versions, it makes no sense to use the return value of <see cref="M:System.String.GetHashCode" /> for reuse. The alternatives, e.g. <see cref="T:System.Security.Cryptography.MD5" /> or <see cref="T:System.Security.Cryptography.SHA256" />, use more storage space and are slower. This method offers a slim alternative that is suitable for hashing very short strings that are not used in a security-critical context.
</para>
        <para>
The hashcode generated by this method is not identical to the hashcode generated by the .NET Framework 4.0, because it uses roundshifting to preserve more information.
</para>
        <para>
The hashcodes generated with different values for <paramref name="hashType" /> may provide different hashcodes for an identical Char sequence and MUST therefore not be mixed.
</para>
        <para>
Do not use the hashcodes generated by this method for security-critical purposes (such as hashing passwords)!
</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashType" /> is not a defined value of the <see cref="T:FolkerKinzel.Strings.HashType" /> enum.</exception>
      <example>
        <code language="cs" source="..\Examples\Example.cs" />
      </example>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.IndexOfAny(System.String,System.ReadOnlySpan{System.Char},System.Int32,System.Int32)">
      <summary>Returns the zero-based index of the first occurrence of one of the the specified characters in <paramref name="s" />. The search begins at a specified index and a specified number of character positions are checked.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="anyOf">A read-only span, which contains the characters to search for.</param>
      <param name="startIndex">The zero-based index in <paramref name="s" /> at which the search starts.</param>
      <param name="count">The number of characters positions to examine in <paramref name="s" />.</param>
      <returns>The zero-based index of the first occurrence of one of the specified Unicode characters in <paramref name="s" /> or -1 if none of these characters have been found. If <paramref name="anyOf" /> is an empty span, the method returns -1.</returns>
      <remarks>If the length of <paramref name="anyOf" /> is less than 5, the method uses <see cref="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">MemoryExtensions.IndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)</see> for the comparison. If the length of <paramref name="anyOf" /> is greater, <see cref="M:System.String.IndexOfAny(System.Char[])">String.IndexOfAny(char[])</see> is used.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="anyOf" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="startIndex" /> or <paramref name="count" /> are smaller than zero
</para>
        <para>
- or -
</para>
        <para>
          <paramref name="startIndex" /> + <paramref name="count" /> is larger than the number of characters in <paramref name="value" />.
</para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.IsAscii(System.String)">
      <summary>Indicates whether the <see cref="T:System.String" /> contains Unicode characters that do not belong to the ASCII character set.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <returns>
        <c>false</c> if <paramref name="s" /> contains a Unicode character, which doesn't belong to the ASCII character set; otherwise, <c>true</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.LastIndexOfAny(System.String,System.ReadOnlySpan{System.Char},System.Int32,System.Int32)">
      <summary>Returns the zero-based index position of the last occurrence of one of the specified characters in <paramref name="s" />. The search begins at a specified index and runs backwards to the beginning of the <see cref="T:System.String" /> for a specified number of character positions.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="anyOf">A read-only span, which contains the characters to search for.</param>
      <param name="startIndex">The start index of the search. The search is done backwards to the beginning of <paramref name="s" />.</param>
      <param name="count">The number of characters positions to examine in <paramref name="s" />.</param>
      <returns>The zero-based index of the last occurrence of one of the specified Unicode characters in the specified part of <paramref name="s" /> or -1 if none of these characters have been found in this area.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="s" /> is not <see cref="F:System.String.Empty" /> and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of <paramref name="s" /></para>
        <para>
- or -
</para>
        <para>
          <paramref name="s" /> is not <see cref="F:System.String.Empty" /> and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.
</para>
      </exception>
      <remarks>If the length of <paramref name="anyOf" /> is less than 5, the method uses MemoryExtensions.LastIndexOfAny&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;) for the comparison. If the length of <paramref name="values" /> is greater, <see cref="M:System.String.LastIndexOfAny(System.Char[])" /> is used.</remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.NormalizeNewLinesTo(System.String,System.ReadOnlySpan{System.Char})">
      <summary>Generates a <see cref="T:System.String" /> in which all newlines are replaced by <paramref name="newLine" />.</summary>
      <param name="s">The source <see cref="T:System.String" />.</param>
      <param name="newLine">A read-only character span that is the replacement for all newlines. If an empty span is passed to the parameter, all newline characters will be completely removed.</param>
      <returns>A new <see cref="T:System.String" /> in which all newlines are replaced by <paramref name="replacement" />. If <paramref name="s" /> doesn't contain a newline character, <paramref name="s" /> is returned.</returns>
      <remarks>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters. The sequences CRLF and LFCR are treated as one line break.
</para>
        <note type="caution">
This method differs from <see cref="M:FolkerKinzel.Strings.StringExtension.ReplaceLineEndings(System.String,System.String)" /> in that it also treats LFCR sequences and vertical tab (VT: U+000B ) as a line break.
</note>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.ReplaceLineEndings(System.String)">
      <summary>Replaces all newlines in <paramref name="s" /> with <see cref="P:System.Environment.NewLine" />.</summary>
      <param name="s">The source <see cref="T:System.String" />.</param>
      <returns>A <see cref="T:System.String" /> whose contents match the content of <paramref name="s" />, but with all newline sequences replaced with <see cref="P:System.Environment.NewLine" />.</returns>
      <remarks>
        <para>
This is a polyfill for the .NET 6.0 method String.ReplaceLineEndings(). The method should therefore only be used in the extension method syntax. It throws a <see cref="T:System.NullReferenceException" /> if <paramref name="s" /> is <c>null</c> in order to show identical behavior to the original .NET method.
</para>
        <para>
The method searches for all newline sequences within <paramref name="s" /> and canonicalizes them to match the newline sequence for the current environment. For example, when running on Windows, all occurrences of non-Windows Newline sequences are replaced with the sequence CRLF. When running on Unix, all occurrences of non-Unix Newline sequences are replaced with a single LF character.
</para>
        <para>
The list of recognized newline sequences is:
</para>
        <list type="bullet">
          <item>
CR (U+000D)
</item>
          <item>
LF (U+000A)
</item>
          <item>
CRLF (U+000D U+000A)
</item>
          <item>
NEL (U+0085)
</item>
          <item>
LS (U+2028)
</item>
          <item>
FF (U+000C)
</item>
          <item>
PS (U+2029)
</item>
        </list>
        <para>
This list is specified by the Unicode standard (Sec. 5.8, Recommendation R4 and Table 5-2).
</para>
      </remarks>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.ReplaceLineEndings(System.String,System.String)">
      <summary>Replaces all newlines in <paramref name="s" /> with <paramref name="replacementText" />.</summary>
      <param name="s">The source <see cref="T:System.String" />.</param>
      <param name="replacementText">The text to use as replacement. If <paramref name="replacementText" /> is <see cref="F:System.String.Empty" />, all newline sequences within <paramref name="s" /> will be removed.</param>
      <returns>A <see cref="T:System.String" /> whose contents match the content of <paramref name="s" />, but with all newline sequences replaced with <paramref name="replacementText" />.</returns>
      <remarks>
        <para>
This is a polyfill for the .NET 6.0 method String.ReplaceLineEndings(String). The method should therefore only be used in the extension method syntax. It throws a <see cref="T:System.NullReferenceException" /> if <paramref name="s" /> is <c>null</c> in order to show identical behavior to the original .NET method.
</para>
        <para>
The method searches for all newline sequences within <paramref name="s" /> and canonicalizes them to match <paramref name="replacementText" />.
</para>
        <para>
The list of recognized newline sequences is:
</para>
        <list type="bullet">
          <item>
CR (U+000D)
</item>
          <item>
LF (U+000A)
</item>
          <item>
CRLF (U+000D U+000A)
</item>
          <item>
NEL (U+0085)
</item>
          <item>
LS (U+2028)
</item>
          <item>
FF (U+000C)
</item>
          <item>
PS (U+2029)
</item>
        </list>
        <para>
This list is specified by the Unicode standard (Sec. 5.8, Recommendation R4 and Table 5-2).
</para>
      </remarks>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacementText" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.ReplaceWhiteSpaceWith(System.String,System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary>Generates a <see cref="T:System.String" /> in which all sequences of white space are replaced by <paramref name="replacement" />.</summary>
      <param name="s">The source <see cref="T:System.String" />.</param>
      <param name="replacement">A read-only character span that is the replacement for all white space sequences. If an empty span is passed to the parameter, each white space will be completely removed.</param>
      <param name="skipNewLines">Pass <c>true</c> to exclude newline characters from the replacement. The default value is <c>false</c>.</param>
      <returns>A new <see cref="T:System.String" /> in which all sequences of white space are replaced by <paramref name="replacement" />. If <paramref name="s" /> doesn't contain a white space character, <paramref name="s" /> is returned.</returns>
      <remarks>
        <para>
The method uses <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> to identify white space characters and works more thoroughly with it than <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">Regex.Replace(string input, @"\s+", string replacement)</see>.
</para>
        <para>
          <see cref="M:FolkerKinzel.Strings.CharExtension.IsNewLine(System.Char)" /> is used to identify newline characters.
</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.Trim(System.String,System.ReadOnlySpan{System.Char})">
      <summary>Generates a <see cref="T:System.String" /> from which all leading and trailing occurrences of the characters in the specified Span are removed.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="trimChars">A Span of Unicode characters to remove. If <paramref name="trimChars" /> is an empty Span, Unicode white-space characters are removed instead.</param>
      <returns>The resulting <see cref="T:System.String" /> after removing all characters passed in the <paramref name="trimChars" /> parameter from the beginning and end of the <see cref="T:System.String" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.TrimEnd(System.String,System.ReadOnlySpan{System.Char})">
      <summary>Generates a <see cref="T:System.String" /> from which all trailing occurrences of the characters in the specified Span are removed.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="trimChars">A Span of Unicode characters to remove. If <paramref name="trimChars" /> is an empty Span, Unicode white-space characters are removed instead.</param>
      <returns>The resulting <see cref="T:System.String" /> after removing all characters passed in the <paramref name="trimChars" /> parameter from the end of the <see cref="T:System.String" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.StringExtension.TrimStart(System.String,System.ReadOnlySpan{System.Char})">
      <summary>Generates a <see cref="T:System.String" /> from which all leading occurrences of the characters in the specified Span are removed.</summary>
      <param name="s">The <see cref="T:System.String" /> to search.</param>
      <param name="trimChars">A Span of Unicode characters to remove. If <paramref name="trimChars" /> is an empty Span, Unicode white-space characters are removed instead.</param>
      <returns>The resulting <see cref="T:System.String" /> after removing all characters passed in the <paramref name="trimChars" /> parameter from the beginning of the <see cref="T:System.String" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <c>null</c>.</exception>
    </member>
    <member name="T:FolkerKinzel.Strings.TextEncodingConverter">
      <summary>Encapsulates methods that support creating appropriate instances of the <see cref="T:System.Text.Encoding" /> class.</summary>
    </member>
    <member name="M:FolkerKinzel.Strings.TextEncodingConverter.GetEncoding(System.String,System.Boolean)">
      <summary>Returns a corresponding <see cref="T:System.Text.Encoding" /> object for the specified identifier of a character set.</summary>
      <param name="encodingWebName">The identifier of the character set.</param>
      <param name="throwOnInvalidWebName">Pass <c>true</c> to have the method throw an <see cref="T:System.ArgumentException" /> if <paramref name="encodingWebName" /> could not be converted.</param>
      <returns>An <see cref="T:System.Text.Encoding" /> object that corresponds to the specified character set identifier. If no match is found, <see cref="P:System.Text.Encoding.UTF8" /> is returned by default. If the method is called with <c>true</c> as an argument for the <paramref name="throwOnInvalidWebName" /> parameter, an <see cref="T:System.ArgumentException" /> will be thrown instead.</returns>
      <remarks>
        <para>
.NET Standard and .NET 5.0 or later only recognize a small number of character sets by default. The method overrides this default.
</para>
        <para>
The properties <see cref="P:System.Text.Encoding.EncoderFallback" /> and <see cref="P:System.Text.Encoding.DecoderFallback" /> of the generated <see cref="T:System.Text.Encoding" /> object are set to ReplacementFallback.
</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="encodingWebName" /> could not be mapped to a <see cref="T:System.Text.Encoding" /> object. An exception is only thrown if the optional parameter <paramref name="throwOnInvalidWebName" /> is <c>true</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.TextEncodingConverter.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback,System.Boolean)">
      <summary>Returns a corresponding <see cref="T:System.Text.Encoding" /> object for the specified identifier of a character set, whose properties <see cref="P:System.Text.Encoding.EncoderFallback" /> and <see cref="P:System.Text.Encoding.DecoderFallback" /> are set to the desired values.</summary>
      <param name="encodingWebName">The identifier of the character set.</param>
      <param name="encoderFallback">An object that provides an error handling mechanism if a character cannot be encoded with the <see cref="T:System.Text.Encoding" /> object.</param>
      <param name="decoderFallback">An object that provides an error handling mechanism if a <see cref="T:System.Byte" /> sequence cannot be decoded with the <see cref="T:System.Text.Encoding" /> object .</param>
      <param name="throwOnInvalidWebName">Pass <c>true</c> to have the method throw an <see cref="T:System.ArgumentException" /> if <paramref name="encodingWebName" /> could not be converted.</param>
      <returns>An <see cref="T:System.Text.Encoding" /> object that corresponds to the specified identifier of a character set and whose properties <see cref="P:System.Text.Encoding.EncoderFallback" /> and <see cref="P:System.Text.Encoding.DecoderFallback" /> are set to the desired values. If no match is found, a corresponding <see cref="P:System.Text.Encoding" /> object for UTF-8 is returned by default. If the method is called with <c>true</c> as an argument for the <paramref name="throwOnInvalidWebName" /> parameter, an <see cref="T:System.ArgumentException" /> will be thrown instead.</returns>
      <remarks>.NET Standard and .NET 5.0 or higher recognize by default only a small number of character sets. The method overrides this default setting.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoderFallback" /> or <paramref name="decoderFallback" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="encodingWebName" /> could not be mapped to a <see cref="T:System.Text.Encoding" /> object. An exception is only thrown if the optional parameter <paramref name="throwOnInvalidWebName" /> is <c>true</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.TextEncodingConverter.GetEncoding(System.Int32,System.Boolean)">
      <summary>Returns a corresponding <see cref="T:System.Text.Encoding" /> object for the specified code page number.</summary>
      <param name="codePage">
        <para>
The code page number.
</para>
        <note type="caution">
          <c>0</c> is treated as an invalid argument. This behavior is different from that of the <see cref="T:System.Text.Encoding" /> class.
</note>
      </param>
      <param name="throwOnInvalidCodePage">Pass <c>true</c> to have the method throw an <see cref="T:System.ArgumentException" /> if <paramref name="codePage" /> could not be converted.</param>
      <returns>An <see cref="T:System.Text.Encoding" /> object that corresponds to the specified code page number. If no match is found, <see cref="P:System.Text.Encoding.UTF8" /> is returned by default. If the method is called with <c>true</c> as an argument for the <paramref name="throwOnInvalidCodePage" /> parameter, an <see cref="T:System.ArgumentException" /> will be thrown instead.</returns>
      <remarks>
        <para>
.NET Standard and .NET 5.0 or later only recognize a small number of character sets by default. The method overrides this default.
</para>
        <para>
The properties <see cref="P:System.Text.Encoding.EncoderFallback" /> and <see cref="P:System.Text.Encoding.DecoderFallback" /> of the generated <see cref="T:System.Text.Encoding" /> object are set to ReplacementFallback.
</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codePage" /> is less than 1 or greater than 65535. This exception is only thrown if the optional parameter <paramref name="throwOnInvalidCodePage" /> is 
<c>true</c>.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codePage" /> could not be mapped to a <see cref="T:System.Text.Encoding" /> object. This exception is only thrown if the optional parameter <paramref name="throwOnInvalidWebName" /> is <c>true</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.TextEncodingConverter.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback,System.Boolean)">
      <summary>Returns a corresponding <see cref="T:System.Text.Encoding" /> object for a specified code page number, whose properties <see cref="P:System.Text.Encoding.EncoderFallback" /> and <see cref="P:System.Text.Encoding.DecoderFallback" /> are set to the desired values.</summary>
      <param name="codePage">
        <para>
The code page number.
</para>
        <note type="caution">
          <c>0</c> is treated as an invalid argument. This behavior is different from that of the <see cref="T:System.Text.Encoding" /> class.
</note>
      </param>
      <param name="encoderFallback">An object that provides an error handling mechanism if a character cannot be encoded with the <see cref="T:System.Text.Encoding" /> object.</param>
      <param name="decoderFallback">An object that provides an error handling mechanism if a <see cref="T:System.Byte" /> sequence cannot be decoded with the <see cref="T:System.Text.Encoding" /> object .</param>
      <param name="throwOnInvalidCodePage">Pass <c>true</c> to have the method throw an <see cref="T:System.ArgumentException" /> if <paramref name="codePage" /> could not be converted.</param>
      <returns>An <see cref="T:System.Text.Encoding" /> object that corresponds to the specified code page number and whose properties <see cref="P:System.Text.Encoding.EncoderFallback" /> and <see cref="P:System.Text.Encoding.DecoderFallback" /> are set to the desired values. If no match is found, a corresponding <see cref="P:System.Text.Encoding" /> object for UTF-8 is returned by default. If the method is called with <c>true</c> as an argument for the <paramref name="throwOnInvalidCodePage" /> parameter, an <see cref="T:System.ArgumentException" /> will be thrown instead.</returns>
      <remarks>.NET Standard and .NET 5.0 or higher recognize by default only a small number of character sets. The method overrides this default setting.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoderFallback" /> or <paramref name="decoderFallback" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codePage" /> is less than 1 or greater than 65535. This exception is only thrown if the optional parameter <paramref name="throwOnInvalidCodePage" /> is 
<c>true</c>.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codePage" /> could not be mapped to a <see cref="T:System.Text.Encoding" /> object. This exception is only thrown if the optional parameter <paramref name="throwOnInvalidCodePage" /> is <c>true</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.TextEncodingConverter.TryGetEncoding(System.String,System.Text.Encoding@)">
      <summary>Tries to return a corresponding <see cref="T:System.Text.Encoding" /> object for the specified identifier of a character set.</summary>
      <param name="encodingWebName">The identifier of the character set.</param>
      <param name="encoding">When this method returns <c>true</c>, contains an <see cref="T:System.Text.Encoding" /> object that matches the specified identifier of a character set, <c>null</c> otherwise. This parameter is passed uninitialized.</param>
      <returns>
        <c>true</c> if the conversion was successful, <c>false</c> otherwise.</returns>
      <remarks>
        <para>
.NET Standard and .NET 5.0 or later only recognize a small number of character sets by default. The method overrides this default.
</para>
        <para>
The properties <see cref="P:System.Text.Encoding.EncoderFallback" /> and <see cref="P:System.Text.Encoding.DecoderFallback" /> of the generated <see cref="T:System.Text.Encoding" /> object are set to ReplacementFallback.
</para>
      </remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.TextEncodingConverter.TryGetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback,System.Text.Encoding@)">
      <summary>Tries to return a corresponding <see cref="T:System.Text.Encoding" /> object for the specified identifier of a character set, whose properties <see cref="P:System.Text.Encoding.EncoderFallback" /> and <see cref="P:System.Text.Encoding.DecoderFallback" /> are set to the desired values.</summary>
      <param name="encodingWebName">The identifier of the character set.</param>
      <param name="encoderFallback">An object that provides an error handling mechanism if a character cannot be encoded with the <see cref="T:System.Text.Encoding" /> object.</param>
      <param name="decoderFallback">An object that provides an error handling mechanism if a <see cref="T:System.Byte" /> sequence cannot be decoded with the <see cref="T:System.Text.Encoding" /> object .</param>
      <param name="encoding">When this method returns <c>true</c>, contains an <see cref="T:System.Text.Encoding" /> object that matches the specified identifier of a character set and whose properties <see cref="P:System.Text.Encoding.EncoderFallback" /> und <see cref="P:System.Text.Encoding.DecoderFallback" /> are set to the desired values, <c>null</c> otherwise. This parameter is passed uninitialized.</param>
      <returns>
        <c>true</c> if the conversion was successful, <c>false</c> otherwise.</returns>
      <remarks>.NET Standard and .NET 5.0 or higher recognize by default only a small number of character sets. The method overrides this default setting.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoderFallback" /> or <paramref name="decoderFallback" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.TextEncodingConverter.TryGetEncoding(System.Int32,System.Text.Encoding@)">
      <summary>Tries to return a corresponding <see cref="T:System.Text.Encoding" /> object for the specified code page number.</summary>
      <param name="codePage">
        <para>
The code page number.
</para>
        <note type="caution">
          <c>0</c> is treated as an invalid argument. This behavior is different from that of the <see cref="T:System.Text.Encoding" /> class.
</note>
      </param>
      <param name="encoding">When this method returns <c>true</c>, contains an <see cref="T:System.Text.Encoding" /> object that matches the specified code page number, <c>null</c> otherwise. This parameter is passed uninitialized.</param>
      <returns>
        <c>true</c> if the conversion was successful, <c>false</c> otherwise.</returns>
      <remarks>
        <para>
.NET Standard and .NET 5.0 or later only recognize a small number of character sets by default. The method overrides this default.
</para>
        <para>
The properties <see cref="P:System.Text.Encoding.EncoderFallback" /> and <see cref="P:System.Text.Encoding.DecoderFallback" /> of the generated <see cref="T:System.Text.Encoding" /> object are set to ReplacementFallback.
</para>
      </remarks>
    </member>
    <member name="M:FolkerKinzel.Strings.TextEncodingConverter.TryGetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback,System.Text.Encoding@)">
      <summary>Tries to return a corresponding <see cref="T:System.Text.Encoding" /> object for the specified code page number, whose properties <see cref="P:System.Text.Encoding.EncoderFallback" /> and <see cref="P:System.Text.Encoding.DecoderFallback" /> are set to the desired values.</summary>
      <param name="codePage">
        <para>
The code page number.
</para>
        <note type="caution">
          <c>0</c> is treated as an invalid argument. This behavior is different from that of the <see cref="T:System.Text.Encoding" /> class.
</note>
      </param>
      <param name="encoderFallback">An object that provides an error handling mechanism if a character cannot be encoded with the <see cref="T:System.Text.Encoding" /> object.</param>
      <param name="decoderFallback">An object that provides an error handling mechanism if a <see cref="T:System.Byte" /> sequence cannot be decoded with the <see cref="T:System.Text.Encoding" /> object .</param>
      <param name="encoding">When this method returns <c>true</c>, contains an <see cref="T:System.Text.Encoding" /> object that matches the specified code page number and whose properties <see cref="P:System.Text.Encoding.EncoderFallback" /> und <see cref="P:System.Text.Encoding.DecoderFallback" /> are set to the desired values, <c>null</c> otherwise. This parameter is passed uninitialized.</param>
      <returns>
        <c>true</c> if the conversion was successful, <c>false</c> otherwise.</returns>
      <remarks>.NET Standard and .NET 5.0 or higher recognize by default only a small number of character sets. The method overrides this default setting.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoderFallback" /> or <paramref name="decoderFallback" /> is <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.Strings.TextEncodingConverter.GetCodePage(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Examines a read-only <see cref="T:System.Byte" /> span, that represents the contents of a text file, to see if it starts with a Byte Order Mark (BOM), and returns an appropriate code page. (The fallback value is 65001 for UTF-8.)</summary>
      <param name="data">The span to examine.</param>
      <param name="bomLength">When the method returns, it contains the length of the BOM found or zero if no BOM was found. The parameter is passed uninitialized.</param>
      <returns>An appropriate code page for <paramref name="data" /> or the code page for UTF-8 (65001) if the code page could not be determined from <paramref name="data" />.</returns>
      <remarks>The method recognizes the Byte Order Marks for the following character sets:
<list type="bullet"><item>
UTF-8
</item><item>
UTF-16LE
</item><item>
UTF-16BE
</item><item>
UTF-32LE
</item><item>
UTF-32BE
</item><item>
UTF-7
</item><item>
GB18030
</item></list><para>
UTF-16LE, UTF-16BE, UTF-32LE and UTF-32BE can also be recognized by the method from the data if there is no Byte Order Mark.
</para></remarks>
    </member>
  </members>
</doc>