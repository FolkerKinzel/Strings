<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>SpanExtension.GetPersistentHashCode Method</title><meta name="Title" content="GetPersistentHashCode" /><meta name="Help.Id" content="M:FolkerKinzel.Strings.SpanExtension.GetPersistentHashCode(System.Span{System.Char},FolkerKinzel.Strings.HashType)" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.Strings" /><meta name="guid" content="c7f37150-9ed3-8119-fb4a-19b803953006" /><meta name="Description" content="Generates the same hash code for an identical string of characters each time the program is run." /><meta name="tocFile" content="../toc/IDAQA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.Strings</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Span<wbr />Extension<span id="LST91B23D4D_0" data-languageSpecificText="cpp=::|nu=."></span>Get<wbr />Persistent<wbr />Hash<wbr />Code Method</h1><div class="summary">Generates the same <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a> hash code for an identical string
            of characters each time the program is run.</div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="776eae5c-b107-6615-5a5e-d18a3bcc0b99.htm">FolkerKinzel.Strings</a><br /><strong>Assembly:</strong> FolkerKinzel.Strings (in FolkerKinzel.Strings.dll) Version: 9.2.0+9be5ed02990b77eed9a8318ed0b4e46eeb03880d<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">int</span> <span class="identifier">GetPersistentHashCode</span>(
	<span class="keyword">this</span> <span class="identifier">Span</span>&lt;<span class="identifier">char</span>&gt; <span class="parameter">span</span>,
	<span class="identifier">HashType</span> <span class="parameter">hashType</span>
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb">&lt;<span class="identifier">ExtensionAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">GetPersistentHashCode</span> ( 
	<span class="parameter">span</span> <span class="keyword">As</span> <span class="identifier">Span</span>(<span class="keyword">Of</span> <span class="identifier">Char</span>),
	<span class="parameter">hashType</span> <span class="keyword">As</span> <span class="identifier">HashType</span>
) <span class="keyword">As</span> <span class="identifier">Integer</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span>:
[<span class="identifier">ExtensionAttribute</span>]
<span class="keyword">static</span> <span class="identifier">int</span> <span class="identifier">GetPersistentHashCode</span>(
	<span class="identifier">Span</span>&lt;<span class="identifier">wchar_t</span>&gt; <span class="parameter">span</span>, 
	<span class="identifier">HashType</span> <span class="parameter">hashType</span>
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">ExtensionAttribute</span>&gt;]
<span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">GetPersistentHashCode</span> : 
        <span class="parameter">span</span> : <span class="identifier">Span</span>&lt;<span class="identifier">char</span>&gt; * 
        <span class="parameter">hashType</span> : <span class="identifier">HashType</span> <span class="keyword">-&gt;</span> <span class="identifier">int</span> </code></pre></div></div><h4 class="quickLinkHeader">Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">span</span>  <a href="https://learn.microsoft.com/dotnet/api/system.span-1" target="_blank" rel="noopener noreferrer">Span</a><span id="LST91B23D4D_1" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="https://learn.microsoft.com/dotnet/api/system.char" target="_blank" rel="noopener noreferrer">Char</a><span id="LST91B23D4D_2" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd>The Char sequence to be hashed.</dd><dt class="has-text-weight-normal"><span class="parameter">hashType</span>  <a href="043f1916-30ce-4086-3f34-edfae8e56906.htm">HashType</a></dt><dd>The kind of hashcode to be generated.</dd></dl><h4 class="quickLinkHeader">Return Value</h4><a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a><br />The hashcode.<h4 class="quickLinkHeader">Usage Note</h4>In Visual Basic and C#, you can call this method as an instance method on any object of type <a href="https://learn.microsoft.com/dotnet/api/system.span-1" target="_blank" rel="noopener noreferrer">Span</a><span id="LST91B23D4D_3" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="https://learn.microsoft.com/dotnet/api/system.char" target="_blank" rel="noopener noreferrer">Char</a><span id="LST91B23D4D_4" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>. When you use instance method syntax to call this method, omit the first parameter. For more information, see <a href="https://docs.microsoft.com/dotnet/visual-basic/programming-guide/language-features/procedures/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (Visual Basic)</a> or <a href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (C# Programming Guide)</a>.</div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDECSection"><p>
            The method <a href="https://learn.microsoft.com/dotnet/api/system.string.gethashcode" target="_blank" rel="noopener noreferrer">String.GetHashCode()</a> returns a different
            hash code for an identical string with each program run for security reasons. Apart
            from the fact that the hash algorithm of <a href="https://learn.microsoft.com/dotnet/api/system.string.gethashcode" target="_blank" rel="noopener noreferrer">String.GetHashCode()</a>
            could be different in different framework versions, it makes no sense to use the
            return value of <a href="https://learn.microsoft.com/dotnet/api/system.string.gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode<span id="LST91B23D4D_5" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> for reuse. The alternatives, e.g.
            <a href="https://learn.microsoft.com/dotnet/api/system.security.cryptography.md5" target="_blank" rel="noopener noreferrer">MD5</a> or <a href="https://learn.microsoft.com/dotnet/api/system.security.cryptography.sha256" target="_blank" rel="noopener noreferrer">SHA256</a>, use more storage space and are slower.
            This method offers a slim alternative that is suitable for hashing very short strings
            that are not used in a security-critical context.
            </p><p>
            The hashcode generated by this method is not identical to the hashcode generated
            by the .NET Framework 4.0, because it uses roundshifting to preserve more information.
            </p><p>
            The hashcodes generated with different values for <span class="parameter">hashType</span> may
            provide different hashcodes for an identical Char sequence and MUST therefore not
            be mixed.
            </p><p>
            Do not use the hashcodes generated by this method for security-critical purposes
            (such as hashing passwords)!
            </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDGCSection"><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using System;
using System.Text;
using FolkerKinzel.Strings;

namespace Examples
{
    public static class Example
    {
        public static void CreatePersistentStringHashes()
        {
            const string s1 = "Hello Folker!";
            const string s2 = "HELLO FOLKER!";
            const string s3 = "&amp;: !heL##Lof OLker *";

            const string ind = "  ";

            Console.WriteLine($"{nameof(s1)}: {s1}");
            Console.WriteLine($"{nameof(s2)}: {s2}");
            Console.WriteLine($"{nameof(s3)}: {s3}");
            Console.WriteLine();

            // The extension method GetPersistentHashCode() produces identical Int32 hash codes for identical
            // Char sequences everytime it is called - even on String, StringBuilder or ReadOnlySpan&lt;char&gt;:
            Console.WriteLine("Ordinal:");
            Console.WriteLine($"{ind}{nameof(s1)}: {s1.GetPersistentHashCode(HashType.Ordinal):X8}");
            Console.WriteLine($"{ind}{nameof(s2)}: {s2.GetPersistentHashCode(HashType.Ordinal):X8}");
            Console.WriteLine($"{ind}{nameof(s3)}: {s3.GetPersistentHashCode(HashType.Ordinal):X8}");

            Console.WriteLine("OrdinalIgnoreCase:");
            Console.WriteLine(
                $"{ind}{nameof(s1)}: {s1.AsSpan().GetPersistentHashCode(HashType.OrdinalIgnoreCase):X8}");
            Console.WriteLine(
                $"{ind}{nameof(s2)}: {s2.GetPersistentHashCode(HashType.OrdinalIgnoreCase):X8}");
            Console.WriteLine(
                $"{ind}{nameof(s3)}: {s3.GetPersistentHashCode(HashType.OrdinalIgnoreCase):X8}");

            Console.WriteLine("AlphanumericIgnoreCase:");
            Console.WriteLine(
                $"{ind}{nameof(s1)}: {s1.AsSpan().GetPersistentHashCode(HashType.AlphaNumericIgnoreCase):X8}");
            Console.WriteLine(
                $"{ind}{nameof(s2)}: {new StringBuilder().Append(s2).GetPersistentHashCode(HashType.AlphaNumericIgnoreCase):X8}");
            Console.WriteLine(
                $"{ind}{nameof(s3)}: {s3.GetPersistentHashCode(HashType.AlphaNumericIgnoreCase):X8}");

            // Different HashTypes may produce different hashcodes on the same Char sequence
            // and MUST therefore not be mixed:
            Console.WriteLine("Same String - different HashTypes:");
            Console.WriteLine(
                $"{s1.GetPersistentHashCode(HashType.Ordinal),10:X08}");
            Console.WriteLine(
                $"{s1.GetPersistentHashCode(HashType.OrdinalIgnoreCase),10:X08}");
            Console.WriteLine(
                $"{s1.GetPersistentHashCode(HashType.AlphaNumericIgnoreCase),10:X08}");
        }
    }
}

/*
Console Output:

s1: Hello Folker!
s2: HELLO FOLKER!
s3: &amp;: !heL##Lof OLker *

Ordinal:
  s1: A31FA6EC
  s2: 1BBFB34C
  s3: 364D7CD9
OrdinalIgnoreCase:
  s1: 1BBFB34C
  s2: 1BBFB34C
  s3: 12EF7A32
AlphanumericIgnoreCase:
  s1: C672C38C
  s2: C672C38C
  s3: C672C38C
Same String - different HashTypes:
  A31FA6EC
  1BBFB34C
  C672C38C
.
*/</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Exceptions</h2><div id="IDFCSection"><table class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.argumentexception" target="_blank" rel="noopener noreferrer">ArgumentException</a></td><td><span class="parameter">hashType</span> is not a defined 
            value of the <a href="043f1916-30ce-4086-3f34-edfae8e56906.htm">HashType</a> enum.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="a36533c0-21dc-d383-d7e2-f18939b92ab0.htm">SpanExtension Class</a></div><div><a href="776eae5c-b107-6615-5a5e-d18a3bcc0b99.htm">FolkerKinzel.Strings Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a><ul class="menu"><li><a class="quickLink">Parameters</a></li><li><a class="quickLink">Return Value</a></li><li><a class="quickLink">Usage Note</a></li></ul></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Exceptions</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p>Copyright © 2020 Folker Kinzel</p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>